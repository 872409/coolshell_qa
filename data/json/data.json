[
  {
    "description": "",
    "content": "我叫陈皓，我以前的blog在CSDN——http://blog.csdn.net/haoel，08、09年的时候，CSDN的博客系统很不稳定，另外，正好有一台N年前的托管的服务器，所以，就申请了域名，自己建立自己的Blog。\n\n本站为什么叫“酷壳”，绝属误打误撞。原来的域名是：CoCre.com，原意是Corporation+Creative两个单词的缩写，是我一大学同学申请的，后来他出国了，所以，我就把这个域名用来做成我的Blog了，把CoCre按发音读成“酷壳”和“酷客”，但感觉不好记，于是注册了CoolShell.cn，感觉这个可能更好记一点。要说“酷壳”有什么意思，在这里我可以说，完全没有，就是一个名字罢了。\n\n这是一个完全依靠个人建立的技术性BLOG。是一个分享技术见闻，知识，趋势的网站，这是我个人建立的网站，如果你喜欢其中的文章呢，欢迎给我们留言，如果不想留言呢，你也可以通过打分来鼓励我们分享和写作。当然，我们最欢迎的是你的加入，欢迎你和我们一起写作。欢迎大家注册并加入我们一起来分享编程和技术方面的见闻和心得。文章可以是原创，翻译、杂谈，灌水，只要是和技术和编程相关就可以。\n\n![微信公众号](https://coolshell.cn/wp-\ncontent/uploads/2009/04/qrcode_for_gh_dd9d8c843f20_860-300x300.jpg) 微信公众号\n\n**除非文章内特别说明，你可以转载酷壳的文章，但请加入文章作者和出处。谢谢。**\n\n目前，为本站的贡献文章的相关人员如下，同时，也非常欢迎您的加入！\n\n目前，本站的文章绝大多数都是由我一个人发布，有人问我怎么这么能写，其实，10年前，我就有了每天都要花1-3个小时上网阅读的习惯，后来发现国内的资料不能满足我，于是就开始到国外阅读，尤其是Web2.0时代，使用RSS可以订阅很多Blog源。有时候，读到一些有意思的文章，我会记个笔记，或是写点心得，后来一想，反正习惯了，就写成blog吧。于是就有了这个网站。\n\n我希望通过共享知识能够和更多的人交流，大多数时候，这个站点主要是以分享一些见闻，知识，技术，心得，趣闻，等等，反正是个大杂烩，对于文章的内容，质量，风格基本上没有什么要求，主要是在一种轻松的氛围下享受编程和技术其中的点点滴滴就可以了。",
    "date": "",
    "title": "关于酷壳 | 酷 壳 - CoolShell",
    "url": "https://coolshell.cn/about"
  },
  {
    "description": "",
    "content": "![陈皓的照片](https://coolshell.cn/wp-content/uploads/2011/03/me.jpg)大家好，我是 **陈皓**\n，网名 **左耳朵耗子**\n（很多人问我为什么要叫这个“一只耳”的名字，你们猜），对了，我真的不是高手，我也不是牛人，离他们的距离还很大。我从2003年开始在网上记录一些自己的技术知识和想法，今天我还在努力学习希望能成长一个高手，因为，面对生活在今天这样技术日新月异的时代，我们每个人都是一个新人。\n\n我很幸运出生在这个时代——第三次工业革命的时代，也很幸运选对了专业，所以，可以算是一只“风口上的猪”了，就是运气好，赶上了这个好的时代，我要唯一要做的就是不要辜负这个时代，无它。\n\n我以前的博客在CSDN（http://blog.csdn.net/haoel），目前已不更新，博客全面转到酷壳：http://CoolShell.cn，我基本不会在微信公众号上写文章。\n\n#### 网络信息\n\n * **MSN/Emai** l： haoel(at)hotmail.com \n（MSN不常上，每天都收邮件）\n\n芝兰生于深谷，不以无人而不芳 \n君子修身养德，不以穷困而改志\n\n#### 个人简介\n\n20年软件开发相关工作经验，10年以上项目和团队管理经验。擅长底层技术架构，团队建设，软件工程，软件研发咨询，以及全球软件团队协作管理。对高性能，高可用性，分布式，高并发，以及大规模数据处理系统有一些经验和心得。喜欢关注底层技术平台和互联网行业应用。技术擅长C/C++/Java和Unix/Linux/Windows。曾于Amazon中国任研发经理，负责电子商务全球化业务（全球开店）和全球库存预测系统的研发。曾在阿里巴巴北京研发中心、商家业务部曾任资深专家一职，负责电商云平台、开放平台，云监控和电商多媒体平台。曾在阿里巴巴核心系统专家组从事阿里核心系统和阿里云ECS相关的虚拟化平台的开发工作。现在创业中，MegaEase创始人，致力于为企业的高并发高可用架构提供一整套的技术解决方案和产品\n\n#### 痛恨手册\n\n下面这个是我个人的“痛恨手册”，这足以证明，这是一个愚蠢的时代。\n\n * 痛恨各种不从研发团队出发，不从团队和项目出发的流程、方法论、咨询师、SQA、流程部门。 \n * 痛恨那些为所欲为的，为了自己商业目标牺牲用户利益的中国IT企业。 \n * 痛恨中国的C2C式的那种简单的抄袭和复制。\n * 痛恨互联网上的那个墙，还有那些烦得不能再烦的审查机制。（我能拥有.cn域名真是一种壮举） \n * 痛恨中国的某些编辑和某些作者乱出书，出烂书。\n\n另外，我在至少45岁前不会出书，因为我觉得在那之前，我是不会沉淀足够的学识，没有资格出书。所以， **请各种出版社的编辑们不要再来找我商谈出书的事**\n。与其花精力来找我谈出书，不如想想怎么少出那么多的烂书。",
    "date": "",
    "title": "关于陈皓 | 酷 壳 - CoolShell",
    "url": "https://coolshell.cn/haoel"
  },
  {
    "content": "",
    "title": "是微服务架构不香还是云不香？",
    "url": "https://coolshell.cn/articles/22422.html",
    "date": "2023-05-08T17:52:06+08:00",
    "description": "\n这两天技术圈里热议的一件事就是Amazon的流媒体平台Prime Video在2023年3月22日发布了一篇技术博客《规模化Prime Video的音视频监控服务，成本降低90%》，副标题：“从分布式微服务架构到单体应用程序的转变有助于实现更高的规模、弹性和降低成本”，有人把这篇文章在五一期间转到了reddit 和 hacker news 上，在Reddit上热议。这种话题与业内推崇的微服务架构形成了鲜明的对比。从“微服务架构”转“单体架构”，还是Amazon干的，这个话题足够劲爆。然后DHH在刚喷完Typescript后继续发文《即便是亚马逊也无法理解Servless或微服务》，继续抨击微服务架构，于是，瞬间引爆技术圈，登上技术圈热搜。\n今天上午有好几个朋友在微信里转了三篇文章给我，如下所示：\n\n《微服务是不是个蠢主意？》\n《单体回归？亚马逊放弃用于视频监控的微服务 》\n《从微服务转为单体架构、成本降低 90%，亚马逊内部案例引发轰动》\n\n看看这些标题就知道这些文章要的是流量而不是好好写篇文章。看到第二篇，你还真当 Prime Video 就是 Amazon 的全部么？然后，再看看这些文章后面的跟风评论，我觉得有 80%的人只看标题，而且是连原文都不看的。所以，我想我得写篇文章了……\n …\n 阅读全文 Read More\n\n (58 人打了分，平均分： 4.52 )Loading...\n"
  },
  {
    "content": "",
    "title": "我看ChatGPT: 为啥谷歌掉了千亿美金",
    "url": "https://coolshell.cn/articles/22398.html",
    "date": "2023-02-12T00:31:16+08:00",
    "description": "\n两个月前，我试着想用 ChatGPT 帮我写篇文章《eBPF 介绍》，结果错误百出，导致我又要从头改一遍，从那天我觉得 ChatGPT 生成的内容完全不靠谱，所以，从那天开始我说我不会再用 ChatGPT 来写文章（这篇文章不是由 ChatGPT 生成），因为，在试过一段时间后，我对 ChatGTP 有基于如下的认识：\n\nChatGPT 不是基于事实，是基于语言模型的，事实对他来说不重要，对他重要的是他能读懂你的问题，并按照一定的套路回答你的问题。\n因为是基于套路的回答，所以，他并不能保证内容是对的，他的目标是找到漂亮的精彩的套路，于是，你会发现，他的内容组织能力和表述还不错，但是只要你认真玩上一段时间，你会发现，ChatGPT 那些表述的套路其实也比较平常一般。它的很多回答其实都不深，只能在表面上。就像 Github 的 Copilot 一样，写不了什么高级的代码，只能帮你写一些常规格式化的代码（当然，这也够了）\n\nChatGPT 就是一个语言模型，如果不给他足够的数据和信息，它基本就是在胡编乱造\n所以，基于上面这两个点认识，以发展的眼光来看问题，我觉得 ChatGPT 这类的 AI 可以成为一个小助理，他的确可以干掉那些初级的脑力工作者，但是，还干不掉专业的人士，这个我估计未来也很难，不过，这也很帅了，因为大量普通的工作的确也很让人费时间和精力，但是有个前提条件——就是ChatGPT所产生的内容必需是真实可靠的，没有这个前提条件的话，那就什么用也没有了。\n今天，我想从另外一个角度来谈谈 ChatGPT，尤其是我在Youtube上看完了微软的发布会《Introducing your copilot for the web: AI-powered Bing and Microsoft Edge 》，才真正意识到Google 的市值为什么会掉了1000亿美元，是的，谷歌的搜索引擎的霸主位置受到了前所未有的挑战……\n …\n 阅读全文 Read More\n\n (93 人打了分，平均分： 4.59 )Loading...\n"
  },
  {
    "content": "",
    "title": "聊聊 nostr 和 审查",
    "url": "https://coolshell.cn/articles/22367.html",
    "date": "2023-02-03T15:46:13+08:00",
    "description": "\n这两天在网络上又有一个东西火了，Twitter 的创始人 @jack 新的社交 iOS App  Damus 上苹果商店（第二天就因为违反中国法律在中国区下架了），这个软件是一个去中心化的 Twitter，使用到的是 nostr – Notes and Other Stuff Transmitted by Relays 的协议（协议简介，协议细节），协议简介中有很大的篇幅是在批评Twitter和其相类似的中心化的产品，如：Mastodon 和 Secure Scuttlebutt 。我顺着去看了一下这个协议，发现这个协议真是非常的简单，简单到几句话就可以讲清楚了。\n通讯过程\n\n这个协议中有两个东西，一个是 client，一个是 relay，client 就是用户社交的客户端，relay 就是转发服务器。\n用户不需要注册，用户只需要有一个密钥对（公钥+私钥）就好了，然后把要发的信息做签名，发给一组 relays\n然后你的 Follower 就可以从这些 relays 上订阅到你的信息。\n\n …\n 阅读全文 Read More\n\n (42 人打了分，平均分： 4.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "感染新冠的经历",
    "url": "https://coolshell.cn/articles/22341.html",
    "date": "2022-12-13T15:39:39+08:00",
    "description": "\n写一篇与技术无关的文章，供大家参考。我住北京朝阳，从上周三开始我家一家三口陆续发烧生病，自测抗原后，都是阳性。好消息是，这个奥密克戎跟一般的病毒性感冒差不多，没什么可怕的，不过，整个过程除了发病之外还有一些别的因为感染带出来的事，大家也需要知晓，以准备好，以免造成生活的不便，更好的照顾好自己和家人。\n整个过程\n我先说一下整个过程（我会不断更新这个过程，直到转阴）。说明一下，我孩子老婆都打过三针国产疫苗，孩子是科兴，老婆是北京生物，我完全没有打。\n先是我家孩子（12 岁）。上周三（12 月 7 日），孩子早上起来就说头疼，一测体温，38 度 5，就停止上网课，老实休息了，我们并没给孩子吃什么药，到了晚上，孩子的体温到了 39.4，嗓子疼，我老婆用酒精给孩子物理降温（注：事实上最好别用酒精，因为会被皮肤吸收导致副作用），成功降到了 38.2 左右。周四（12 月 8 日），孩子的体温在 38.2 一天，我老婆给孩子吃了莲花清瘟，被我制止了，本来想上退烧药的，但是我想体温也不算高，能不吃就不吃，于是就让孩子冲了个复方感冒冲剂（其实里面含对乙酰氨基酚，后面会说）。周五（12 月 9 日），孩子不停地出汗，到下午体温正常了，然后咳嗽，鼻涕就来了，感冒症状来了，但精神不好，体虚无力。周末休息两天就基本没事了，也转阴了。\n接下来就到我了。\n …\n 阅读全文 Read More\n\n (54 人打了分，平均分： 4.31 )Loading...\n"
  },
  {
    "content": "",
    "title": "eBPF 介绍",
    "url": "https://coolshell.cn/articles/22320.html",
    "date": "2022-12-10T10:38:51+08:00",
    "description": "\n很早前就想写一篇关于eBPF的文章，但是迟迟没有动手，这两天有点时间，所以就来写一篇，这文章主要还是简单的介绍eBPF 是用来干什么的，并通过几个示例来介绍是怎么玩的，这个技术非常非常之强，Linux 操作系统的观测性实在是太强大了，并在 BCC 加持下变得一览无余。这个技术不是一般的运维人员或是系统管理员可以驾驭的，这个还是要有底层系统知识并有一定开发能力的技术人员才能驾驭的了的。我在这篇文章的最后给了个彩蛋。\n介绍\neBPF（extened Berkeley Packet Filter）是一种内核技术，它允许开发人员在不修改内核代码的情况下运行特定的功能。eBPF 的概念源自于 Berkeley Packet Filter（BPF），后者是由贝尔实验室开发的一种网络过滤器，可以捕获和过滤网络数据包。\n出于对更好的 Linux 跟踪工具的需求，eBPF 从 dtrace中汲取灵感，dtrace 是一种主要用于 Solaris 和 BSD 操作系统的动态跟踪工具。与 dtrace 不同，Linux 无法全面了解正在运行的系统，因为它仅限于系统调用、库调用和函数的特定框架。在Berkeley Packet Filter  (BPF)（一种使用内核 VM 编写打包过滤代码的工具）的基础上，一小群工程师开始扩展 BPF 后端以提供与 dtrace 类似的功能集。 eBPF 诞生了。2014 年随 Linux 3.18 首次限量发布，充分利用 eBPF 至少需要 Linux 4.4 以上版本。\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 4.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "聊聊团队协同和协同工具",
    "url": "https://coolshell.cn/articles/22298.html",
    "date": "2022-10-14T12:20:38+08:00",
    "description": "\n这两天跟 Cali 和 Rather 做了一个线上的 Podcast – Ep.5 一起聊聊团队协同。主要是从 IM 工具扩展开来聊了一下团队的协同和相应的工具，但是聊天不是深度思考，有一些东西我没有讲透讲好，所以，我需要把我更多更完整更结构化的想法形成文字。（注：聊天聊地比较详细，本文只是想表达我的主要想法）\n国内外的企业 IM 的本质差别\n国内企业级在线交流工具主要有：企业微信、钉钉、飞书，国外的则是：Slack、Discord这两大IM工具，你会发现，他们有很多不一样的东西，其中有两个最大的不同，一个是企业管理，一个是企业文化。\n企业管理\nSlack/Discrod 主要是通过建 Channel ，而国内的IM则主要是拉群。你可能会说，这不是一样的吗？其实是不一样的，很明显，Channel 的属性是相对持久的，而群的属性则是临时的，前者是可以是部门，可以是团队，可以是项目，可以是产品，可以是某种长期存在的职能（如：技术分享），而拉群则是相对来说临时起意的，有时候，同样的人群能被重复地拉出好几次，因为之前临时起意的事做完了，所以群就被人所遗忘了，后面再有事就再来。很明显，Channel 这种方式明显是有管理的属性的，而拉群则是没有管理的。\n …\n 阅读全文 Read More\n\n (68 人打了分，平均分： 4.31 )Loading...\n"
  },
  {
    "content": "",
    "title": "从一次经历谈 TIME_WAIT 的那些事",
    "url": "https://coolshell.cn/articles/22263.html",
    "date": "2022-07-19T14:43:39+08:00",
    "description": "\n今天来讲一讲TCP 的 TIME_WAIT 的问题。这个问题尽人皆知，不过，这次遇到的是不太一样的场景，前两天也解决了，正好写篇文章，顺便把 TIME_WAIT 的那些事都说一说。对了，这个场景，跟我开源的探活小工具 EaseProbe 有关，我先说说这个场景里的问题，然后，顺着这个场景跟大家好好说一下这个事。\n问题背景\n先说一下背景，EaseProbe 是一个轻量独立的用来探活服务健康状况的小工具，支持http/tcp/shell/ssh/tls/host以及各种中间件的探活，然后，直接发送通知到主流的IM上，如：Slack/Telegram/Discrod/Email/Team，包括国内的企业微信/钉钉/飞书， 非常好用，用过的人都说好 😏。\n这个探活工具在每次探活的时候，必须要从头开始建立整个网络链接，也就是说，需要从头开始进行DNS查询，建立TCP链接，然后进行通信，再关闭链接。这里，我们不会设置 TCP 的 KeepAlive 重用链接，因为探活工具除了要探活所远端的服务，还要探活整个网络的情况，所以，每次探活都需要从新来过，这样才能捕捉得到整个链路的情况。\n …\n 阅读全文 Read More\n\n (52 人打了分，平均分： 4.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "ETCD的内存问题",
    "url": "https://coolshell.cn/articles/22242.html",
    "date": "2022-05-05T16:13:37+08:00",
    "description": "\n今天跟大家分享一个etcd的内存大量占用的问题，这是前段时间在我们开源软件Easegress中遇到的问题，问题是比较简单的，但是我还想把前因后果说一下，包括，为什么要用etcd，使用etcd的用户场景，包括etcd的一些导致内存占用比较大的设计，以及最后一些建议。希望这篇文章不仅仅只是让你看到了一个简单的内存问题，还能让你有更多的收获。当然，也欢迎您关注我们的开源软件，给我们一些鼓励。\n为什么要用ETCD\n先说一下为什么要用etcd。先从一个我们自己做的一个API网关 – Easegress（源码）说起。\nEasegress 是我们开发并开源的一个API应用网关产品，这个API应用网关不仅仅只是像nginx那样用来做一个反向代理，这个网关可以做的事很多，比如：API编排、服务发现、弹力设计（熔断、限流、重试等）、认证鉴权（JWT，OAuth2，HMAC等）、同样支持各种Cloud Native的架构如：微服务架构，Service Mesh，Serverless/FaaS的集成，并可以用于扛高并发、灰度发布、全链路压力测试、物联网……等更为高级的企业级的解决方案。所以，为了达到这些目标，在2017年的时候，我们觉得在现有的网关如Nginx上是无法演进出来这样的软件的，必需重新写一个（后来其他人也应该跟我们的想法一样，所以，Lyft写了一个Envoy。只不过，Envoy是用C++写的，而我用了技术门槛更低的Go语言）\n另外，Easegress最核心的设计主要有三个：\n …\n 阅读全文 Read More\n\n (37 人打了分，平均分： 4.54 )Loading...\n"
  },
  {
    "content": "",
    "title": "“一把梭：REST API 全用 POST”",
    "url": "https://coolshell.cn/articles/22173.html",
    "date": "2022-02-13T12:28:47+08:00",
    "description": "\n\n写这篇文章的原因主要还是因为V2EX上的这个贴子，这个贴子中说——\n“对接同事的接口，他定义的所有接口都是 post 请求，理由是 https 用 post 更安全，之前习惯使用 restful api ，如果说 https 只有 post 请求是安全的话？那为啥还需要 get 、put 、delete ？我该如何反驳他。”\n然后该贴中大量的回复大概有这么几种论调，1）POST挺好的，就应该这么干，沟通少，2）一把梭，早点干完早点回家，3）吵赢了又怎么样？工作而已，优雅不能当饭吃。虽然评论没有一边倒，但是也有大量的人支持。然后，我在Twitter上嘲讽了一下，用POST干一切就像看到了来你家装修工人说，“老子干活就是用钉子钉一切，什么螺丝、螺栓、卡扣、插销……通通不用，钉枪一把梭，方便，快捷，安全，干完早回家……不过，还是有一些网友觉得用POST挺好的，而且可以节约时间。所以，正好，我在《我做系统架构的原则》中的“原则五”中反对API返回码无论对错全是200的返回那，我专门写下这一篇文章，以正视听。\n这篇文章主要分成下面这几个部分：\n\n为什么要用不同的HTTP动词？\nRestful 进行复杂查询\n几个主要问题的回应\n\nPOST 更安全吗？\n全用 POST 可以节省时间沟通少吗？\n早点回家的正确姿势\n工作而已，优雅不能当饭吃\n\n\n\n …\n 阅读全文 Read More\n\n (215 人打了分，平均分： 4.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "谈谈公司对员工的监控",
    "url": "https://coolshell.cn/articles/22157.html",
    "date": "2022-02-12T15:50:06+08:00",
    "description": "\n今天看到微博上有一个热点事件， 是一个关于某公司做的一个监控员工离职倾向的软件，从截图中可以看到员工访问招聘网站的次数，还有投递的简历以及搜索的关建词等等信息，通过这些信息分析员工的离职倾向。然后我发一个微博，说了一下，我以前工作过的公司无论外国公司还是中国公司都有这样的情况，收到一些人来问我相关的情况，所以，我想还是写篇文章详细地说一下，我对这种事情的看法。\n\n本文分成下面个部分：\n\n公司监控员工的技术手段有哪些？\n为什么要监控员工？\n外企和国企有什么不一样？\n我对此事的看法\n\n …\n 阅读全文 Read More\n\n (76 人打了分，平均分： 4.53 )Loading...\n"
  },
  {
    "content": "",
    "title": "网络数字身份认证术",
    "url": "https://coolshell.cn/articles/21708.html",
    "date": "2022-01-02T16:38:13+08:00",
    "description": "\n这篇文章是《HTTP API 认证授权术》的姊妹篇，在那篇文章中，主要介绍了 HTTP API 认证和授权技术中用到的 HTTP Basic, Digest Access, HMAC, OAuth, JWT 等各种方式，主要是 API 上用到的一些技术，这篇文章主要想说的是另一个话题——身份认证。也就是说，怎么确认这个数据就是这个人发出来的？\n用户密码\n要解决这个问题，我们先来看一个最简单的解——使用密码，通常来说，在网络上要证明一个人的身份的话，都需要这个人的一些私密而唯一的东西。比如，像密码这样的东西，很多地方，只要你提供了你的用户名+密码，就可以确定这个人是你（注明：关于密码管理，强密码设定，密码泄漏，密码破解以及密码哄骗不在这篇文章的话题中），也就是说，这个密码是非常私密的事，我们可以假设，这个事全世界只能有当事人一个人知道，所以，当事人得供正确的密码，我们就可以认证这个人了。\n为了加强密码的安全程度，一般会使用 2FA（Two-factor authentication）或 MFA（Multi-factor authentication），双因认证或多因认证，这需要用户提供一个唯一的可信设备，比如用户的手机，然后通过验证手机短信，或是像 Google Authenticator  这样的动态口令来完成。这样的安全级别已经算是比较高了。如果能够再加上经常性的变更密码，那么安全级别就更好了。\n …\n 阅读全文 Read More\n\n (31 人打了分，平均分： 4.23 )Loading...\n"
  },
  {
    "content": "",
    "title": "我做系统架构的一些原则",
    "url": "https://coolshell.cn/articles/21672.html",
    "date": "2021-12-21T15:46:41+08:00",
    "description": "\n工作 20 多年了，这 20 来年看到了很多公司系统架构，也看到了很多问题，在跟这些公司进行交流和讨论的时候，包括进行实施和方案比较的时候，都有很多各种方案的比较和妥协，因为相关的经历越来越多，所以，逐渐形成了自己的逻辑和方法论。今天，想写下这篇文章，把我的这些个人的经验和想法总结下来，希望能够让更多的人可以参考和借鉴，并能够做出更好的架构来。另外，我的这些思维方式和原则都针对于现有市面上众多不合理的架构和方案，所以，也算是一种“纠正”……（注意，这篇文章所说的这些架构上的原则，一般适用于相对比较复杂的业务，如果只是一些简单和访问量不大的应用，那么你可能会得出相反的结论）\n原则一：关注于真正的收益而不是技术本身\n对于软件架构来说，我觉得第一重要的是架构的收益，如果不说收益，只是为了技术而技术，而没有任何意义。对于技术收益来说，我觉得下面这几个收益是非常重要的：\n\n是否可以降低技术门槛加快整个团队的开发流程。能够加快整个团队的工程流程，快速发布，是软件工程一直在解决的问题，所以，系统架构需要能够进行并行开发，并行上线和并行运维，而不会让某个团队成为瓶颈点。（注：就算拖累团队的原因是组织构架，也不妨碍我们做出并行的系统架构设计）\n是否可以让整个系统可以运行的更稳定。要让整个系统可以运行的更为的稳定，提升整个系统的 SLA，就需要对有计划和无计划的停机做相应的解决方案（参看《关于高可用的架构》）\n是否可以通过简化和自动化降低成本。最高优化的成本是人力成本，人的成本除了慢和贵，还有经常不断的 human error。如果不能降低人力成本，反而需要更多的人，那么这个架构设计一定是失败的。除此之外，是时间成本，资金成本。\n\n如果一个系统架构不能在上面三个事上起到作用，那就没有意义了。\n …\n 阅读全文 Read More\n\n (198 人打了分，平均分： 4.72 )Loading...\n"
  },
  {
    "content": "",
    "title": "源代码特洛伊木马攻击",
    "url": "https://coolshell.cn/articles/21649.html",
    "date": "2021-11-19T17:02:46+08:00",
    "description": "\n最近，我们在 Github 的 Code Review 中看到 Github 开始出现下面这个 Warning 信息—— “This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below.”也就是说我们的代码中有一些 bidirectional unicode 的文本，中文直译作 “双向文本”，意思是一些语言是从左到右的，而另一些则是是从右到左的（如：阿拉伯语），如果同一个文件里，即有从左向右的文本也有从右向左文本两种的混搭，那么，就叫bi-direction。术语通常缩写为“ BiDi ”或“ bidi ”。使用双向文本对于中国人来说并不陌生，因为中文又可以从左到右，也可以从右到左，还可以从上到下。\n\n早期的计算机仅设计为基于拉丁字母的从左到右的方式。添加新的字符集和字符编码使许多其他从左到右的脚本能够得到支持，但不容易支持从右到左的脚本，例如阿拉伯语或希伯来语，并且将两者混合使用更是不可能。从右到左的脚本是通过ISO/IEC 8859-6和ISO/IEC 8859-8等编码引入的，通常以书写和阅读顺序存储字母。可以简单地将从左到右的显示顺序翻转为从右到左的显示顺序，但这样做会牺牲正确显示从左到右脚本的能力。通过双向文本支持，可以在同一页面上混合来自不同脚本的字符，而不管书写方向如何。\n …\n 阅读全文 Read More\n\n (37 人打了分，平均分： 4.51 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go编程模式 ： 泛型编程",
    "url": "https://coolshell.cn/articles/21615.html",
    "date": "2021-09-04T13:44:02+08:00",
    "description": "\nGo语言的1.17版本发布了，其中开始正式支持泛型了。虽然还有一些限制（比如，不能把泛型函数export），但是，可以体验了。我的这个《Go编程模式》的系列终于有了真正的泛型编程了，再也不需要使用反射或是go generation这些难用的技术了。周末的时候，我把Go 1.17下载下来，然后，体验了一下泛型编程，还是很不错的。下面，就让我们来看一下Go的泛型编程。（注：不过，如果你对泛型编程的重要性还不是很了解的话，你可以先看一下之前的这篇文章《Go编程模式：Go Generation》，然后再读一下《Go编程模式：MapReduce》）\n本文是全系列中第10 / 10篇：Go编程模式Go编程模式：切片，接口，时间和性能Go 编程模式：错误处理Go 编程模式：Functional OptionsGo编程模式：委托和反转控制Go编程模式：Map-ReduceGo 编程模式：Go GenerationGo编程模式：修饰器Go编程模式：PipelineGo 编程模式：k8s Visitor 模式Go编程模式 ： 泛型编程« 上一篇文章\n初探\n我们先来看一个简单的示例：\n …\n 阅读全文 Read More\n\n (42 人打了分，平均分： 4.26 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何做一个有质量的技术分享",
    "url": "https://coolshell.cn/articles/21589.html",
    "date": "2021-07-13T13:00:46+08:00",
    "description": "\n分享信息并不难，大多数人都能做到，就算是不善言谈性格内向的技术人员，通过博客或社交媒体，或是不正式的交流，他们都能或多或少的做到。但是如果你想要做一个有质量有高度的分享，这个就难了，所谓的有质量和有高度，我心里面的定义有两点：1）分享内容的保鲜期是很长的，2）会被大范围的传递。我们团队内每周都在做技术分享，虽然分享的主题都很有价值，但是分享的质量参差不齐，所以，想写下这篇文章 。供大家参考。\n首先，我们先扪心自问一下，我们自己觉得读到的好的技术文章是什么？我不知道大家的是什么，我个人认为的好的文章是下面这样的：\n\n把复杂的问题讲解的很简单也很清楚。比如我高中时期读到这本1978年出版的《从一到无穷大》，用各种简单通俗通懂的话把各种复杂的科学知识讲的清清楚楚。还有看过的几本很好的书，有一本是《Windows程序设计》，从一个hello world的程序开始一步一步教你Windows下的原生态编程。\n有各种各样的推导和方案的比较，让你知其然知其所以然。有了不同方案的比较，才可能让人有全面的认识。这个方面的经典作著是《Effective C++》。\n原理、为什么、思路、方法论会让人一通百通。这里面最经典的恐怕就是《十万个为什么》了，在计算机方面也有几本经典书，有《Unix编程艺术》、《设计模式》、《深入理解计算机系统》等书，以及《The C10K Problem》等很多技术论文。\n\n其实，从教科书，到专业书，再到论文，都有上面这些不错的特质。 …\n 阅读全文 Read More\n\n (100 人打了分，平均分： 4.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go 编程模式：k8s Visitor 模式",
    "url": "https://coolshell.cn/articles/21263.html",
    "date": "2020-12-26T19:25:46+08:00",
    "description": "\n本篇文章主要想讨论一下，Kubernetes 的 kubectl 命令中的使用到到的一个编程模式 – Visitor（注：其实，kubectl 主要使用到了两个一个是Builder，另一个是Visitor）。本来，Visitor 是面向对象设计模英中一个很重要的设计模款（参看Wikipedia Visitor Pattern词条），这个模式是一种将算法与操作对象的结构分离的一种方法。这种分离的实际结果是能够在不修改结构的情况下向现有对象结构添加新操作，是遵循开放/封闭原则的一种方法。这篇文章我们重点看一下 kubelet 中是怎么使用函数式的方法来实现这个模式的。\n本文是全系列中第9 / 10篇：Go编程模式Go编程模式：切片，接口，时间和性能Go 编程模式：错误处理Go 编程模式：Functional OptionsGo编程模式：委托和反转控制Go编程模式：Map-ReduceGo 编程模式：Go GenerationGo编程模式：修饰器Go编程模式：PipelineGo 编程模式：k8s Visitor 模式Go编程模式 ： 泛型编程« 上一篇文章下一篇文章 »\n一个简单示例\n我们还是先来看一个简单设计模式的Visitor的示例。\n\n我们的代码中有一个Visitor的函数定义，还有一个Shape接口，其需要使用 Visitor函数做为参数。\n我们的实例的对象 Circle和 Rectangle实现了 Shape 的接口的 accept() 方法，这个方法就是等外面给我传递一个Visitor。\n\n …\n 阅读全文 Read More\n\n (58 人打了分，平均分： 4.09 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go编程模式：Pipeline",
    "url": "https://coolshell.cn/articles/21228.html",
    "date": "2020-12-26T17:04:59+08:00",
    "description": "\n\n本篇文章，我们着重介绍Go编程中的Pipeline模式。对于Pipeline用过Unix/Linux命令行的人都不会陌生，他是一种把各种命令拼接起来完成一个更强功能的技术方法。在今天，流式处理，函数式编程，以及应用网关对微服务进行简单的API编排，其实都是受pipeline这种技术方式的影响，Pipeline这种技术在可以很容易的把代码按单一职责的原则拆分成多个高内聚低耦合的小模块，然后可以很方便地拼装起来去完成比较复杂的功能。\n本文是全系列中第8 / 10篇：Go编程模式Go编程模式：切片，接口，时间和性能Go 编程模式：错误处理Go 编程模式：Functional OptionsGo编程模式：委托和反转控制Go编程模式：Map-ReduceGo 编程模式：Go GenerationGo编程模式：修饰器Go编程模式：PipelineGo 编程模式：k8s Visitor 模式Go编程模式 ： 泛型编程« 上一篇文章下一篇文章 »\nHTTP 处理\n这种Pipeline的模式，我们在《Go编程模式：修饰器》中有过一个示例，我们在这里再重温一下。在那篇文章中，我们有一堆如 WithServerHead() 、WithBasicAuth() 、WithDebugLog()这样的小功能代码，在我们需要实现某个HTTP API 的时候，我们就可以很容易的组织起来。\n原来的代码是下面这个样子：\n …\n 阅读全文 Read More\n\n (38 人打了分，平均分： 3.92 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go编程模式：委托和反转控制",
    "url": "https://coolshell.cn/articles/21214.html",
    "date": "2020-12-26T16:57:48+08:00",
    "description": "\n图片来源：GopherSource\n反转控制IoC – Inversion of Control 是一种软件设计的方法，其主要的思想是把控制逻辑与业务逻辑分享，不要在业务逻辑里写控制逻辑，这样会让控制逻辑依赖于业务逻辑，而是反过来，让业务逻辑依赖控制逻辑。在《IoC/DIP其实是一种管理思想》中的那个开关和电灯的示例一样，开关是控制逻辑，电器是业务逻辑，不要在电器中实现开关，而是把开关抽象成一种协议，让电器都依赖之。这样的编程方式可以有效的降低程序复杂度，并提升代码重用。\n本文是全系列中第4 / 10篇：Go编程模式Go编程模式：切片，接口，时间和性能Go 编程模式：错误处理Go 编程模式：Functional OptionsGo编程模式：委托和反转控制Go编程模式：Map-ReduceGo 编程模式：Go GenerationGo编程模式：修饰器Go编程模式：PipelineGo 编程模式：k8s Visitor 模式Go编程模式 ： 泛型编程« 上一篇文章下一篇文章 »\n面向对象的设计模式这里不提了，我们来看看Go语言使用Embed结构的一个示例。\n …\n 阅读全文 Read More\n\n (38 人打了分，平均分： 4.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go 编程模式：Go Generation",
    "url": "https://coolshell.cn/articles/21179.html",
    "date": "2020-12-25T17:06:36+08:00",
    "description": "\n图片来源：GopherSource\n在本篇文章中，我们将要学习一下Go语言的代码生成的玩法。Go语言代码生成主要还是用来解决编程泛型的问题，泛型编程主要解决的问题是因为静态类型语言有类型，所以，相关的算法或是对数据处理的程序会因为类型不同而需要复制一份，这样导致数据类型和算法功能耦合的问题。泛型编程可以解决这样的问题，就是说，在写代码的时候，不用关心处理数据的类型，只需要关心相当处理逻辑。泛型编程是静态语言中非常非常重要的特征，如果没有泛型，我们很难做到多态，也很难完成抽象，会导致我们的代码冗余量很大。\n本文是全系列中第6 / 10篇：Go编程模式Go编程模式：切片，接口，时间和性能Go 编程模式：错误处理Go 编程模式：Functional OptionsGo编程模式：委托和反转控制Go编程模式：Map-ReduceGo 编程模式：Go GenerationGo编程模式：修饰器Go编程模式：PipelineGo 编程模式：k8s Visitor 模式Go编程模式 ： 泛型编程« 上一篇文章下一篇文章 »\n现实中的类比\n举个现实当中的例子，用螺丝刀来做具比方，螺丝刀本来就是一个拧螺丝的动作，但是因为螺丝的类型太多，有平口的，有十字口的，有六角的……螺丝还有大小尺寸，导致我们的螺丝刀为了要适配各种千奇百怪的螺丝类型（样式和尺寸），导致要做出各种各样的螺丝刀。\n\n\n\n\n\n\n\n\n而真正的抽象是螺丝刀不应该关心螺丝的类型，只要关注好自己的功能是否完备，并让自己可以适配于不同类型的螺丝，如下所示，这就是所谓的泛型编程要解决的实际问题。\n …\n 阅读全文 Read More\n\n (29 人打了分，平均分： 3.72 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go编程模式：Map-Reduce",
    "url": "https://coolshell.cn/articles/21164.html",
    "date": "2020-12-24T15:13:52+08:00",
    "description": "\n在本篇文章中，我们学习一下函数式编程的中非常重要的Map、Reduce、Filter的三种操作，这三种操作可以让我们非常方便灵活地进行一些数据处理——我们的程序中大多数情况下都是在到倒腾数据，尤其对于一些需要统计的业务场景，Map/Reduce/Filter是非常通用的玩法。下面先来看几个例子：\n本文是全系列中第5 / 10篇：Go编程模式Go编程模式：切片，接口，时间和性能Go 编程模式：错误处理Go 编程模式：Functional OptionsGo编程模式：委托和反转控制Go编程模式：Map-ReduceGo 编程模式：Go GenerationGo编程模式：修饰器Go编程模式：PipelineGo 编程模式：k8s Visitor 模式Go编程模式 ： 泛型编程« 上一篇文章下一篇文章 »\n基本示例\nMap示例\n下面的程序代码中，我们写了两个Map函数，这两个函数需要两个参数，\n\n一个是字符串数组 []string，说明需要处理的数据一个字符串\n另一个是一个函数func(s string) string 或 func(s string) int\n\nfunc MapStrToStr(arr []string, fn func(s string) string) []string {\n    var newArray = []string{}\n    for _, it := range arr {\n        newArray = append(newArray, fn(it))\n    }\n    return newArray\n}\n\nfunc MapStrToInt(arr []string, fn func(s string) int) []int {\n    var newArray = []int{}\n    for _, it := range arr {\n        newArray = append(newArray, fn(it))\n    }\n    return newArray\n}\n整个Map函数运行逻辑都很相似，函数体都是在遍历第一个参数的数组，然后，调用第二个参数的函数，然后把其值组合成另一个数组返回。\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 3.79 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go 编程模式：Functional Options",
    "url": "https://coolshell.cn/articles/21146.html",
    "date": "2020-12-22T23:23:52+08:00",
    "description": "\n在本篇文章中，我们来讨论一下Functional Options这个编程模式。这是一个函数式编程的应用案例，编程技巧也很好，是目前在Go语言中最流行的一种编程模式。但是，在我们正式讨论这个模式之前，我们需要先来看看要解决什么样的问题。\n本文是全系列中第3 / 10篇：Go编程模式Go编程模式：切片，接口，时间和性能Go 编程模式：错误处理Go 编程模式：Functional OptionsGo编程模式：委托和反转控制Go编程模式：Map-ReduceGo 编程模式：Go GenerationGo编程模式：修饰器Go编程模式：PipelineGo 编程模式：k8s Visitor 模式Go编程模式 ： 泛型编程« 上一篇文章下一篇文章 »\n配置选项问题\n在我们编程中，我们会经常性的需要对一个对象（或是业务实体）进行相关的配置。比如下面这个业务实体（注意，这仅只是一个示例）：\ntype Server struct {\n    Addr     string\n    Port     int\n    Protocol string\n    Timeout  time.Duration\n    MaxConns int\n    TLS      *tls.Config\n}\n在这个 Server 对象中，我们可以看到：\n …\n 阅读全文 Read More\n\n (50 人打了分，平均分： 4.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go 编程模式：错误处理",
    "url": "https://coolshell.cn/articles/21140.html",
    "date": "2020-12-22T18:19:30+08:00",
    "description": "\n错误处理一直以一是编程必需要面对的问题，错误处理如果做的好的话，代码的稳定性会很好。不同的语言有不同的出现处理的方式。Go语言也一样，在本篇文章中，我们来讨论一下Go语言的出错出处，尤其是那令人抓狂的 if err != nil 。\n在正式讨论Go代码里满屏的 if err != nil 怎么办这个事之前，我想先说一说编程中的错误处理。这样可以让大家在更高的层面理解编程中的错误处理。\n本文是全系列中第2 / 10篇：Go编程模式Go编程模式：切片，接口，时间和性能Go 编程模式：错误处理Go 编程模式：Functional OptionsGo编程模式：委托和反转控制Go编程模式：Map-ReduceGo 编程模式：Go GenerationGo编程模式：修饰器Go编程模式：PipelineGo 编程模式：k8s Visitor 模式Go编程模式 ： 泛型编程« 上一篇文章下一篇文章 »\nC语言的错误检查\n首先，我们知道，处理错误最直接的方式是通过错误码，这也是传统的方式，在过程式语言中通常都是用这样的方式处理错误的。比如 C 语言，基本上来说，其通过函数的返回值标识是否有错，然后通过全局的 errno 变量并配合一个 errstr 的数组来告诉你为什么出错。\n为什么是这样的设计？道理很简单，除了可以共用一些错误，更重要的是这其实是一种妥协。比如：read(), write(), open() 这些函数的返回值其实是返回有业务逻辑的值。也就是说，这些函数的返回值有两种语义，一种是成功的值，比如 open() 返回的文件句柄指针 FILE* ，或是错误 NULL。这样会导致调用者并不知道是什么原因出错了，需要去检查 errno 来获得出错的原因，从而可以正确地处理错误。\n一般而言，这样的错误处理方式在大多数情况下是没什么问题的。但是也有例外的情况，我们来看一下下面这个 C 语言的函数：\n …\n 阅读全文 Read More\n\n (38 人打了分，平均分： 4.05 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go编程模式：切片，接口，时间和性能",
    "url": "https://coolshell.cn/articles/21128.html",
    "date": "2020-12-18T15:36:30+08:00",
    "description": "\n\n在本篇文章中，我会对Go语言编程模式的一些基本技术和要点，这样可以让你更容易掌握Go语言编程。其中，主要包括，数组切片的一些小坑，还有接口编程，以及时间和程序运行性能相关的话题。\n本文是全系列中第1 / 10篇：Go编程模式Go编程模式：切片，接口，时间和性能Go 编程模式：错误处理Go 编程模式：Functional OptionsGo编程模式：委托和反转控制Go编程模式：Map-ReduceGo 编程模式：Go GenerationGo编程模式：修饰器Go编程模式：PipelineGo 编程模式：k8s Visitor 模式Go编程模式 ： 泛型编程下一篇文章 »\nSlice\n首先，我们先来讨论一下Slice，中文翻译叫“切片”，这个东西在Go语言中不是数组，而是一个结构体，其定义如下：\ntype slice struct {\n    array unsafe.Pointer //指向存放数据的数组指针\n    len   int            //长度有多大\n    cap   int            //容量有多大\n}\n用图示来看，一个空的slice的表现如下：\n 熟悉C/C++的同学一定会知道，在结构体里用数组指针的问题——数据会发生共享！下面我们来看一下slice的一些操作\n …\n 阅读全文 Read More\n\n (43 人打了分，平均分： 4.28 )Loading...\n"
  },
  {
    "content": "",
    "title": "百度为什么掉队了",
    "url": "https://coolshell.cn/articles/21113.html",
    "date": "2020-12-16T18:46:17+08:00",
    "description": "\n今天早上看到一篇文章《百度不要用户》这篇文章里的大意是：百度错过了移动互联网，等反应过来的时候，在2013年猛收购了一些公司来追赶对手或是时代，但都不成功，然后又开始后过来走到技术，大力发展AI，可惜，AI又是一个不是很成熟的事，需要没有上限的投入，而且在短期内看不到盈利的事，然而整个KPI又设计在了盈利上，最后导致内部内耗严重，人才和管理层流失，最终离用户越来越远。\n文章中有一个段落的标题是【做决策的是技术】，其中有话是这样的——\n在“重技术、轻运营”的百度，产品的主导权和优先权在技术手里，产品和运营的立项话语权相对轻很多。如果是在 PC 时代，这无可厚非，但在移动互联网时代，这就有很大的问题。\n这就是中国这个社会的价值观了，整个社会价值观从本质上来说是不待见技术的——平时都说技术不重要，但是当有问题出现的的时候，他们都会把问题都推到技术上。\n虽然我同意这篇文章中大多数观点，但是我对“做决策的是技术造成了问题”有很大的不同意，并不是我是技术人员，我只会站在我的角度上思考问题，而且，这个结论就是错的。\n …\n 阅读全文 Read More\n\n (103 人打了分，平均分： 4.44 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员如何把控自己的职业",
    "url": "https://coolshell.cn/articles/20977.html",
    "date": "2020-08-07T17:31:29+08:00",
    "description": "\n这篇文章的主要内容主要是我今年3月份在腾讯做的直播，主要是想让一些技术人员对世界有一个大体的认识，并且在这个认识下能够有一个好的方法成就自己。而不是在一脸蒙圈的状态下随波逐流，而日益迷茫和焦虑。直播完后，腾讯方面把我的直播形成文字的形式发了出来，我觉得我可以再做一个精编版。所以，有了这篇文章，希望对大家有帮助。\n对我来说，在我二十多年的工作经历来看，期间经历了很多技术的更新换代，整个技术模式、业务模式也是一直变来变去，我们这群老程序员成长中所经历的技术比今天的程序员玩的还更杂更多。我罗列一下我学过的，而且还被淘汰掉的技术，大家先感受一下。\n- MIS应用开发：FoxPro，PowerBuilder，Delphi\n- OA：Lotus Notes，VBScripts\n- 微软：ODBC/ADO，COM/DCOM，MFC/ATL，J++\n- 服务器：AIX，HP-UX，SCO Unix\n- Web：CGI，ISAPI，SOAP\n- RPC：CICS，Tuxedo\n- J2EE：Websphere，Weblogic\n- DB：Sybase，Informix \n\n我想说的是，无论过去还是今天，我们这些前浪和你们后浪所面对的技术的挑战和对技术的焦虑感是相似的，我们那个时候不但玩996，还玩封闭开发（就是一周只能回家一天）。当然，唯一好的东西，就是比起今天的程序员来说，我们那个年代没有像微信、微博、知乎，抖音这些巨大消耗你人生的东西，所以，我们的工作、生活和成长都有很效率，不会被打断、喜欢看书、Google还没有被封……当然，那时代没有StackOverlow和Github这样的东西，所以，能完成的东西或质量都一般。\n …\n 阅读全文 Read More\n\n (419 人打了分，平均分： 4.74 )Loading...\n"
  },
  {
    "content": "",
    "title": "计时攻击 Timing Attacks",
    "url": "https://coolshell.cn/articles/21003.html",
    "date": "2020-07-05T13:26:52+08:00",
    "description": "\n本文来自读者“程序猿石头”的投稿文章《这 10 行比较字符串相等的代码给我整懵了，不信你也来看看》，原文写的很好，但不够直接了当，信息密度不够高，所以我对原文进行大量的删减、裁剪、改写和添加，主要删除了一些没有信息的段落，主要加入了如何实施计时攻击相关的其它内容，让这篇文章中的知识更系统一些，并且还指出了其它的一些问题。所以，我把标题也改成了《计时攻击 Timing Attacks》。\n另类的字符串比较\n在 Java 的 Play Framework 里有一段代码用来验证cookie(session)中的数据是否合法（包含签名的验证）的代码，如下所示：\nboolean safeEqual(String a, String b) {\n   if (a.length() != b.length()) {\n       return false;\n   }\n   int equal = 0;\n   for (int i = 0; i < a.length(); i++) {\n       equal |= a.charAt(i) ^ b.charAt(i);\n   }\n   return equal == 0;\n}\n相信刚看到这段源码的人会感觉挺奇怪的，这个函数的功能是比较两个字符串是否相等，如果要判断两个字符串是否相等，正常人的写法应该是下面这个样子的（来自JDK8 的 String.equals()-有删减）：\n …\n 阅读全文 Read More\n\n (104 人打了分，平均分： 4.62 )Loading...\n"
  },
  {
    "content": "",
    "title": "Rust语言的编程范式",
    "url": "https://coolshell.cn/articles/20845.html",
    "date": "2020-04-04T14:48:23+08:00",
    "description": "\n总是有很多很多人来问我对Rust语言怎么看的问题，在各种地方被at，其实，我不是很想表达我的想法。因为在不同的角度，你会看到不同的东西。编程语言这个东西，老实说很难评价，在学术上来说，Lisp就是很好的语言，然而在工程使用的时候，你会发现Lisp没什么人用，而Javascript或是PHP这样在学术很糟糕设计的语言反而成了主流，你觉得C++很反人类，在我看来，C++有很多不错的设计，而且对于了解编程语言和编译器的和原理非常有帮助。但是C++也很危险，所以，出现在像Java或Go 语言来改善它，Rust本质上也是在改善C++的。他们各自都有各自的长处和优势。\n因为各个语言都有好有不好，因此，我不想用别的语言来说Rust的问题，或是把Rust吹成朵花以打压别的语言，写成这样的文章，是很没有营养的事。本文主要想通过Rust的语言设计来看看编程中的一些挑战，尤其是Rust重要的一些编程范式，这样反而更有意义一些，因为这样你才可能一通百通。\n这篇文章的篇幅比较长，而且有很多代码，信息量可能会非常大，所以，在读本文前，你需要有如下的知识准备：\n\n你对C++语言的一些特性和问题比较熟悉。尤其是：指针、引用、右值move、内存对象管理、泛型编程、智能指针……\n当然，你还要略懂Rust，不懂也没太大关系，但本文不会是Rust的教程文章，可以参看“Rust的官方教程”（中文版）\n\n因为本文太长，所以，我有必要写上 TL;DR ——\n …\n 阅读全文 Read More\n\n (119 人打了分，平均分： 4.59 )Loading...\n"
  },
  {
    "content": "",
    "title": "与程序员相关的CPU缓存知识",
    "url": "https://coolshell.cn/articles/20793.html",
    "date": "2020-03-01T19:43:41+08:00",
    "description": "\n好久没有写一些微观方面的文章了，今天写一篇关于CPU Cache相关的文章，这篇文章比较长，主要分成这么几个部分：基础知识、缓存的命中、缓存的一致性、相关的代码示例和延伸阅读。其中会讲述一些多核 CPU 的系统架构以及其原理，包括对程序性能上的影响，以及在进行并发编程的时候需要注意到的一些问题。这篇文章我会尽量地写简单和通俗易懂一些，主要是讲清楚相关的原理和问题，而对于一些细节和延伸阅读我会在文章最后会给出相关的资源。\n因为无论你写什么样的代码都会交给CPU来执行，所以，如果你想写出性能比较高的代码，这篇文章中提到的技术还是值得认真学习的。另外，千万别觉得这些东西没用，这些东西非常有用，十多年前就是这些知识在性能调优上帮了我的很多大忙，从而跟很多人拉开了差距……\n基础知识\n首先，我们都知道现在的CPU多核技术，都会有几级缓存，老的CPU会有两级内存（L1和L2），新的CPU会有三级内存（L1，L2，L3 ），如下图所示：\n …\n 阅读全文 Read More\n\n (147 人打了分，平均分： 4.53 )Loading...\n"
  },
  {
    "content": "",
    "title": "MegaEase的远程工作文化",
    "url": "https://coolshell.cn/articles/20765.html",
    "date": "2020-01-31T15:23:18+08:00",
    "description": "\nMegaEase 是我创业的公司，主要是想把云计算（PaaS/SaaS层）的那些高可用高并发的分布式技术普及到那需要对技术自主可控的公司，这样就不需要去使用不能自主可控的闭源系统或是大公司的云平台。我于2016年开始成立MegaEase，从早期8个人，直到今天有20来个人，我们从一开始到今天都是在远程工作的公司文化。因为我很喜欢《Rework》这本书，写这本书的公司叫37signal（现名basecamp），这家公司在发《Rework》这本书的时候，整个公司只有16个人，分布在全世界8个城市，这种Geek的公司的文化很吸引我，所以，在我决定创业的时候，我就止不住地想成立这样能够远程工作的公司，于是，远程工作的团队文化就这样成为了MegaEase的基因。下面我会分享一下，我们公司的远程工作文化和其中的一些问题，最后还有一个工作协议。\n我们在早期的时候，8个员工来自5个城市，现在的20来个员工来自8个城市2个国家。虽然我们现在使用“共享办公室”，但是本质上，我们的整个文化是远程工作的文化。在2017-2018年度，我们公司产品商业化以来，公司早期的8个工程师在远程工作的状态下成功支持了得到的老罗的跨年演讲活动，以及其它几个客户，一方面验证了用户愿意付费购买我们的产品和服务之后，另一方面也有一些不错的收入，客单价都在百万左右。还记得当时，有几个投资人并不相信我们连个办公室都没有，而且8个人分布在5个城市，觉得我们是个骗子公司（哈哈）。在过去的一年，我们通过我们的产品和服务帮助银行电信互联网等公司进行了他们的系统架构的改造和升级，让复杂和高门槛的分布式技术和架构可以被更多的企业所掌握所应用。这说明，远程工作是没有什么问题的。实际上远程团队远程工作真的不新鲜，Github上有个Repo维护着一个支持远程工作的公司列表，还有一个跟远程工作相关的Awesome索引。\n当然，自从我创业以来，我身边就一直有好些不同的声音质疑远程工作。听过他们的理由后，我能够理解他们的疑虑和困惑，因为管理的确是一个很复杂的事，因为要面对的是极为复杂的人，所以，有这些疑虑也是正常的。下面是我的一些经验和分享。先说宏观管理，再说微观实践。\n …\n 阅读全文 Read More\n\n (168 人打了分，平均分： 4.64 )Loading...\n"
  },
  {
    "content": "",
    "title": "使用简单的逻辑方法进行独立思考",
    "url": "https://coolshell.cn/articles/20533.html",
    "date": "2019-12-26T22:46:53+08:00",
    "description": "\n这是一个非常复杂的世界，这个世界上有很多各式各样的观点和思维方式，作为一个程序员的我，也会有程序员的思维方式，程序员的思维方式更接近数学的思维方式，数学的思维方式让可以很容易地理清楚这个混乱的世界，其实，并不需要太复杂的数学逻辑，只需要使用一些简单的数学方法，就可以大幅提升自己的认识能力，所以，在这里，记录一篇我自己的思维方式，一方面给大家做个参考，另一方面也供更高阶的人给我进行指正。算是“开源我的思维方式”，开放不仅仅是为了输出，更是为了看看有没有更好的方式。\n我的思维方式中，使用数学逻辑的方式进行思考，通常来说，我会使用五步思考的方式：\n第一步：信息数据可考证。如果一个观点或是一个见解的数据是错误的，那么就会造成后面的观点全是错的，所以，首要的是要进行数据的查证或考证。一般来说，如果一篇文章的作者足够严谨的话，他的需要给他的数据建立相关的引用或是可以考证的方法方式。如果一篇文章中出现的是，“有关专家表明”、“美国科学家证明”、“经济学家指出”，但是没有任出处，也没有点明这个专家或是科学家的名字，或是，也没有说明或引用让读者可以自己去验证的方法。那么，其引用的话或是数据是无法考证的，如果是无法考证的，那么，这篇文章的水份就非常大了。一般来说，当我读到一篇文章中的东西没有可考证的来源或是方法时，通常来说，我就不会再读了，因为这篇文章的价值已经不大了，如果我关心这篇文章中的东西，我会改为自己去查找的方式，虽然变“重”了，但是很安全。（所以，像Wikipedia这样的网站是我经常去获得信息的地方，因为信息可以被考证是其基本价值观）\n …\n 阅读全文 Read More\n\n (143 人打了分，平均分： 4.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "别让自己“墙”了自己",
    "url": "https://coolshell.cn/articles/20276.html",
    "date": "2019-12-01T11:10:21+08:00",
    "description": "\n这一两周与几个朋友聊天，有年轻的90后，也有大叔级的70后，这些人在我看来都是很有能力的人，但是一些喜好过于强烈，让我不经意地回顾了我工作20年来身边的人，有发展得好的，也有发展的不好的，有些人是很可惜的，因为限制他们的不是其它人，也不是环境，而是自己，所以，很想写下这篇文章。（注：这篇文章可能会是一篇说教的文章，所以，可能会让你看着犯困，所以，我会尽量地短一些，而且尽可能多讲故事，少道理，这里的故事，全是真实发生的）\n几个故事\n2019年年初，我面试了一个很年轻的小伙子（93/94年出生），这个小伙子特别有灵性，也很聪明，计算机专业出身，也很喜欢技术，基础和学习能力也很好。在我这20年来认识的人中，如果他能呆在北京、上海、深圳这样的城市，我保证不出三年，他会成为他们同龄人中非常出色的技术人员，如果有个好的舞台有一个好的团队带他，他的未来会非常成功。然而，这个小伙子有两大喜好：1）只愿（或是说被迫）呆在一个毫无IT的环境的三/四线城市，2）对技术有非常大的偏好，只喜欢Go语言，非常不喜欢其它的语言，比如：Java（离开Java的世界，基本上离开了做架构的世界（相关解释见文末））。\n他的这两个喜好，足以让一个未来会很优秀的人毁掉，因为，这个时代没有限制他，他的能力也没有限制他，但是他的意识完完全全地限制了他。 …\n 阅读全文 Read More\n\n (439 人打了分，平均分： 4.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "Unix 50 年：Ken Thompson 的密码",
    "url": "https://coolshell.cn/articles/19996.html",
    "date": "2019-11-03T14:12:54+08:00",
    "description": "\n50年前，除了Apollo上天之外，还有一个大事的发生，就是Unix操作系统的诞生，若干年前我写过《Unix的传奇，上篇，下篇》，Unix是我入行前十年伴我成长的操作系统，虽然现在Linux早已接过了Unix的时代交接棒，但是，Unix文化对我个人的技术观影响是非常大的（注：《Unix编程艺术》是一本对影响我很深的书），而对于 Ken Thompson 和 Dennis Ritchie 这两位 Unix 的缔造者，也是计算机圈中的神一般的人物。今天，Dennis已经去逝，Ken在Google里跟 Rob Pike和 Robert Griesemer 这两位大神在开发Go语言。\nP.S. 今年，我一直想写篇Unix 50周年纪念的文章，但一直无从下手，因为不想写过大的命题，如果能写个轶事最好不过。正好过完国庆节，技术圈里有个“热搜”——Ken Thompson的密码。但一直没有时间，所以拖到今天才写下来。\n正文开始，2014年，有个叫Leah Neukirchen的程序员（blog）在 BSD 3 的源代码中的 /etc/passwd 看到了早年Unix黑客们的被 hash了的密码，该文件如下所示：\n …\n 阅读全文 Read More\n\n (73 人打了分，平均分： 4.48 )Loading...\n"
  },
  {
    "content": "",
    "title": "HTTP的前世今生",
    "url": "https://coolshell.cn/articles/19840.html",
    "date": "2019-10-01T19:21:10+08:00",
    "description": "\nHTTP (Hypertext transfer protocol) 翻译成中文是超文本传输协议，是互联网上重要的一个协议，由欧洲核子研究委员会CERN的英国工程师 Tim Berners-Lee v发明的，同时，他也是WWW的发明人，最初的主要是用于传递通过HTML封装过的数据。在1991年发布了HTTP 0.9版，在1996年发布1.0版，1997年是1.1版，1.1版也是到今天为止传输最广泛的版本（初始RFC 2068 在1997年发布， 然后在1999年被 RFC 2616 取代，再在2014年被 RFC 7230 /7231/7232/7233/7234/7235取代），2015年发布了2.0版，其极大的优化了HTTP/1.1的性能和安全性，而2018年发布的3.0版，继续优化HTTP/2，激进地使用UDP取代TCP协议，目前，HTTP/3 在2019年9月26日 被 Chrome，Firefox，和Cloudflare支持，所以我想写下这篇文章，简单地说一下HTTP的前世今生，让大家学到一些知识，并希望可以在推动一下HTTP标准协议的发展。\nHTTP 0.9 / 1.0\n0.9和1.0这两个版本，就是最传统的 request – response的模式了，HTTP 0.9版本的协议简单到极点，请求时，不支持请求头，只支持 GET 方法，没了。HTTP 1.0 扩展了0.9版，其中主要增加了几个变化：\n …\n 阅读全文 Read More\n\n (71 人打了分，平均分： 4.28 )Loading...\n"
  },
  {
    "content": "",
    "title": "50年前的登月程序和程序员有多硬核",
    "url": "https://coolshell.cn/articles/19612.html",
    "date": "2019-07-21T19:00:30+08:00",
    "description": "\n2019年7月20日，是有纪念意义的一天，这天不是因为广大网民帮周杰伦在新浪微博上的超话刷到第一，而是阿波罗登月的50周年的纪念日。早在几年前，在Github上放出了当年Apollo飞船使用的源代码（当然是汇编的），但完全不明白为什么这几天会有一些中国的小朋友到这个github的issue里灌水……，人类历史上这么伟大的一件事，为什么不借这个机会学习一下呢？下面是一些阿波罗登月与程序员相关的小故事，顺着这些东西，你可以把你的周末和精力用得更有价值。\n\n首先，要说的是Apollo 11导航的源代码，这些代码的设计负责人叫Margaret Heafield Hamilton ，是一个女程序员，专业是数学和哲学，1960年得到一个MIT麻省理工大学的临时的软件开发职位，负责在PDP-1和LGP-30上运行天气预报的软件（注：在计算机历史上，PDP系统机器被称为Hack文化的重要推手，PDP-11推了Unix操作系统，而Unix操作系统则是黑客文化的重要产品。参看《Unix传奇》）。然后，她又为美国空军编写探测知敌方飞行的软件，之后，于1965年的时候，她加入了MIT仪器实验室，并成为了这个实验室的主管，这个实验实就是Apollo计划的一部分，她负责编写全新的月球登录的导航软件，以及后来该软件在其他项目中的各个版本。\n …\n 阅读全文 Read More\n\n (177 人打了分，平均分： 4.55 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何超过大多数人",
    "url": "https://coolshell.cn/articles/19464.html",
    "date": "2019-06-22T13:47:57+08:00",
    "description": "\n当你看到这篇文章的标题，你一定对这篇文章产生了巨大的兴趣，因为你的潜意识在告诉你，这是一本人生的“武林秘籍”，而且还是左耳朵写的，一定有干货满满，只要读完，一定可以练就神功并找到超过大多数人的快车道和捷径……然而…… 当你看到我这样开篇时，你一定会觉得我马上就要有个转折，告诉你这是不可能的，一切都需要付出和努力……然而，你错了，这篇文章还真就是一篇“秘籍”，只要你把这些“秘籍”用起来，你就一定可以超过大多数人。而且，这篇文章只有我这个“人生导师”可以写得好。毕竟，我的生命过到了十六进制2B的年纪，踏入这个社会已超过20年，舍我其谁呢？！\nP.S. 这篇文章借鉴于《如何写出无法维护的代码》一文的风格……嘿嘿\n相关技巧和最佳实践\n要超过别人其实还是比较简单的，尤其在今天的中国，更是简单。因为，你只看看中国的互联网，你就会发现，他们基本上全部都是在消费大众，让大众变得更为地愚蠢和傻瓜。所以，在今天的中国，你基本上不用做什么，只需要不使用中国互联网，你就很自然地超过大多数人了。当然，如果你还想跟他们彻底拉开，甩他们几个身位，把别人打到底层，下面的这些“技巧”你要多多了解一下。 …\n 阅读全文 Read More\n\n (482 人打了分，平均分： 4.70 )Loading...\n"
  },
  {
    "content": "",
    "title": "HTTP API 认证授权术",
    "url": "https://coolshell.cn/articles/19395.html",
    "date": "2019-05-09T21:37:29+08:00",
    "description": "\n我们知道，HTTP是无状态的，所以，当我们需要获得用户是否在登录的状态时，我们需要检查用户的登录状态，一般来说，用户的登录成功后，服务器会发一个登录凭证（又被叫作Token），就像你去访问某个公司，在前台被认证过合法后，这个公司的前台会给你的一个访客卡一样，之后，你在这个公司内去到哪都用这个访客卡来开门，而不再校验你是哪一个人。在计算机的世界里，这个登录凭证的相关数据会放在两种地方，一个地方在用户端，以Cookie的方式（一般不会放在浏览器的Local Storage，因为这很容易出现登录凭证被XSS攻击），另一个地方是放在服务器端，又叫Session的方式（SessonID存于Cookie）。\n但是，这个世界还是比较复杂的，除了用户访问，还有用户委托的第三方的应用，还有企业和企业间的调用，这里，我想把业内常用的一些 API认证技术相对系统地总结归纳一下，这样可以让大家更为全面的了解这些技术。注意，这是一篇长文！\n本篇文章会覆盖如下技术：\n\nHTTP Basic\nDigest Access\nApp Secret Key + HMAC\nJWT – JSON Web Tokens\nOAuth 1.0 – 3 legged & 2 legged\nOAuth 2.0 – Authentication Code & Client Credential\n\n …\n 阅读全文 Read More\n\n (90 人打了分，平均分： 4.32 )Loading...\n"
  },
  {
    "content": "",
    "title": "StackOverflow 2019 程序员调查",
    "url": "https://coolshell.cn/articles/19307.html",
    "date": "2019-04-21T12:29:13+08:00",
    "description": "\n前些天，StackOverflow 发布了 2019年的年度程序员调查，这个调查报查有90000名程序员参与，这份调度报告平均花了20分钟，可见，这份报告有很多的问题，也是很详细的。这份报告有一些地方，让我有了一些思考。\n首先，我们先来看一下之份报告的 Key Results：\n\nPython 成为了过去一年中成长最快的语言，把Java挤到了第二位，排在后面的是Rust语言。\n有半数以上的被访者在是在16岁写下自己的第一行代码。\nDevOps Specialists 和 Site Reliability Engineers 是程序员中最有经验，技术最牛，薪资最好的职位。（这对应于国内的——系统架构师）\n在几个头部的程序员大国中，中国的程序员最乐观的，他们相信在今天出生的人会有比他们父母更好的人生。对于欧洲的程序员来说，比较法国和德国的程序员，他们对未来并不太乐观。\n对于最影响程序员生产力的事，不同的程序员有不同的想法。\n\n …\n 阅读全文 Read More\n\n (101 人打了分，平均分： 4.31 )Loading...\n"
  },
  {
    "content": "",
    "title": "“努力就会成功”",
    "url": "https://coolshell.cn/articles/19271.html",
    "date": "2019-04-17T09:12:27+08:00",
    "description": "\n 那一年，我加入了某知名公司的某知名部门，在办公室中，我看到了到处都挂着——“努力就会成功”的条幅，这个部门中大多数员工的邮件签名都会有“努力就会成功”，我感到一种热血沸腾的气氛，这是我在多年工作来都没有感受到的，当时挺高兴地能和这样一群人工作，也没多想。直到有一天，我看到这些高级的软件工程师们把自己关在又挤又吵的会议室中，拼命地加班，真是拼命，周一到周日，每天早上10点到凌晨3点甚至凌晨5点，连国庆节都来上班，就在这样的环境和状态下，连续干了三个多月……上线前，QA找到了1000多个bug（你没看错，就是一千多个），最后这个项目用了1年多的时间来返工，本来一个6-8个月的项目，团队被打了鸡血想在3个月内完成，最终却花了近两年的时间来返工……（要知道，我以前在外国公司工作，外国老板看到团队在长时间加班会感到焦虑的，因为加班通常代表着有不好的事情正在发生……）\n所以对此，我是有点看不懂的，看不懂的是，为什么这么一群聪明的人，放着明亮宽敞的办公桌不用，硬要挤在一个又窄又小又吵又热的小空间里工作，而且要这么透支地写那么重要的很关键的系统级的代码……这就好像，一架在一个小作坊里被人加班加点赶工出来的飞机，谁敢坐啊？！老实说，这群工程师真是很优秀的工程师，他们完全是可以做得更好的……但是却做出了如此蹩脚和糟糕的系统……他们说，这样坐在一起可以做到快速沟通，然而，我觉得这恰恰是一种没有章法的表现。\n也是在这家公司，在这个项目烂尾一年前，公司感到了危机，CEO号召全体996，举全公司之力从董事长到下面基层员工对抗外部所谓的威胁，有的部门为了表现，甚至997，然而，在一年后，做出了一个烂得不能再烂的软件，最终以失败告终，很多人包括CEO也因此下课……\n …\n 阅读全文 Read More\n\n (380 人打了分，平均分： 4.76 )Loading...\n"
  },
  {
    "content": "",
    "title": "打造高效的工作环境 – Shell 篇",
    "url": "https://coolshell.cn/articles/19219.html",
    "date": "2019-03-17T13:53:01+08:00",
    "description": "\n注：本文由雷俊(Javaer/Emacser)和我一起编辑，所以文章版权归雷俊与我共同所有，转载者必需注明出处和我们两位作者。原文最早发于酷壳微信公众号，后来我又做了一些修改，再发到博客这边。\n程序员是一个很懒的群体，总想着能够让代码为自己干活，他们不断地把工作生活中的一些事情用代码自动化了，从而让整个社会的效率运作地越来越高。所以，程序员在准备去优化这个世界的时候，都会先要优化自己的工作环境，是所谓“工欲善其事，必先利其器”。\n我们每个程序员都应该打造一套让自己更为高效的工作环境。那怕就是让你少输入一次命令，少按一次键，少在鼠标和键盘间切换一次，都会让程序员的工作变得更为的高效。所以，程序员一般需要一台性能比较好，不会因为开了太多的网页或程序就卡得不行的电脑，还要配备多个显示器，一个显示器写代码，一个查文档，一个测试运行结果，而不必在各种窗口来来回回的切换……在大量的窗口间切换经常会迷路，而且也容易出错（分不清线上或测试环境）……\n除了硬件上的装备，软件上也是能够提升程序员生产力的地方，在软件层面提升程序员生产力的东西有一个很重要的事就是命令行和脚本，使用鼠标和图形界面则会大大降低程序员的生产力。酷壳以前也写过一些，如《你可能不知道的Shell》和《 应该知道的Linux技巧》，但是Unix/Linux Shell就是一个大宝库，怎么写也写不完，不然，怎么会有“Where is the Shell, there is a way”。\n …\n 阅读全文 Read More\n\n (75 人打了分，平均分： 4.37 )Loading...\n"
  },
  {
    "content": "",
    "title": "谈谈我的“三观”",
    "url": "https://coolshell.cn/articles/19085.html",
    "date": "2019-02-26T16:02:07+08:00",
    "description": "\n也许是人到了四十多了，敢写这么大的命题，我也醉了，不过，我还是想把我的想法记录下来，算是对我思考的一个snapshot，给未来的我看看，要么被未来的我打脸，要么打未来我的脸。无论怎么样，我觉得对我自己都很有意义。注意，这篇文章是长篇大论。\n三观是世界观、人生观和价值观，\n\n世界观代表你是怎么看这个世界的。是左还是右，是激进还是保守，是理想还是现实，是乐观还是悲观……\n人生观代表你要想成为什么样的人。是成为有钱人，还是成为人生的体验者，是成为老师，还是成为行业专家，是成为有思想的人，还是成为有创造力的人……\n价值观则是你觉得什么对你来说更重要。是名是利，是过程还是结果，是付出还是索取，是国家还是自己，是家庭还是职业……\n\n人的三观其实是会变的，回顾一下我的过去，我感觉我的三观至少有这么几比较明显的变化，学生时代、刚走上社会的年轻时代，三十岁后的时代，还有现在。估计人都差不多吧……\n\n学生时代的三观更多的是学校给的，用各种标准答案给的，是又红又专的\n刚走上社会后发现完全不是这么一回事，但学生时代的三观根深蒂固，三观开始分裂，内心开始挣扎\n三十岁后，不如意的事越来越多，对社会越来越了解，有些人屈从现实，有些人不服输继续奋斗，而有些人展露才能开始影响社会，而分裂的三观开始收敛，我属于还在继续奋斗的人。\n四十岁时，经历过的事太多，发现留给自己的时间不多，世界太复杂，而还有好多事没做，从而变得与世无争，也变得更为地自我。\n\n …\n 阅读全文 Read More\n\n (399 人打了分，平均分： 4.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "记一次Kubernetes/Docker网络排障",
    "url": "https://coolshell.cn/articles/18654.html",
    "date": "2018-12-08T11:57:35+08:00",
    "description": "\n昨天周五晚上，临下班的时候，用户给我们报了一个比较怪异的Kubernetes集群下的网络不能正常访问的问题，让我们帮助查看一下，我们从下午5点半左右一直跟进到晚上十点左右，在远程不能访问用户机器只能远程遥控用户的情况找到了的问题。这个问题比较有意思，我个人觉得其中的调查用到的的命令以及排障的一些方法可以分享一下，所以写下了这篇文章。\n问题的症状\n用户直接在微信里说，他们发现在Kuberbnetes下的某个pod被重启了几百次甚至上千次，于是开启调查这个pod，发现上面的服务时而能够访问，时而不能访问，也就是有一定概率不能访问，不知道是什么原因。而且并不是所有的pod出问题，而只是特定的一两个pod出了网络访问的问题。用户说这个pod运行着Java程序，为了排除是Java的问题，用户用 docker exec -it 命令直接到容器内启了一个 Python的 SimpleHttpServer来测试发现也是一样的问题。\n我们大概知道用户的集群是这样的版本，Kuberbnetes 是1.7，网络用的是flannel的gw模式，Docker版本未知，操作系统CentOS 7.4，直接在物理机上跑docker，物理的配置很高，512GB内存，若干CPU核，上面运行着几百个Docker容器。\n …\n 阅读全文 Read More\n\n (158 人打了分，平均分： 4.47 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员练级攻略（2018) 与我的专栏",
    "url": "https://coolshell.cn/articles/18360.html",
    "date": "2018-05-29T12:38:23+08:00",
    "description": "\n写极客时间8个月了，我的专栏现在有一定的积累了，今天想自己推荐一下。因为最新的系列《程序员练级攻略（2018）版》正在连载中，而且文章积累量到了我也有比较足的自信向大家推荐我的这个专栏了。推荐就从最新的这一系统的文章开始。\n2011年，我在 CoolShell 上发表了 《程序员技术练级攻略》一文，得到了很多人的好评（转载的不算，在我的网站上都有近1000W的访问量了）。并且陆续收到了一些人的反馈，说跟着这篇文章找到了不错的工作。几年过去，也收到了好些邮件和私信，希望我把这篇文章更新一下，因为他们觉得有点落伍了。是的，老实说，抛开这几年技术的更新迭代不说，那篇文章写得也不算特别系统，同时标准也有点低，当时是给一个想要入门的朋友写的，所以，非常有必要从头更新一下《程序员练级攻略》这一主题。\n目前，我在我极客时间的专栏上更新《程序员练级攻略（2018版）》。升级版的《程序员练级攻略》会比Coolshell上的内容更多，也更专业。这篇文章有【入门篇】、【修养篇】、【专业基础篇】、【软件设计篇】、【高手成长篇】五大篇章，它们会帮助你从零开始，一步步地，系统地，从陌生到熟悉，到理解掌握，从编码到设计再到架构，从码农到程序员再到工程师再到架构师的一步一步进阶，完成从普通到精通到卓越的完美转身……\n这篇文章是我写得最累也是最痛苦的文章，原因如下：\n\n 学习路径的梳理。这是一份计算编程相关知识地图，也是一份成长和学习路径。所以有太多的推敲了，知识的路径，体，地图……这让我费了很多工夫，感觉像在编写一本教材一样，即不能太高大上，也不能误人子弟。\n新旧知识的取舍。另外，因为我的成长经历中很多技术都成了过去时，所以对于新时代的程序员应该学习新的技术，然后，很多基础技术在今天依然管用，所以，在这点上，哪些要那些不要，也花了我很多的工夫。\n文章书籍的推荐。为了推荐最好的学习资料和资源，老实说，我几乎翻遍了整个互联网，进行了大量的阅读和比较。这个过程让我也受益非浅。一开始，这篇文章的大小居然在500K左右，太多的信息就是没有信息，所以在信息的筛选上我花费了很多的工夫，删掉了60%的内容。但是，依然很宠大。\n\n总之，你一定会被这篇文章的内容所吓到的，是的，我就是故意这样做的，因为，这本来就没有什么捷径，也不可能速成，很多知识都是硬骨头，你只能一口一口的啃，我故意这样做就是为了让你不要有“速成”的幻想，也可以轻而一举的吓退那些不想用功不想努力的人。\n但是，我们也要知道《易经》有云：“取法其上，得乎其中，取法其中，得乎其下，取法其下，法不得也”。所以，我这里会给你立个比较高标准，你要努力达到，相信我，就算是达不到，也会比你一开始期望的要高很多……\n下面是这份练级攻略的目录，目前只在极客时间上发布，你需要付费阅读（在本文最后有相关的二维码）。\n …\n 阅读全文 Read More\n\n (120 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "关于我”极客时间“的专栏",
    "url": "https://coolshell.cn/articles/18246.html",
    "date": "2018-01-02T16:56:11+08:00",
    "description": "\n不少朋友都知道我在“极客时间”上开了一个收费专栏，这个专栏会开设大约一年的时间，一共会发布104篇文章。现在，我在上面以每周两篇文章的频率已发布了27篇文章了，也就是差不多两个半月的时间。新的一年开始了，写专栏这个事对我来说是第一次，在这个过程中有一些感想，所以，我想在这里说一下这些感受和一些相关的故事，算是一个记录，也算是对我专栏的正式介绍，还希望能得到、大家的喜欢和指点。（当然，CoolShell这边还是会持续更新的）\n为什么要开设一个收费专栏\n首先，说一下，为什么要开这个收费专栏。\n老实说，我一开始根本就不想开收费专栏的，是的，完全不想！主要是有两个原因，一方面是我在创业中，我自然是没有太多的时间，另一方面是，我以前在《为什么我不在微信公众号上写文章》也说过，我觉得知识最好的方式是被检索、讨论、引用、整理、补充和更新。所以，收费这种模式，我感觉并不利于很好的传播。但是，我为什么还干了这么一件事？这事还得从2017年6月份开始说起。\n这个月，一共有三家技术社区来找我，都是希望我能去他们那边开收费专栏，其中一家就是“极客邦科技”。对于这三家来说，从一开始我就是以婉拒的姿态回应的。而“极客邦科技”来找我的时候和我说，一周写五篇，写一年，一共260篇。我当时心想，“去你的，当我啥呢，你们真以为技术文章好写啊”？然后，他们问我可以写多少，我说，我现在也就一个月一篇的节奏……\n …\n 阅读全文 Read More\n\n (141 人打了分，平均分： 4.16 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go语言、Docker 和新技术",
    "url": "https://coolshell.cn/articles/18190.html",
    "date": "2017-10-30T09:24:20+08:00",
    "description": "\n上个月，作为 Go 语言的三位创始人之一，Unix 老牌黑客罗勃·派克（Rob Pike）在新文章“Go: Ten years and climbing”中，回顾了一下 Go 语言的发展过程。其中提到，Go 语言这十年的迅猛发展大到连他们自己都没有想到，并且还成为了云计算领域中新一代的开发语言。还提到了，中国程序员对 Go 语言的热爱完全超出了他们的想象，甚至他们都不敢相信是真的。\n这让我想起，我在 2015 年 5 月份拜访 Docker 公司在湾区的总部时，Docker 负责人也和我表达了相似的感叹：他们完全没有想到居然中国有那么多人喜欢 Docker，而且还有这么多人在为 Docker 做贡献，这让他们感到非常意外。此外，还跟我说，中国是除了美国本土之外的另一个如此喜欢 Docker 技术的国家，在其它国家都没有看到。\n的确如他们所说，Go 语言和 Docker 这两种技术已经成为新一代的云计算技术，而且可以看到其发展态势非常迅猛。而中国也成为了像美国一样在强力推动这两种技术的国家。这的确是一件让人感到非常高兴的事，因为中国在跟随时代潮流这件事上已经做得非常不错了。\n然而，从 2014-2015 年我在阿里推动 Docker 和 Go 语言的痛苦和失败过程中，以及这许多年来，有很多很多人问我是否要学 Go 语言，是否要学 Docker，Go 和 Docker 是否能用在生产线上，这些问题看来，对于 Go 语言和 Docker 这两种技术，在国内的技术圈中有相当大的一部分人和群体还在执观望或是不信任的态度。\n所以，我想写这篇文章，从两个方面来论述一下我的观点和看法。\n\n一个方面，为什么 Go 语言和 Docker 会是新一代的云计算技术。\n另一个方面，作为技术人员，我们如何识别什么样的新技术会是未来的趋势。\n\n这两个问题是相辅相成的，所以我会把这两个问题揉在一起谈。\n …\n 阅读全文 Read More\n\n (108 人打了分，平均分： 4.18 )Loading...\n"
  },
  {
    "content": "",
    "title": "关于Facebook 的 React 专利许可证",
    "url": "https://coolshell.cn/articles/18140.html",
    "date": "2017-09-19T14:08:00+08:00",
    "description": "\n随着Apache、百度、Wordpress都在和Facebook的React.js以及其专利许可证划清界限，似乎大家又在讨论Facebook的这个BSD+PATENT的许可证问题了。这让我想起了之前在Medium读过的一篇文章——《React, Facebook, and the Revocable Patent License, Why It’s a Paper》，我觉得那篇文章写的不错，而且还是一个会编程的律师写的，所以有必要把这篇文章传播到中文社区这边来。注意，我不会全部翻译，我只是用我的语言来负责搬运内容和观点，我只想通过这篇文章让大家了解一下这个世界以及专利相关的知识，这样可以避免你看到某乎的“怎么看待XXX”这类的问题时人云亦云，能有自己的独立思考和自我判断。;-)\n这篇文章的作者叫Dennis Walsh，他自称是亚历桑那和加利福尼亚州的律师，主要针对版权法和专利诉论的法律领域。但是这个律师不一样，他更很喜欢商业和软件多一些。现在他用React/GraphQL/Elixir在写一个汽车代理销售相关的软件，而且已经发布到第2版了。\n首先，作者表明，专利法经常被人误解，因为其实充满了各种晦涩难懂的法律术语，所以，作者用个例子来讲述专利的一个原则 —— 专利并不是授于让你制造或开发的权利，而是授予你可以排他的权利。（事实上似乎也是这样，申请专利很多时候都不是为了制作相关的产品，而是为了防止别人使用类似的技术制作相关的产品）\n …\n 阅读全文 Read More\n\n (63 人打了分，平均分： 4.16 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何免费的让网站启用HTTPS",
    "url": "https://coolshell.cn/articles/18094.html",
    "date": "2017-08-26T14:06:17+08:00",
    "description": "\n今天，我把CoolShell变成https的安全访问了。我承认这件事有点晚了，因为之前的HTTP的问题也有网友告诉我，被国内的电信运营商在访问我的网站时加入了一些弹窗广告。另外，HTTP的网站在搜索引擎中的rank会更低。所以，这事早就应该干了。现在用HTTP访问CoolShell会被得到一个 301 的HTTPS的跳转。下面我分享一下启用HTTPS的过程。\n我用的是 Let’s Encrypt这个免费的解决方案。Let’s Encrypt 是一个于2015年推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。这是由互联网安全研究小组（ISRG – Internet Security Research Group，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及Cisco等公司（赞助商列表）。\n2015年6月，Let’s Encrypt得到了一个存储在硬件安全模块中的离线的RSA根证书。这个由IdenTrust证书签发机构交叉签名的根证书被用于签署两个证书。其中一个就是用于签发请求的证书，另一个则是保存在本地的证书，这个证书用于在上一个证书出问题时作备份证书之用。因为IdenTrust的CA根证书目前已被预置于主流浏览器中，所以Let’s Encrypt签发的证书可以从项目开始就被识别并接受，甚至当用户的浏览器中没有信任ISRG的根证书时也可以。\n …\n 阅读全文 Read More\n\n (89 人打了分，平均分： 4.09 )Loading...\n"
  },
  {
    "content": "",
    "title": "API设计原则 – Qt官网的设计实践总结",
    "url": "https://coolshell.cn/articles/18024.html",
    "date": "2017-07-25T14:16:30+08:00",
    "description": "\n（感谢好友 @李鼎 翻译此文）\n原文链接：API Design Principles – Qt Wiki\n基于Gary的影响力上 Gary Gao 的译文稿：C++的API设计指导\n译序\n\nQt的设计水准在业界很有口碑，一致、易于掌握和强大的API是Qt最著名的优点之一。此文既是Qt官网上的API设计指导准则，也是Qt在API设计上的实践总结。虽然Qt用的是C++，但其中设计原则和思考是具有普适性的（如果你对C++还不精通，可以忽略与C++强相关或是过于细节的部分，仍然可以学习或梳理关于API设计最有价值的内容）。整个篇幅中有很多示例，是关于API设计一篇难得的好文章。\n需要注意的是，这篇Wiki有一些内容并不完整，所以，可能会有一些阅读上的问题，我们对此做了一些相关的注释。\nPS：翻译中肯定会有不足和不对之处，欢迎评论&交流；另译文源码在GitHub的这个仓库中，可以提交Issue/Fork后提交代码来建议/指正。\nAPI设计原则\n一致、易于掌握和强大的API是Qt最著名的优点之一。此文总结了我们在设计Qt风格API的过程中所积累的诀窍（know-how）。其中许多是通用准则；而其他的则更偏向于约定，遵循这些约定主要是为了与已有的API保持一致。\n虽然这些准则主要用于对外的API（public API），但在设计对内的API（private API）时也推荐遵循相同的技巧（techniques），作为开发者之间协作的礼仪（courtesy）。\n …\n 阅读全文 Read More\n\n (46 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux PID 1 和 Systemd",
    "url": "https://coolshell.cn/articles/17998.html",
    "date": "2017-07-16T21:40:55+08:00",
    "description": "\n要说清 Systemd，得先从Linux操作系统的启动说起。Linux 操作系统的启动首先从 BIOS 开始，然后由 Boot Loader 载入内核，并初始化内核。内核初始化的最后一步就是启动 init 进程。这个进程是系统的第一个进程，PID 为 1，又叫超级进程，也叫根进程。它负责产生其他所有用户进程。所有的进程都会被挂在这个进程下，如果这个进程退出了，那么所有的进程都被 kill 。如果一个子进程的父进程退了，那么这个子进程会被挂到 PID 1 下面。（注：PID 0 是内核的一部分，主要用于内进换页，参看：Process identifier）\nSysV Init\nPID 1 这个进程非常特殊，其主要就任务是把整个操作系统带入可操作的状态。比如：启动 UI – Shell 以便进行人机交互，或者进入 X 图形窗口。传统上，PID 1 和传统的 Unix System V 相兼容的，所以也叫 sysvinit，这是使用得最悠久的 init 实现。Unix System V 于1983年 release。\n在 sysvint 下，有好几个运行模式，又叫 runlevel。比如：常见的 3 级别指定启动到多用户的字符命令行界面，5 级别指定启起到图形界面，0 表示关机，6 表示重启。其配置在 /etc/inittab 文件中。\n …\n 阅读全文 Read More\n\n (100 人打了分，平均分： 4.57 )Loading...\n"
  },
  {
    "content": "",
    "title": "我看绩效考核",
    "url": "https://coolshell.cn/articles/17972.html",
    "date": "2017-07-09T18:03:00+08:00",
    "description": "\n（本来，这篇文章应该在5月份完成，我拖延症让我今天才完成）\n前些天，有几个网友找我谈绩效考核的事，都是在绩效上被差评的朋友。在大致了解情况后，我发现他们感到沮丧和郁闷的原因，不全是自己没有做好事情，他们对于自己没有做好公司交给的事，一方面，持一些疑义，因为我很明显地感到他们和公司对一件是否做好的标准定义有误差，另一方面，他们对于自己的工作上的问题也承认。不过，让他们更多感到沮丧的原因则是，公司、经理或HR和他们的谈话，让他们感觉整个人都被完全否定了，甚至有一种被批斗的感觉。这个感觉实在是太糟糕了。\n因为我也有相似的经历，所以，我想在这里写下一篇文章，谈谈自己的对一些绩效考核的感受。先放出我的两个观点：\n1）制定目标和绩效，目的不是用来考核人的，而用来改善提高组织和人员业绩和效率的。\n2）人是复杂的，人是有状态波动的，任何时候都不应该轻易否定人，绩效考核应该考核的是事情，而不是人。\n我个人比较坚持的认为——绩效分应该打给项目，打给产品，打给部门，打给代码，而不是打给人。然而现在的管理体制基本上都是打给人，而很多根本不擅长管理的经理和HR以及很多不会独立思考的吃瓜群众基本上都会把矛头指向个人，所以，当然会有开批斗会的感觉。\n …\n 阅读全文 Read More\n\n (154 人打了分，平均分： 4.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go编程模式：修饰器",
    "url": "https://coolshell.cn/articles/17929.html",
    "date": "2017-06-01T16:48:15+08:00",
    "description": "\n之前写过一篇《Python修饰器的函数式编程》，这种模式很容易的可以把一些函数装配到另外一些函数上，可以让你的代码更为的简单，也可以让一些“小功能型”的代码复用性更高，让代码中的函数可以像乐高玩具那样自由地拼装。所以，一直以来，我对修饰器decoration这种编程模式情有独钟，这里写一篇Go语言相关的文章。\n本文是全系列中第7 / 10篇：Go编程模式Go编程模式：切片，接口，时间和性能Go 编程模式：错误处理Go 编程模式：Functional OptionsGo编程模式：委托和反转控制Go编程模式：Map-ReduceGo 编程模式：Go GenerationGo编程模式：修饰器Go编程模式：PipelineGo 编程模式：k8s Visitor 模式Go编程模式 ： 泛型编程« 上一篇文章下一篇文章 »\n看过Python修饰器那篇文章的同学，一定知道这是一种函数式编程的玩法——用一个高阶函数来包装一下。多唠叨一句，关于函数式编程，可以参看我之前写过一篇文章《函数式编程》，这篇文章主要是，想通过从过程式编程的思维方式过渡到函数式编程的思维方式，从而带动更多的人玩函数式编程，所以，如果你想了解一下函数式编程，那么可以移步先阅读一下。所以，Go语言的修饰器编程模式，其实也就是函数式编程的模式。\n不过，要提醒注意的是，Go 语言的“糖”不多，而且又是强类型的静态无虚拟机的语言，所以，无法做到像 Java 和 Python 那样的优雅的修饰器的代码。当然，也许是我才才疏学浅，如果你知道有更多的写法，请你一定告诉我。先谢过了。\n…\n 阅读全文 Read More\n\n (51 人打了分，平均分： 4.10 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何重构“箭头型”代码",
    "url": "https://coolshell.cn/articles/17757.html",
    "date": "2017-04-05T18:07:14+08:00",
    "description": "\n本文主要起因是，一次在微博上和朋友关于嵌套好几层的if-else语句的代码重构的讨论（微博原文），在微博上大家有各式各样的问题和想法。按道理来说这些都是编程的基本功，似乎不太值得写一篇文章，不过我觉得很多东西可以从一个简单的东西出发，到达本质，所以，我觉得有必要在这里写一篇的文章。不一定全对，只希望得到更多的讨论，因为有了更深入的讨论才能进步。\n文章有点长，我在文章最后会给出相关的思考和总结陈词，你可以跳到结尾。\n所谓箭头型代码，基本上来说就是下面这个图片所示的情况。\n\n那么，这样“箭头型”的代码有什么问题呢？看上去也挺好看的，有对称美。但是……\n关于箭头型代码的问题有如下几个：\n …\n 阅读全文 Read More\n\n (89 人打了分，平均分： 4.44 )Loading...\n"
  },
  {
    "content": "",
    "title": "AWS 的 S3 故障回顾和思考",
    "url": "https://coolshell.cn/articles/17737.html",
    "date": "2017-03-03T14:20:03+08:00",
    "description": "\n继Gitlab的误删除数据事件没几天，“不沉航母” AWS S3 （Simple Storage Service）几天前也“沉”了4个小时，墙外的半个互联网也跟着挂了。如约，按 AWS 惯例，AWS今天给出了一个简单的故障报告《Summary of the Amazon S3 Service Disruption in the Northern Virginia (US-EAST-1) Region》。这个故障和简单来说和Gitlab一样，也是人员误操作。先简单的说一下这份报中说了什么。\n故障原因\n简单来说，这天，有一个 AWS 工程师在调查 Northern Virginia (US-EAST-1) Region 上 S3 的一个和账务系统相关的问题，这个问题是S3的账务系统变慢了（我估计这个故障在Amazon里可能是Sev2级，Sev2级的故障在Amazon算是比较大的故障，需要很快解决），Oncall的开发工程师（注：Amazon的运维都是由开发工程师来干的，所以Amazon内部嬉称SDE-Software Developer Engineer 为 Someone Do Everything）想移除一个账务系统里的一个子系统下的一些少量的服务器（估计这些服务器上有问题，所以想移掉后重新部署），结果呢，有一条命令搞错了，导致了移除了大量的S3的控制系统。包括两个很重要的子系统：\n …\n 阅读全文 Read More\n\n (85 人打了分，平均分： 4.38 )Loading...\n"
  },
  {
    "content": "",
    "title": "从Gitlab误删除数据库想到的",
    "url": "https://coolshell.cn/articles/17680.html",
    "date": "2017-02-02T16:11:28+08:00",
    "description": "\n昨天，Gitlab.com发生了一个大事，某同学误删了数据库，这个事看似是个低级错误，不过，因为Gitlab把整个过程的细节都全部暴露出来了，所以，可以看到很多东西，而对于类似这样的事情，我自己以前也干过，而在最近的两公司中我也见过（Amazon中见过一次，阿里中见过至少四次），正好通过这个事来说说一下自己的一些感想和观点吧。我先放个观点：你觉得有备份系统就不会丢数据了吗？\n事件回顾\n整个事件的回顾Gitlab.com在第一时间就放到了Google Doc上，事后，又发了一篇Blog来说明这个事，在这里，我简单的回顾一下这个事件的过程。\n首先，一个叫YP的同学在给gitlab的线上数据库做一些负载均衡的工作，在做这个工作时的时候突发了一个情况，Gitlab被DDoS攻击，数据库的使用飙高，在block完攻击者的IP后，发现有个staging的数据库(db2.staging)已经落后生产库4GB的数据，于是YP同学在Fix这个staging库的同步问题的时候，发现db2.staging有各种问题都和主库无法同步，在这个时候，YP同学已经工作的很晚了，在尝试过多个方法后，发现db2.staging都hang在那里，无法同步，于是他想把db2.staging的数据库删除了，这样全新启动一个新的复制，结果呢，删除数据库的命令错误的敲在了生产环境上（db1.cluster），结果导致整个生产数据库被误删除。（陈皓注：这个失败基本上就是 “工作时间过长” + “在多数终端窗口中切换中迷失掉了”）\n …\n 阅读全文 Read More\n\n (87 人打了分，平均分： 4.37 )Loading...\n"
  },
  {
    "content": "",
    "title": "Chrome开发者工具的小技巧",
    "url": "https://coolshell.cn/articles/17634.html",
    "date": "2017-01-19T20:25:55+08:00",
    "description": "\nChrome的开发者工具是个很强大的东西，相信程序员们都不会陌生，不过有些小功能可能并不为大众所知，所以，写下这篇文章罗列一下可能你所不知道的功能，有的功能可能会比较实用，有的则不一定，也欢迎大家补充交流。\n话不多话，我们开始。\n代码格式化\n有很多css/js的代码都会被 minify 掉，你可以点击代码窗口左下角的那个 { }  标签，chrome会帮你给格式化掉。\n\n …\n 阅读全文 Read More\n\n (89 人打了分，平均分： 4.42 )Loading...\n"
  },
  {
    "content": "",
    "title": "从 MongoDB “赎金事件” 看安全问题",
    "url": "https://coolshell.cn/articles/17607.html",
    "date": "2017-01-07T17:11:28+08:00",
    "description": "\n今天上午（2017年1月7日），我的微信群中同时出现了两个MongoDB被黑掉要赎金的情况，于是在调查过程中，发现了这个事件。这个事件应该是2017年开年的第一次比较大的安全事件吧，发现国内居然没有什么报道，国内安全圈也没有什么动静（当然，他们也许知道，只是不想说吧），Anyway，让我这个非安全领域的人来帮补补位。\n事件回顾\n这个事情应该是从2017年1月3日进入公众视野的，是由安全圈的大拿 Victor Gevers （网名：0xDUDE，GDI.foundation 的Chairman），其实，他早在2016年12月27日就发现了一些在互联网上用户的MongoDB没有任何的保护措施，被攻击者把数据库删除了，并留下了一个叫 WARNING 的数据库，这张表的内容如下：\n{\n    \"_id\" : ObjectId(\"5859a0370b8e49f123fcc7da\"),\n    \"mail\" : \"[email protected]\",\n    \"note\" : \"SEND 0.2 BTC TO THIS ADDRESS 13zaxGVjj9MNc2jyvDRhLyYpkCh323MsMq AND CONTACT THIS EMAIL WITH YOUR IP OF YOUR SERVER TO RECOVER YOUR DATABASE !\"\n}\n基本上如下所示：\n …\n 阅读全文 Read More\n\n (57 人打了分，平均分： 3.96 )Loading...\n"
  },
  {
    "content": "",
    "title": "技术人员的发展之路",
    "url": "https://coolshell.cn/articles/17583.html",
    "date": "2016-12-28T12:29:25+08:00",
    "description": "\n2012年的时候写过一篇叫《程序算法与人生选择》的文章，我用算法来类比如何做选择，说白了就是怎么去计算，但是并没有讲程序员可以发展的方向有哪些。 所以，就算是有这些所谓的方法论，我们可能对自己的发展还是会很纠结和无所事从，尤其是人到了30岁，这种彷徨和迷惑越来越重。虽然我之前也写过一篇《编程年龄和编程技能》的文章，但是还是有很多做技术的人对于自己能否在年纪大时还能去做技术感到没有信心。我猜测，这其中，最大的问题的是，目前从事技术工作的种种负面的经历（比如经常性的加班，被当成棋子或劳动力等等），让人完全看不到希望和前途，尤其是随着年纪越来越大，对未来的越来越没有信心。\n同时，也是因为在GIAC的大会被问到，程序员老了怎么办？而在年底这段时间，也和几个朋友在交流中不断地重复谈到个人发展的这个话题。我的人生过半，活到“不惑”的年纪，自然经常性的对什么事都会回头看看总结归纳，所以，在交谈过程中和交谈过后，自己也有一些思考想记录下来。因为我本人也是在这条路上的人，所以，谈不上给他人指导，我同样也是在瞎乱折腾同样每天在思考自己要去哪儿的“一尘世间迷途老生”。况且，我的经历和眼界非常有限，因此，下面的这些关于个人发展的文字和思考必然是受我的眼界和经历所局限的。也欢迎大家补充和指正。\n这些东西不一定对，也不一定就是全部，期许可以让你在年底的时候有所思考，在明年的时候有所计划。\n一个重要阶段和标志\n在讲个人发展之前，我需要先说一下人生中的一个非常重要的阶段——20到30岁！\n这个阶段的首要任务，就是提升自己学习能力和解决难题的能力。这是一个非常非常关键的时间段！这个时间段几乎决定着你的未来。\n …\n 阅读全文 Read More\n\n (261 人打了分，平均分： 4.77 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何读懂并写出装逼的函数式代码",
    "url": "https://coolshell.cn/articles/17524.html",
    "date": "2016-10-23T17:56:29+08:00",
    "description": "\n今天在微博上看到了 有人分享了下面的这段函数式代码，我把代码贴到下面，不过我对原来的代码略有改动，对于函数式的版本，咋一看，的确令人非常费解，仔细看一下，你可能就晕掉了，似乎完全就是天书，看上去非常装逼，哈哈。不过，我感觉解析那段函数式的代码可能会一个比较有趣过程，而且，我以前写过一篇《函数式编程》的入门式的文章，正好可以用这个例子，再升华一下原来的那篇文章，顺便可以向大家更好的介绍很多基础知识，所以写下这篇文章。\n先看代码\n这个代码平淡无奇，就是从一个数组中找到一个数，O(n)的算法，找不到就返回 null。\n下面是正常的 old-school 的方式。不用多说。\n//正常的版本\nfunction find (x, y) {\n  for ( let i = 0; i < x.length; i++ ) {\n    if ( x[i] == y ) return i;\n  }\n  return null;\n}\n\nlet arr = [0,1,2,3,4,5]\nconsole.log(find(arr, 2))\nconsole.log(find(arr, 8))\n结果到了函数式成了下面这个样子（好像上面的那些代码在下面若影若现，不过又有点不太一样，为了消掉if语言，让其看上去更像一个表达式，动用了 ? 号表达式）：\n//函数式的版本\nconst find = ( f => f(f) ) ( f =>\n  (next => (x, y, i = 0) =>\n    ( i >= x.length) ?  null :\n      ( x[i] == y ) ? i :\n        next(x, y, i+1))((...args) =>\n          (f(f))(...args)))\n\nlet arr = [0,1,2,3,4,5]\nconsole.log(find(arr, 2))\nconsole.log(find(arr, 8))\n为了讲清这个代码，需要先补充一些知识。\n …\n 阅读全文 Read More\n\n (41 人打了分，平均分： 4.02 )Loading...\n"
  },
  {
    "content": "",
    "title": "什么是工程师文化？",
    "url": "https://coolshell.cn/articles/17497.html",
    "date": "2016-09-18T16:23:11+08:00",
    "description": "\n 四年前，我在QCon上演讲了一个《建一支强大的小团队》（整理后的PPT分享于这里）提到了工程师文化，今天，我想在这里再写一篇关于工程师文化的文章，一方面是因为我又有了一些想法和体会，另一方面，因为我也正走在创业的道路，毫无疑问，要建一个有浓重的工程师文化的团队或公司，所以有必要把自己的相关想法形有成白底黑字的“字据”，以供打自己的脸——“要是未来没有做到，这篇文章就打我未来的脸” || “这篇文章太幼稚了，未来的我会打我现在的脸”，当然，如果要打脸，我希望是前者。\nAgain，这篇文章不是招人的贴子，因为我觉得，招聘第一重要的事，不是发招聘广告或是找猎头挖人，而是先得让自己变成一个能配得上真正工程师的公司，然后再谈吸引人的事。\n为什么要工程师文化\n看看最近二十年来社会的发展，计算机和互联网已经渗透到了这个社会的每一个角落，各式各样的计算机技术成为了整个世界发展的强大引擎，各式各样的创新，无论是业务创新还是技术创新，都是依托于技术的快速演进，技术成了解放生产力提高社会运作的效率的中坚力量。以美帝为首的技术创新公司着着实实的改变着这个世界和人类的生活和生产习惯。\n今天，每个从事计算机行业的技术人员都应该感到幸运，因为，我们不但选对了行业，也出生在了正确的时代，可以感受到前所未有的刺激和变化，相比起我们的父辈，我们的人生，能经历这样的时代，实在是一种幸运。所以，选对了职业并出生在了正确的年代的我们，此时只需要思考的一个问题，那就是，我是否呆在了正确的地方用正确的方式做事？\n …\n 阅读全文 Read More\n\n (81 人打了分，平均分： 4.44 )Loading...\n"
  },
  {
    "content": "",
    "title": "关于高可用的系统",
    "url": "https://coolshell.cn/articles/17459.html",
    "date": "2016-08-21T12:34:53+08:00",
    "description": "\n在《这多年来我一直在钻研的技术》这篇文章中，我讲述了一下，我这么多年来一直在关注的技术领域，其中我多次提到了工业级的软件，我还以为有很多人会问我怎么定义工业级？以及一个高可用性的软件系统应该要怎么干出来？这样我也可以顺理成章的写下这篇文章，但是没有人问，那么，我只好厚颜无耻的自己写下这篇文章了。哈哈。\n另外，我在一些讨论高可用系统的地方看到大家只讨论各个公司的技术方案，其实，高可用的系统并不简单的是技术方案，一个高可用的系统其实还包括很多别的东西，所以，我觉得大家对高可用的系统了解的还不全面，为了让大家的认识更全面，所以，我写下这篇文章。\n理解高可用系统\n首先，我们需要理解什么是高可用，英文叫High Availability（Wikipedia词条），基本上来说，就是要让我们的计算环境（包括软硬件）做到full-time的可用性。在设计上一般来说，需要做好如下的设计：\n …\n 阅读全文 Read More\n\n (70 人打了分，平均分： 4.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "这多年来我一直在钻研的技术",
    "url": "https://coolshell.cn/articles/17446.html",
    "date": "2016-08-18T18:55:17+08:00",
    "description": "\n因为我是看到tinyfool 《那些年我赶过的时髦技术趋势》，在赞叹的时候，也让我对我有好些回忆，所以想写一篇回忆贴，本来觉得回忆是件挺让人沮喪的事，因为是老了的表现，但我写着写着，就歪了楼。看来，我还不老，还在拼博。下面是很多我的唠叨，你喜欢就读读，不喜欢就TLDR – Too Long, Don’t Read!\n自从98年毕业，到今天，参加工作有18个年头了，加上在大三的时候就为两个在外面接活的老师程序，到今天，写的程序被用到生产线也有18个年头了。\n背景经历\n要说明我技术上的“性取向”，还得我说说的我的一些背景和经历。\n我这18年，大约分三个阶段：\n\n1996年-2000年：入门乱来期，大三大四加在银行工作的两年。\n\n用Powerbuilder/Delphi在WindowsNT/SQL Server上做了好多个MIS管理软件，有酒店的，有送水的，有OA的。\n 用Java的Applet做了一个Web的教学课件，用于在Win95/IE3.0中演示操作系统中的各种调度和算法的动画，得了个全国大学生挑战者杯的鼓励奖。\n 用Delphi的ISAPI技术以及PHP/ASP给一些公司和大学做过几个网站。\n\n\n\n …\n 阅读全文 Read More\n\n (112 人打了分，平均分： 4.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "缓存更新的套路",
    "url": "https://coolshell.cn/articles/17416.html",
    "date": "2016-07-27T16:25:28+08:00",
    "description": "\n看到好些人在写更新缓存数据代码时，先删除缓存，然后再更新数据库，而后续的操作会把数据再装载的缓存中。然而，这个是逻辑是错误的。试想，两个并发操作，一个是更新操作，另一个是查询操作，更新操作删除缓存后，查询操作没有命中缓存，先把老数据读出来后放到缓存中，然后更新操作更新了数据库。于是，在缓存中的数据还是老的数据，导致缓存中的数据是脏的，而且还一直这样脏下去了。\n我不知道为什么这么多人用的都是这个逻辑，当我在微博上发了这个贴以后，我发现好些人给了好多非常复杂和诡异的方案，所以，我想写这篇文章说一下几个缓存更新的Design Pattern（让我们多一些套路吧）。\n这里，我们先不讨论更新缓存和更新数据这两个事是一个事务的事，或是会有失败的可能，我们先假设更新数据库和更新缓存都可以成功的情况（我们先把成功的代码逻辑先写对）。\n更新缓存的的Design Pattern有四种：Cache aside, Read through, Write through, Write behind caching，我们下面一一来看一下这四种Pattern。\n …\n 阅读全文 Read More\n\n (161 人打了分，平均分： 4.53 )Loading...\n"
  },
  {
    "content": "",
    "title": "为什么我不在微信公众号上写文章",
    "url": "https://coolshell.cn/articles/17391.html",
    "date": "2016-07-11T09:08:40+08:00",
    "description": "\n很多朋友问我为什么不在微信公众号上写文章。我都没有直接回答，老实说，我也是扭扭捏捏的，才去开了个个人的微信的公众号，而且还只是为了使用微服小程序，和文章的发布通知，我承认现在的阅读都在移动端，而且微信的公众号是国内移动端的文章流量及分享的入口，但是我还是更愿意使用blog这样的方式分享文章，最多也是在blog这边写好文章后，再去微信公众号那边通知一下。这个原因，不是因为我是一个老顽固，有习惯思维，而是，我不觉得微信公众号是一个好的信息传播和交流的平台。\n我下面的言论仅仅代表我的个人观点，我不想强加给别人，我只是想说明一下为什么我不把我的blog迁移到微信公众号上。\n首先，互联网是开放和共享的，不是封闭的。信息的传播更是需要开放的，大家可以看看互联网之子。\n\n我希望我的文章能够被rss feed到各种阅读器中。\n我希望我的文章能有更长的生命周期，长到十几年前的文章都会有人来读。\n我希望我的文章可以被搜索引擎所检索到。\n我希望我的文章能被别人整理，与其它人的文章放在一起互补并引用。\n我希望我的文章能被修改，因为文章会有错误，也会需要时常更新。\n\n然而，微信公众号都不能很好的支持。我希望我的文章能成为生态圈的里的一部份。所谓生态圈是相互融合，不是唯我独尊。这个和做开源软件的道理一样，开源软件不是把源代码开出来就好了，而是要去和已有的其它软件互相融合，互相兼容，互相支持，这本就是软件设计的真谛（参看《UNIX编程艺术》）。所以，我想，写文章也一样。\n下面是我觉得文章传播的姿势。\n …\n 阅读全文 Read More\n\n (405 人打了分，平均分： 4.84 )Loading...\n"
  },
  {
    "content": "",
    "title": "性能测试应该怎么做？",
    "url": "https://coolshell.cn/articles/17381.html",
    "date": "2016-07-06T01:03:26+08:00",
    "description": "\n偶然间看到了阿里中间件Dubbo的性能测试报告，我觉得这份性能测试报告让人觉得做这性能测试的人根本不懂性能测试，我觉得这份报告会把大众带沟里去，所以，想写下这篇文章，做一点科普。\n首先，这份测试报告里的主要问题如下：\n1）用的全是平均值。老实说，平均值是非常不靠谱的。\n2）响应时间没有和吞吐量TPS/QPS挂钩。而只是测试了低速率的情况，这是完全错误的。\n3）响应时间和吞吐量没有和成功率挂钩。\n …\n 阅读全文 Read More\n\n (72 人打了分，平均分： 4.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "让我们来谈谈分工",
    "url": "https://coolshell.cn/articles/17295.html",
    "date": "2015-12-13T12:55:52+08:00",
    "description": "\n昨天，我看到一个新闻——雅虎取消了QA团队，工程师必须自己负责代码质量，并使用持续集成代替QA。 同时，也听到网友说，“听微软做数据库运维的工程师介绍，他们也是把运维工程师和测试工程师取消了，由开发全部完成。每个人都是全栈工程师”。于是，我顺势引用了几年前写过一篇文章《我们需要专职的QA吗？》，并且又鼓吹了一下全栈。当然，一如既往的得到了一些的争议和嘲弄;-)。\n有人认为取消QA基本上是公司没钱的象征，这个观点根本不值一驳，属于井底之蛙。有人认为，社会分工是大前提，并批评我说怎么不说把所有的事全干的，把我推向了另外一个极端。另外，你千万不要以为有了分工，QA的工作就保得住了。\n就像《乔布斯传》中乔布斯质疑财务制度的时候说的，有时候，很多人都不问为什么，觉得存在的东西都是理所应当的东西。让我们失去了独立思考的机会。分工也是一样。\n所以，为了说完整分工这个逻辑。请大家耐住性子，让我就先来谈谈“分工的优缺点”吧。\n …\n 阅读全文 Read More\n\n (101 人打了分，平均分： 4.37 )Loading...\n"
  },
  {
    "content": "",
    "title": "Cuckoo Filter：设计与实现",
    "url": "https://coolshell.cn/articles/17225.html",
    "date": "2015-09-02T09:18:54+08:00",
    "description": "\n（感谢网友 @我的上铺叫路遥 投稿）\n\n对于海量数据处理业务，我们通常需要一个索引数据结构，用来帮助查询，快速判断数据记录是否存在，这种数据结构通常又叫过滤器(filter)。考虑这样一个场景，上网的时候需要在浏览器上输入URL，这时浏览器需要去判断这是否一个恶意的网站，它将对本地缓存的成千上万的URL索引进行过滤，如果不存在，就放行，如果（可能）存在，则向远程服务端发起验证请求，并回馈客户端给出警告。\n索引的存储又分为有序和无序，前者使用关联式容器，比如B树，后者使用哈希算法。这两类算法各有优劣：比如，关联式容器时间复杂度稳定O(logN)，且支持范围查询；又比如哈希算法的查询、增删都比较快O(1)，但这是在理想状态下的情形，遇到碰撞严重的情况，哈希算法的时间复杂度会退化到O(n)。因此，选择一个好的哈希算法是很重要的。\n时下一个非常流行的哈希索引结构就是bloom filter，它类似于bitmap这样的hashset，所以空间利用率很高。其独特的地方在于它使用多个哈希函数来避免哈希碰撞，如图所示（来源wikipedia），bit数组初始化为全0，插入x时，x被3个哈希函数分别映射到3个不同的bit位上并置1，查询x时，只有被这3个函数映射到的bit位全部是1才能说明x可能存在，但凡至少出现一个0表示x肯定不存在。\n\n …\n 阅读全文 Read More\n\n (51 人打了分，平均分： 4.20 )Loading...\n"
  },
  {
    "content": "",
    "title": "Docker基础技术：DeviceMapper",
    "url": "https://coolshell.cn/articles/17200.html",
    "date": "2015-08-26T08:21:09+08:00",
    "description": "\n在上一篇介绍AUFS的文章中，大家可以看到，Docker的分层镜像是怎么通过UnionFS这种文件系统做到的，但是，因为Docker首选的AUFS并不在Linux的内核主干里，所以，对于非Ubuntu的Linux分发包，比如CentOS，就无法使用AUFS作为Docker的文件系统了。于是作为第二优先级的DeviceMapper就被拿出来做分层镜像的一个实现。\nDevice Mapper 简介\nDeviceMapper自Linux 2.6被引入成为了Linux最重要的一个技术。它在内核中支持逻辑卷管理的通用设备映射机制，它为实现用于存储资源管理的块设备驱动提供了一个高度模块化的内核架构，它包含三个重要的对象概念，Mapped Device、Mapping Table、Target device。\nMapped Device 是一个逻辑抽象，可以理解成为内核向外提供的逻辑设备，它通过Mapping Table描述的映射关系和 Target Device 建立映射。Target device 表示的是 Mapped Device 所映射的物理空间段，对 Mapped Device 所表示的逻辑设备来说，就是该逻辑设备映射到的一个物理设备。\nMapping Table里有 Mapped Device 逻辑的起始地址、范围、和表示在 Target Device 所在物理设备的地址偏移量以及Target 类型等信息（注：这些地址和偏移量都是以磁盘的扇区为单位的，即 512 个字节大小，所以，当你看到128的时候，其实表示的是128*512=64K）。\n …\n 阅读全文 Read More\n\n (40 人打了分，平均分： 3.95 )Loading...\n"
  },
  {
    "content": "",
    "title": "Docker基础技术：AUFS",
    "url": "https://coolshell.cn/articles/17061.html",
    "date": "2015-08-24T08:01:13+08:00",
    "description": "\nAUFS是一种Union File System，所谓UnionFS就是把不同物理位置的目录合并mount到同一个目录中。UnionFS的一个最主要的应用是，把一张CD/DVD和一个硬盘目录给联合 mount在一起，然后，你就可以对这个只读的CD/DVD上的文件进行修改（当然，修改的文件存于硬盘上的目录里）。\nAUFS又叫Another UnionFS，后来叫Alternative UnionFS，后来可能觉得不够霸气，叫成Advance UnionFS。是个叫Junjiro Okajima（岡島順治郎）在2006年开发的，AUFS完全重写了早期的UnionFS 1.x，其主要目的是为了可靠性和性能，并且引入了一些新的功能，比如可写分支的负载均衡。AUFS在使用上全兼容UnionFS，而且比之前的UnionFS在稳定性和性能上都要好很多，后来的UnionFS 2.x开始抄AUFS中的功能。但是他居然没有进到Linux主干里，就是因为Linus不让，基本上是因为代码量比较多，而且写得烂（相对于只有3000行的union mount和10000行的UnionFS，以及其它平均下来只有6000行代码左右的VFS，AUFS居然有30000行代码），所以，岡島不断地改进代码质量，不断地提交，不断地被Linus拒掉，所以，到今天AUFS都还进不了Linux主干（今天你可以看到AUFS的代码其实还好了，比起OpenSSL好N倍，要么就是Linus对代码的质量要求非常高，要么就是Linus就是不喜欢AUFS）。\n不过，好在有很多发行版都用了AUFS，比如：Ubuntu 10.04，Debian6.0, Gentoo Live CD支持AUFS，所以，也OK了。\n好了，扯完这些闲话，我们还是看一个示例吧（环境：Ubuntu 14.04）\n …\n 阅读全文 Read More\n\n (40 人打了分，平均分： 4.18 )Loading...\n"
  },
  {
    "content": "",
    "title": "Docker基础技术：Linux CGroup",
    "url": "https://coolshell.cn/articles/17049.html",
    "date": "2015-04-17T09:03:57+08:00",
    "description": "\n前面，我们介绍了Linux Namespace，但是Namespace解决的问题主要是环境隔离的问题，这只是虚拟化中最最基础的一步，我们还需要解决对计算机资源使用上的隔离。也就是说，虽然你通过Namespace把我Jail到一个特定的环境中去了，但是我在其中的进程使用用CPU、内存、磁盘等这些计算资源其实还是可以随心所欲的。所以，我们希望对进程进行资源利用上的限制或控制。这就是Linux CGroup出来了的原因。\nLinux CGroup全称Linux Control Group， 是Linux内核的一个功能，用来限制，控制与分离一个进程组群的资源（如CPU、内存、磁盘输入输出等）。这个项目最早是由Google的工程师在2006年发起（主要是Paul Menage和Rohit Seth），最早的名称为进程容器（process containers）。在2007年时，因为在Linux内核中，容器（container）这个名词太过广泛，为避免混乱，被重命名为cgroup，并且被合并到2.6.24版的内核中去。然后，其它开始了他的发展。\nLinux CGroupCgroup 可​​​让​​​您​​​为​​​系​​​统​​​中​​​所​​​运​​​行​​​任​​​务​​​（进​​​程​​​）的​​​用​​​户​​​定​​​义​​​组​​​群​​​分​​​配​​​资​​​源​​​ — 比​​​如​​​ CPU 时​​​间​​​、​​​系​​​统​​​内​​​存​​​、​​​网​​​络​​​带​​​宽​​​或​​​者​​​这​​​些​​​资​​​源​​​的​​​组​​​合​​​。​​​您​​​可​​​以​​​监​​​控​​​您​​​配​​​置​​​的​​​ cgroup，拒​​​绝​​​ cgroup 访​​​问​​​某​​​些​​​资​​​源​​​，甚​​​至​​​在​​​运​​​行​​​的​​​系​​​统​​​中​​​动​​​态​​​配​​​置​​​您​​​的​​​ cgroup。\n主要提供了如下功能：\n …\n 阅读全文 Read More\n\n (67 人打了分，平均分： 4.28 )Loading...\n"
  },
  {
    "content": "",
    "title": "Docker基础技术：Linux Namespace（上）",
    "url": "https://coolshell.cn/articles/17010.html",
    "date": "2015-04-16T10:20:08+08:00",
    "description": "\n时下最热的技术莫过于Docker了，很多人都觉得Docker是个新技术，其实不然，Docker除了其编程语言用go比较新外，其实它还真不是个新东西，也就是个新瓶装旧酒的东西，所谓的The New “Old Stuff”。Docker和Docker衍生的东西用到了很多很酷的技术，我会用几篇 文章来把这些技术给大家做个介绍，希望通过这些文章大家可以自己打造一个山寨版的docker。\n当然，文章的风格一定会尊重时下的“流行”——我们再也没有整块整块的时间去看书去专研，而我们只有看微博微信那样的碎片时间（那怕我们有整块的时间，也被那些在手机上的APP碎片化了）。所以，这些文章的风格必然坚持“马桶风格”（希望简单到占用你拉一泡屎就时间，而且你还不用动脑子，并能学到些东西）\n废话少说，我们开始。先从Linux Namespace开始。\n 简介\nLinux Namespace是Linux提供的一种内核级别环境隔离的方法。不知道你是否还记得很早以前的Unix有一个叫chroot的系统调用（通过修改根目录把用户jail到一个特定目录下），chroot提供了一种简单的隔离模式：chroot内部的文件系统无法访问外部的内容。Linux Namespace在此基础上，提供了对UTS、IPC、mount、PID、network、User等的隔离机制。\n …\n 阅读全文 Read More\n\n (107 人打了分，平均分： 4.55 )Loading...\n"
  },
  {
    "content": "",
    "title": "Docker基础技术：Linux Namespace（下）",
    "url": "https://coolshell.cn/articles/17029.html",
    "date": "2015-04-16T10:19:23+08:00",
    "description": "\n在 Docker基础技术：Linux Namespace（上篇）中我们了解了，UTD、IPC、PID、Mount 四个namespace，我们模仿Docker做了一个相当相当山寨的镜像。在这一篇中，主要想向大家介绍Linux的User和Network的Namespace。\n好，下面我们就介绍一下还剩下的这两个Namespace。\nUser Namespace\nUser Namespace主要是用了CLONE_NEWUSER的参数。使用了这个参数后，内部看到的UID和GID已经与外部不同了，默认显示为65534。那是因为容器找不到其真正的UID所以，设置上了最大的UID（其设置定义在/proc/sys/kernel/overflowuid）。\n要把容器中的uid和真实系统的uid给映射在一起，需要修改 /proc/<pid>/uid_map 和 /proc/<pid>/gid_map 这两个文件。这两个文件的格式为：\nID-inside-ns ID-outside-ns length\n其中：\n …\n 阅读全文 Read More\n\n (40 人打了分，平均分： 4.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "关于移动端的钓鱼式攻击",
    "url": "https://coolshell.cn/articles/17066.html",
    "date": "2015-04-14T08:13:23+08:00",
    "description": "\n今天，在微博上看了一篇《微信和淘宝到底是谁封谁》的文章，我觉得文章中逻辑错乱，所以，我发了一篇关于这篇文章逻辑问题的长微博。后面，我被原博主冷嘲热讽了一番，说是什么鸡汤啊，什么我与某某之流的人在一起混淆视听啊，等等。并且也有一些网友找我讨论一下相关的钓鱼式攻击的技术问题。所以，我想写下这篇纯技术文章，因为我对那些商业利益上的东西不关心，所以，只谈技术，这样最简单。\n首先说明一下，我个人不是一个安全专家，也不是一个移动开发专家，按道理来说，这篇文章不应该我来写，但是我就试一试，请原谅我的无知，也期待抛砖引玉了，希望安全的同学斧正。\n关于钓鱼式攻击，其实是通过一种社会工程学的方式来愚弄用户的攻击式，攻击者通常会模仿一个用户信任的网站来偷取用户的机密信息，比如用户密码或是信用卡。一般来说，攻击者会通过邮件和实时通信工具完成，给被攻击者发送一个高仿的网站，然后让用户看不出来与正统网站的差别，然后收集用户的机密数据。\n移动端钓鱼攻击点分析\n因为钓鱼式攻击并不新鲜，所以我这里只讲移动方面的。\n在移动端，这个事情会更容易干，因为移动端有如下特点：\n\n移动端的UI只能有一个应用占据整个屏幕，你只能看到一个应用，而且用户屏幕小，能显示的信息有限，比如浏览器里的网址是显示不全的。这会给钓鱼攻击有很多可乘之机。\n\n\n移动端的平台有其安全的设计。每个应用都是隔离开的，一个应用无法获取另一个应用的数据。而且应用的下载基本上来说都是来自合法的地方。比如iOS的设备通过App Store下载，每个程序都有自己的签名保证不会被篡改。而且移动端的的应用有各种权限配置，这样也能很大程度提高安全性。\n\n\n移动端的APP有些有些是收费的，所以自然会有盗版需求，虽然在平台上做了一些安全设计，但是并不完美。用户可以越狱，可以root。这给恶意软件有了可乘之机。\n\n下面我们来分析下移动端的用户操作，我们重点关注用户控制权的切换过程（因为这是攻击点）\n …\n 阅读全文 Read More\n\n (64 人打了分，平均分： 4.44 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linus：为何对象引用计数必须是原子的",
    "url": "https://coolshell.cn/articles/16910.html",
    "date": "2014-12-31T09:59:33+08:00",
    "description": "\n（感谢网友 @我的上铺叫路遥 投稿）\nLinus大神又在rant了！这次的吐槽对象是时下很火热的并行技术(parellism)，并直截了当地表示并行计算是浪费所有人时间(“The whole “let’s parallelize” thing is a huge waste of everybody’s time.”)。大致意思是说乱序性能快、提高缓存容量、降功耗。当然笔者不打算正面讨论并行的是是非非（过于宏伟的主题），因为Linus在另一则帖子中举了对象引用计数(reference counting)的例子来说明并行的复杂性。\n在Linus回复之前有人指出对象需要锁机制的情况下，引用计数的原子性问题：\nSince it is being accessed in a multi-threaded way, via multiple access paths, generally it needs its own mutex — otherwise, reference counting would not be required to be atomic and a lock of a higher-level object would suffice.\n由于（对象）通过多线程方式及多种获取渠道，一般而言它需要自身维护一个互斥锁——否则引用计数就不要求是原子的，一个更高层次的对象锁足矣。\n而Linus不那么认为：\nThe problem with reference counts is that you often need to take them *before* you take the lock that protects the object data.\n引用计数的问题在于你经常需要在对象数据上锁保护之前完成它。\nThe thing is, you have two different cases:\n问题有两种情况：\n– object *reference* 对象引用\n– object data 对象数据\nand they have completely different locking.\n它们锁机制是完全不一样的。\n …\n 阅读全文 Read More\n\n (42 人打了分，平均分： 3.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "DHH 谈混合移动应用开发",
    "url": "https://coolshell.cn/articles/12225.html",
    "date": "2014-12-15T10:57:20+08:00",
    "description": "\n \nDavid，Ruby on Rails 作者，37signals 合伙人\n畅销书作家、演说家、赛车手、业余摄影师、顾家好男人\n \n37signals 在2013年2月发布了 Basecamp 的 iPhone app，在此之前我们就使用原生开发（native）还是混合开发（hybrid）做了许多尝试。在2012年项目启动的时候，大多数人都倾向于原生开发。\nFacebook 在2012年发布了他们新的 iOS app，为了获得更好的用户体验，他们放弃了原来的 HTML5 混合开发方式。考虑到2010～2011年的时候，HTML 在移动端的性能确实不尽如人意，这个决定在当时看来也在情理之中。2010年的时候我们觉得 iPhone 3G/3GS 够眩够快，但按照现在的标准来看它们就太慢了。因此在为移动应用开发做架构设计时，我们需要考虑新的移动设备的计算能力，而不是那些老的过时的设备。\n移动开发架构设计不需要过多考虑设备的性能\n我们从一些测试中得出的一个结论是：现在的移动设备计算能力都很强，运行原生应用和 HTML 应用的效果差别不大，而 HTML 开发的成本则要比原生开发小得多。\n当然这个结论在某些领域并不太适用。如果你要开发一个 3D 游戏，原生开发方式能够带来更好的游戏体验。但如果你的移动应用象 Basecamp 一样侧重信息处理，为了降低开发成本，你就可以考虑混合开发方式。我们就是如此，下面是我们三代移动产品的发展轨迹：\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 2.93 )Loading...\n"
  },
  {
    "content": "",
    "title": "HTML6 展望",
    "url": "https://coolshell.cn/articles/12206.html",
    "date": "2014-12-06T12:41:34+08:00",
    "description": "\n\nHTML5 概述\nHTML5 是 HTML 语言最受欢迎的版本之一，它支持音频和视频、离线存储、移动端、和标签属性等等。还提供了<article>, <section>, <header>这样的标签来帮助开发者更好地组织页面内容。然而 HTML5 规范仍然没有最后定稿，并且它并不是一个真正意义上的语义标记语言。\nHTML6 展望\n你有没有曾经希望能在 HTML 中使用自定义标签？比如：使用<logo>来显示你的网站logo，还有使用<toolbar>来显示工具栏等等。我们经常使用<div id=”container”>和<div id=”wrapper”>来组织页面，在 HTML6 里我们希望可以直接使用象<container>和<wrapper>这样的自定义标签。\n和 XML 一样，HTML6 应该支持 namespace（命名空间），如：xmlns:xhtml=”http://www.w3.org/1999/xhtml”\nHTML6 代码样例：\n …\n 阅读全文 Read More\n\n (42 人打了分，平均分： 3.48 )Loading...\n"
  },
  {
    "content": "",
    "title": "Google Inbox如何跨平台重用代码？",
    "url": "https://coolshell.cn/articles/12136.html",
    "date": "2014-11-26T08:03:17+08:00",
    "description": "\n原文链接《How Google Inbox shares 70% of its code across Android, iOS, and the Web》\n\n开发一个移动应用在当下并不是一件容易的事情。如果想要获得最多的用户，你的应用通常需要覆盖 iOS, Android, 和 Web 三大平台。这就意味着同一个应用需要开发三个版本，使用 Objective-C 或者 Swift 开发 iOS 版本，使用 Java 开发 Android 版本，使用 JavaScript/CSS/HTML5 开发 Web 版本。工作量增大的同时也意味着有更多的 bug 需要修复。\n这个问题也是 Google 在开发 Google Inbox 时致力要解决的。在最近发布的这款应用中，Google 使用了一些工具实现了70%的代码跨平台复用。\nGoogle Inbox 覆盖 iOS, Android, Web 三个平台，它们使用的是同一个后台代码逻辑，只是前端的用户体验和平台相关特性的实现有所不同。Google 自主开发了一套辅助工具将 Android 版本的 Java 代码逻辑编译为 Objective-C (针对 iOS 平台) 和 JavaScript (针对 Web 浏览器)。 Java 到 JavaScript 的编译由 Google Web Toolkit SDK 完成，Java 到 Objective-C 的编译则由 J2ObjC （j2objc.org）来完成。\nJ2ObjC 是一个开源项目，由 Google 在2013年发布。Google Sheets (Google Docs 中的电子表格部分) 也使用了 J2ObjC，而 Google Inbox 则是目前使用 J2Objc 最多的 Google 项目。\nGoogle Inbox 复用的代码逻辑包括：对话 (conversations)，提醒 (reminders)，联系人 (contacts)。还有网络相关功能和离线同步。这些代码逻辑的复用节省了大量的时间和成本。\n在产品设计时，Google 将这些可复用功能划分为抽象的逻辑概念，比如：提醒的逻辑放在 “reminder.java” 中，可以被 Android UI 调用。对 iOS 版本而言，J2ObjC 将 “reminder.java” 编译成 Objective-C 代码，再由 iOS UI 调用。\nGoogle 没有跨平台编译 UI 部分的代码，因为不同平台的UI特性各有不同，盲目统一会导致非常糟糕的用户体验。代码复用只是针对可以共享的后台逻辑，前端的UI实现是完全原生 (native) 的。这与 Xamarin (一个基于 Microsoft C# 的跨平台移动开发工具) 提出的概念类似。\n跨平台代码复用通常会带来一些性能上的问题。Garrick Toubassi，Engineering Director 和 Google Inbox 项目组成员，对此表示： “性能上的影响如果有的话，也可以说是微不足道的。我们做过大量的性能测试。因为没有加入额外的中间层来处理跨平台兼容性，所有代码最后都是平台原生代码。J2ObjC 编译生成的目标代码和 Java 源代码拥有大致相同的对象数量和对象图谱复杂度 (object graph complexity) ”。\nGoogle 使用的整套方法解决了跨平台移动开发中的一个很重要的问题，同时也推进了安卓先行 (Android-first) 的移动开发策略。\n更多 Google Inbox 文章请猛戳 Gmail 官方博客。\n (40 人打了分，平均分： 3.78 )Loading...\n"
  },
  {
    "content": "",
    "title": "vfork 挂掉的一个问题",
    "url": "https://coolshell.cn/articles/12103.html",
    "date": "2014-11-21T00:48:27+08:00",
    "description": "\n在知乎上，有个人问了这样的一个问题——为什么vfork的子进程里用return，整个程序会挂掉，而且exit()不会？并给出了如下的代码，下面的代码一运行就挂掉了，但如果把子进程的return改成exit(0)就没事。\n我受邀后本来不想回答这个问题的，因为这个问题明显就是RTFM的事，后来，发现这个问题放在那里好长时间，而挂在下面的几个答案又跑偏得比较严重，我觉得可能有些朋友看到那样的答案会被误导，所以就上去回答了一下这个问题。\n下面我把问题和我的回答发布在这里，也供更多的人查看。\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\nint main(void) {\n    int var;\n    var = 88;\n    if ((pid = vfork()) < 0) {\n        printf(\"vfork error\");\n        exit(-1);\n    } else if (pid == 0) { /* 子进程 */\n        var++;\n        return 0;\n    }\n    printf(\"pid=%d, glob=%d, var=%d\\n\", getpid(), glob, var);\n    return 0;\n}\n\n …\n 阅读全文 Read More\n\n (54 人打了分，平均分： 4.37 )Loading...\n"
  },
  {
    "content": "",
    "title": "Leetcode 编程训练",
    "url": "https://coolshell.cn/articles/12052.html",
    "date": "2014-10-23T10:51:54+08:00",
    "description": "\nLeetcode这个网站上的题都是一些经典的公司用来面试应聘者的面试题，很多人通过刷这些题来应聘一些喜欢面试算法的公司，比如：Google、微软、Facebook、Amazon之类的这些公司，基本上是应试教育的功利主义。\n我做这些题目的不是为了要去应聘这些公司，而是为了锻炼一下自己的算法和编程能力。因为我开始工作的时候基本没有这样的训练算法和编程的网站，除了大学里的“算法和数据结构”里的好些最基础最基础的知识，基本上没有什么训练。所以，当我看到有人在做这些题的时候，我也蠢蠢欲动地想去刷一下。\n于是，我花了3-4个月的业余时间，我把Leetcode的154道题全部做完了。（这也是最近我没有太多的时间来写博客的原因，你可以看到我之前做的那个活动中有几个算法题来自于Leetcode）有人说我时间太多了，这里声明一下，我基本上都是利用了晚上10点以后的时间来做这些题的。\nLeetCode的题大致分成两类：\n1）基础算法的知识。这些题里面有大量的算法题，解这些题都是有套路的，不是用递归（深度优先DFS，广度优先BFS），就是要用动态规划（Dynamic Programming），或是拆半查找（Binary Search），或是回溯（Back tracing），或是分治法（Divide and Conquer），还有大量的对树，数组、链表、字符串和hash表的操作。通过做这些题能让你对这些最基础的算法的思路有非常扎实的了解和训练。对我而言，Dynamic Programming 是我的短板，尤其是一些比较复杂的问题，在推导递推公式上总是有思维的缺陷（数学是我的硬伤），通过做了这些题后，我能感到我在DP的思路上有了很大的收获。\n2）编程题。比如：atoi，strstr，add two num，括号匹配，字符串乘法，通配符匹配，文件路径简化，Text Justification，反转单词等等，这些题的Edge Case, Corner Case有很多。这些题需要你想清楚了再干，只要你稍有疏忽，就会有几个case让你痛不欲生，而且一不小心就会让你的代码会写得又臭又长，无法阅读。通过做这些题，可以非常好的训练你对各种情况的考虑，以及你对程序代码组织的掌控（其实就是其中的状态变量）。还记得我在《函数式编程》中说的，程序中的状态是你程序变得复杂难维护的直接原因。\n我觉得每个程序员都应该花时间和精力做这些题，因为你会从这些题中得到很大的收益。做完这些题后你一定会明白下面几个道理：\n …\n 阅读全文 Read More\n\n (107 人打了分，平均分： 4.49 )Loading...\n"
  },
  {
    "content": "",
    "title": "State Threads 回调终结者",
    "url": "https://coolshell.cn/articles/12012.html",
    "date": "2014-10-12T22:48:57+08:00",
    "description": "\n（感谢网友 @我的上铺叫路遥 投稿）\n上回写了篇《一个“蝇量级”C语言协程库》，推荐了一下Protothreads，通过coroutine模拟了用户级别的multi-threading模型，虽然本身足够“轻”，杜绝了系统开销，但这个库本身应用场合主要是内存限制的嵌入式领域，提供原生态组件太少，使用限制太多，比如依赖其它调用产生阻塞等。\n这回又替大家在开源界淘了个宝，推荐一个轻量级网络应用框架State Threads（以下简称ST），总共也就3000行C代码，跟Protothreads不同在于ST针对的就是高性能可扩展服务器领域（值得一提的是Protothreads官网参考链接上第一条就是ST的官网）。在其FAQ页面上一句引用”Perfection is achieved not when there is nothing more to add, but rather when there is nothing more to take away.”可以视为开发人员对ST源码质量的自信。\n历史渊源\n首先介绍一下这个库的历史渊源，从代码贡献者来看，ST不是个人作品，而是有着雄厚的商业支持和应用背景，比如服务器领域，在这里你可以看到ST曾作为Apache的多核应用模块发布。其诞生最初是由网景（Netscape）公司的MSPR（Netscape Portable Runtime library）项目中剥离出来，后由SGI（Silicon Graphic Inc）还有Yahoo!公司（前者是主力）开发维护的独立线程库。历史版本方面，作为SourceForge上开源项目，由2001年发布v1.0以来一直到2009年v1.9稳定版后未再变动。在平台移植方面，从Makefile的配置选项中可知ST支持多种Unix-like平台，还有专门针对Win32的源码改写。源码例子中，提供了web server、proxy以及dns三种编程实例供参考。可以说代码质量应该是相当的稳定和可靠的。\n …\n 阅读全文 Read More\n\n (31 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "bash代码注入的安全漏洞",
    "url": "https://coolshell.cn/articles/11973.html",
    "date": "2014-09-28T07:56:46+08:00",
    "description": "\n很多人或许对上半年发生的安全问题“心脏流血”（Heartbleed Bug）事件记忆颇深，这两天，又出现了另外一个“毁灭级”的漏洞——Bash软件安全漏洞。这个漏洞由法国GNU/Linux爱好者Stéphane Chazelas所发现。随后，美国电脑紧急应变中心（US-CERT）、红帽以及多家从事安全的公司于周三（北京时间9月24日）发出警告。 关于这个安全漏洞的细节可参看美国政府计算安全的这两个漏洞披露：CVE-2014-6271 和 CVE-2014-7169。\n这个漏洞其实是非常经典的“注入式攻击”，也就是可以向 bash注入一段命令，从bash1.14 到4.3都存在这样的漏洞。我们先来看一下这个安全问题的症状。\nShellshock (CVE-2014-6271)\n下面是一个简单的测试：\n$ env VAR='() { :;}; echo Bash is vulnerable!' bash -c \"echo Bash Test\"\n如果你发现上面这个命令在你的bash下有这样的输出，那你就说明你的bash是有漏洞的：\nBash is vulnerable!\nBash Test\n简单地看一下，其实就是向环境变量中注入了一段代码 echo Bash is vulnerable。关于其中的原理我会在后面给出。\n很快，CVE-2014-6271的官方补丁出来的了——Bash-4.3 Official Patch 25。\n …\n 阅读全文 Read More\n\n (77 人打了分，平均分： 4.55 )Loading...\n"
  },
  {
    "content": "",
    "title": "互联网之子 – Aaron Swartz",
    "url": "https://coolshell.cn/articles/11928.html",
    "date": "2014-09-08T00:26:08+08:00",
    "description": "\n 1986年11月8日，有个叫Aaron Swartz的人在美国芝加哥伊利诺伊州出生。因为他父母创办了一个软件公司，所以，Aaron在3岁的时候就接触到了电脑，然后就着迷了。\n我们先通过Aaron Swartz 的青少年时期来看一下他是怎么样的一个天才：\n12岁的时候Aaron就创建了一个类似于Wikipedia式的网站（那时还没有Wikipedia），13岁的时候，Aaron赢得为年轻人而设，创作教育及协同非商业网站的ArsDigita Prize比赛首名。 奖品包括参观麻省理工学院及与网际网路界的知名人士见会。\n14岁的时候，他就成为了RSS1.0的开发组的一员。（后来，他和 John Gruber一起开发了Markdown）\n15岁的时候，进入W3C的 RDF 核心工作组，并写了RFC3870——这个文档描述了一个新的media type – “RDF/XML“，用于定义互联网上的“语义网络”\n17岁进入斯坦福大学，1年半后，18岁的时候因为受不了教条式的教育缀学，并通过Y Combinator公司的夏季创办人计划成立Infogami软件公司，在那里，他设想了一个Wiki平台来实现他的Internet Open Library——一个开放的网络图书馆。并写了著名的web.py 开发框架。但他觉得自己太年轻，还要有一个合伙人，于是Y Combinator建议他和Reddit合并。于是他在19岁的时候成了Reddit的创始人\n虽然Reddit不挣钱，但是相当火，当他20岁的时候（2006年10月），他们把Reddit卖给了Condé Nast出版社，据说挣到了百万美金。然后，他去了这家出版社工作，受不了办公室的那种工作环境，2007年1月离职。\n但是，你能想得到这么天才的一个人，于2013年1月11日自杀了么？那年他才26岁。\n …\n 阅读全文 Read More\n\n (137 人打了分，平均分： 4.78 )Loading...\n"
  },
  {
    "content": "",
    "title": "谜题的答案和活动的心得体会",
    "url": "https://coolshell.cn/articles/11847.html",
    "date": "2014-08-06T07:47:50+08:00",
    "description": "\n我于2014年8月3日周六的上午在微博、twitter、CoolShell上发布了一个和程序员有关的解谜题的活动——【活动】解谜题送礼物。我使用了二级域名fun.coolshell.cn做为这次活动的页面。\n\n截止这篇文章发布的时候，fun.coolshell.cn的访问量UV大约有4万左右，通关人数大约有200人，但因为在活动的第二天网上就出了一些答题攻略，通过分析，实际靠自己能力通过的人数在130人左右。通过率大约不到4‰的样子。\n在这里我把整个谜题和做这个活动的东西写一下，算是给自己的一个总结。\n谜题的答案和花絮\nfun.coolshell.cn上一共有十道谜题，要设计这些东西还真是费尽脑汁，这让我对那些设计谜题式游戏的人相当敬佩。\n …\n 阅读全文 Read More\n\n (56 人打了分，平均分： 4.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "【活动】解迷题送礼物",
    "url": "https://coolshell.cn/articles/11832.html",
    "date": "2014-08-03T18:52:14+08:00",
    "description": "\n首先，先跟大家道歉一下最近CoolShell大约长达一个多月没有什么更新，原因主要在于，我去看世界杯去了，这一个月的世界杯熬夜看球使我的精力不佳，导致世界杯结束后的几个星期也没有缓过来，所以没有更新什么文章。好多朋友写邮件或是在微博上at我催我更新，所以有点惭愧了。\n精神不佳我就不写文章了。于是，世界杯过后，我每天都会抽出每天晚上和周末的一些碎片时间，我仿照一些前端过关的游戏，做了几个和程序员有关的迷题，也是要通关的，不过和前端知识没什么关系。这个游戏我放到了下面这个二级域名下。\nhttp://fun.coolshell.cn/\n\n有兴趣的朋友可以去玩玩。通关的同学我会送你们《Unix环境高级编程（第三版）》（感谢@出版圈郭志敏 赞助）或一个马克杯（感谢@linux命令行精选网 赞助）），因为奖品数量有限，所以，我会送给前十个通关的同学（后面通关的我会随机抽几个）。\n …\n 阅读全文 Read More\n\n (46 人打了分，平均分： 4.09 )Loading...\n"
  },
  {
    "content": "",
    "title": "开发团队的效率",
    "url": "https://coolshell.cn/articles/11656.html",
    "date": "2014-06-09T09:06:11+08:00",
    "description": "\n我之前写过一篇叫《加班与效率》的文章，从概念上说了一些我对“效率”的认识，但是那篇文章趋于概念化，对于一些没有经历过这样的环境的同学来说，可能会觉得太抽象了。很早以前就想写一篇更具体一点的，可执行的文章与《加班与效率》这篇文章相辉映，并再把我两年前在杭州QCon上的那个“鼓吹工程师文化”的《建一支强大的小团队》（新浪微盘）的观点再加强一下。\n但是我遇到了一些思维方式上的麻烦——我讲的总是从我的经历背景出发，没有从其它人的经历背景来讲。这就好像，我在酷壳里说了很多东西（比如：专职的QA，Code Review很重要，编程年龄，创业的，Rework的……），有好些人觉得是不可能甚至太理想，其实我说的那些东西都是实实在在存在的，也是我所经历过的。于是，不同的经历，不同的环境，不同的眼界，造成了——有些人不理解我说的，而我也不能理解他们所说的。\n所以，过去的这段时间我一有机会就找一些人交流并观察一些身边的事情，并去试着跟从和理解那些我不能理解的东西。现在觉得差不多了，所以，写下了这篇文章。（但越是去理解对方，我就越坚持我的观点，所以这篇文章可能还是会出现鸡同鸭讲的情形，无所谓了）\n本文不讨论任何业务上的效率问题，只讨论软件开发或是软件工程中的效率问题。虽然产品和业务上的效率问题是根本，但是因为本文不是拉仇恨的，我也不想混在一起谈，所以请原谅我在这里先说开发团队的，以后重新开篇文章专门谈产品和业务的。\n我下面会罗列几个非常典型的开发方式——软件开发中的“锁”，接力棒式软件开发，保姆式软件开发，WatchDog软件开发，故障驱动式软件开发。\n …\n 阅读全文 Read More\n\n (112 人打了分，平均分： 4.68 )Loading...\n"
  },
  {
    "content": "",
    "title": "TCP 的那些事儿（下）",
    "url": "https://coolshell.cn/articles/11609.html",
    "date": "2014-05-28T08:20:32+08:00",
    "description": "\n这篇文章是下篇，所以如果你对TCP不熟悉的话，还请你先看看上篇《TCP的那些事儿（上）》 上篇中，我们介绍了TCP的协议头、状态机、数据重传中的东西。但是TCP要解决一个很大的事，那就是要在一个网络根据不同的情况来动态调整自己的发包的速度，小则让自己的连接更稳定，大则让整个网络更稳定。在你阅读下篇之前，你需要做好准备，本篇文章有好些算法和策略，可能会引发你的各种思考，让你的大脑分配很多内存和计算资源，所以，不适合在厕所中阅读。\nTCP的RTT算法\n从前面的TCP重传机制我们知道Timeout的设置对于重传非常重要。\n\n设长了，重发就慢，丢了老半天才重发，没有效率，性能差；\n设短了，会导致可能并没有丢就重发。于是重发的就快，会增加网络拥塞，导致更多的超时，更多的超时导致更多的重发。\n\n而且，这个超时时间在不同的网络的情况下，根本没有办法设置一个死的值。只能动态地设置。 为了动态地设置，TCP引入了RTT——Round Trip Time，也就是一个数据包从发出去到回来的时间。这样发送端就大约知道需要多少的时间，从而可以方便地设置Timeout——RTO（Retransmission TimeOut），以让我们的重传机制更高效。 听起来似乎很简单，好像就是在发送端发包时记下t0，然后接收端再把这个ack回来时再记一个t1，于是RTT = t1 – t0。没那么简单，这只是一个采样，不能代表普遍情况。\n …\n 阅读全文 Read More\n\n (102 人打了分，平均分： 4.75 )Loading...\n"
  },
  {
    "content": "",
    "title": "TCP 的那些事儿（上）",
    "url": "https://coolshell.cn/articles/11564.html",
    "date": "2014-05-28T08:15:36+08:00",
    "description": "\nTCP是一个巨复杂的协议，因为他要解决很多问题，而这些问题又带出了很多子问题和阴暗面。所以学习TCP本身是个比较痛苦的过程，但对于学习的过程却能让人有很多收获。关于TCP这个协议的细节，我还是推荐你去看W.Richard Stevens的《TCP/IP 详解 卷1：协议》（当然，你也可以去读一下RFC793以及后面N多的RFC）。另外，本文我会使用英文术语，这样方便你通过这些英文关键词来查找相关的技术文档。\n之所以想写这篇文章，目的有三个，\n\n一个是想锻炼一下自己是否可以用简单的篇幅把这么复杂的TCP协议描清楚的能力。\n另一个是觉得现在的好多程序员基本上不会认认真真地读本书，喜欢快餐文化，所以，希望这篇快餐文章可以让你对TCP这个古典技术有所了解，并能体会到软件设计中的种种难处。并且你可以从中有一些软件设计上的收获。\n最重要的希望这些基础知识可以让你搞清很多以前一些似是而非的东西，并且你能意识到基础的重要。\n\n所以，本文不会面面俱到，只是对TCP协议、算法和原理的科普。\n …\n 阅读全文 Read More\n\n (128 人打了分，平均分： 4.82 )Loading...\n"
  },
  {
    "content": "",
    "title": "「我只是认真」聊聊工匠情怀",
    "url": "https://coolshell.cn/articles/11629.html",
    "date": "2014-05-26T11:20:55+08:00",
    "description": "\n（感谢网友 @Hesey小纯纯 投稿  博客 |　原文链接）\n老罗的Smartisan T1手机发布会很多人应该都看了，发布会的最后老罗凝视着自己的工匠自画像，半晌没说话，随后转过身，慢慢离开舞台，屏幕下方只留下一句话：\n我不是为了输赢，我就是认真。\n这一瞬间让我想起93年「狮城舌战」的主角蒋昌建，在「人性本善还是人性本恶」的总结陈词最后，以顾城的名句，「黑夜给了我黑色的眼睛，我却用它寻找光明」，把整个辩论赛的氛围推向高潮。\n而老罗的这句话，和这句话背后的工匠背景，却以另外一种无声的却震人心魄的力量，敲打着每一个在场的，或是观看着整个发布会的观众的心绪。\n「工匠情怀」，我深有体会，就像我在 面向GC的Java编程 一文中所提到的：\n优秀程序员的价值，不在于其所掌握的几招屠龙之术，而是在细节中见真著。\n如果我们可以一次把事情做对，并且做好，在允许的范围内尽可能追求卓越，为什么不去做呢？\n追求卓越，追求完美，追求细节的极致。小时候看到那些修表匠，握着一个小螺丝刀，或是看着电工，用烙铁沾着锡和松香，在那一小寸的世界里，把坏了的地方修好，那种专注的眼神，觉得很厉害。\n现在再去回想那些工匠工作的场景，越发觉得钦佩。在我老家有一家刻章的店，在我上幼儿园的时候就已经在那开了很多年了。前段时间需要刻一个章，发现那家店还在，于是走进去，门口坐着一个老人，我确实记不得当年是不是他，不过看这岁数八九不离十。我以前在别的地方刻的章，都是在电脑里设计完图案后，激光刻蚀。但那次老人却是用的手刻，我着实惊呆了。只看他拿出一块红色的印底，右手持着刻刀，开始一下一下地刻着。虽然老人连话都不怎么说得清了，但是工作时那专注的神情，和精湛的手艺，以及最后成品那比机器更完美的效果，着实让我心里非常动容。\n …\n 阅读全文 Read More\n\n (82 人打了分，平均分： 4.32 )Loading...\n"
  },
  {
    "content": "",
    "title": "面向GC的Java编程",
    "url": "https://coolshell.cn/articles/11541.html",
    "date": "2014-05-07T11:24:38+08:00",
    "description": "\n（感谢网友 @Hesey小纯纯 投稿  博客 |　原文链接）\nJava程序员在编码过程中通常不需要考虑内存问题，JVM经过高度优化的GC机制大部分情况下都能够很好地处理堆(Heap)的清理问题。以至于许多Java程序员认为，我只需要关心何时创建对象，而回收对象，就交给GC来做吧！甚至有人说，如果在编程过程中频繁考虑内存问题，是一种退化，这些事情应该交给编译器，交给虚拟机来解决。\n这话其实也没有太大问题，的确，大部分场景下关心内存、GC的问题，显得有点“杞人忧天”了，高老爷说过：\n过早优化是万恶之源。\n但另一方面，什么才是“过早优化”？\nIf we could do things right for the first time, why not?\n事实上JVM的内存模型( JMM )理应是Java程序员的基础知识，处理过几次JVM线上内存问题之后就会很明显感受到，很多系统问题，都是内存问题。\n对JVM内存结构感兴趣的同学可以看下 浅析Java虚拟机结构与机制 这篇文章，本文就不再赘述了，本文也并不关注具体的GC算法，相关的文章汗牛充栋，随时可查。\n另外，不要指望GC优化的这些技巧，可以对应用性能有成倍的提高，特别是对I/O密集型的应用，或是实际落在YoungGC上的优化，可能效果只是帮你减少那么一点YoungGC的频率。\n但我认为，优秀程序员的价值，不在于其所掌握的几招屠龙之术，而是在细节中见真著，就像前面说的，如果我们可以一次把事情做对，并且做好，在允许的范围内尽可能追求卓越，为什么不去做呢？ …\n 阅读全文 Read More\n\n (41 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "C语言的整型溢出问题",
    "url": "https://coolshell.cn/articles/11466.html",
    "date": "2014-04-21T08:18:01+08:00",
    "description": "\n整型溢出有点老生常谈了，bla, bla, bla… 但似乎没有引起多少人的重视。整型溢出会有可能导致缓冲区溢出，缓冲区溢出会导致各种黑客攻击，比如最近OpenSSL的heartbleed事件，就是一个buffer overread的事件。在这里写下这篇文章，希望大家都了解一下整型溢出，编译器的行为，以及如何防范，以写出更安全的代码。\n什么是整型溢出\nC语言的整型问题相信大家并不陌生了。对于整型溢出，分为无符号整型溢出和有符号整型溢出。\n对于unsigned整型溢出，C的规范是有定义的——“溢出后的数会以2^(8*sizeof(type))作模运算”，也就是说，如果一个unsigned char（1字符，8bits）溢出了，会把溢出的值与256求模。例如：\nunsigned char x = 0xff;\nprintf(\"%d\\n\", ++x);\n上面的代码会输出：0 （因为0xff + 1是256，与2^8求模后就是0）\n对于signed整型的溢出，C的规范定义是“undefined behavior”，也就是说，编译器爱怎么实现就怎么实现。对于大多数编译器来说，算得啥就是啥。比如：\nsigned char x =0x7f; //注：0xff就是-1了，因为最高位是1也就是负数了\nprintf(\"%d\\n\", ++x);\n上面的代码会输出：-128，因为0x7f + 0x01得到0x80，也就是二进制的1000 0000，符号位为1，负数，后面为全0，就是负的最小数，即-128。\n …\n 阅读全文 Read More\n\n (47 人打了分，平均分： 4.34 )Loading...\n"
  },
  {
    "content": "",
    "title": "从LongAdder看更高效的无锁实现",
    "url": "https://coolshell.cn/articles/11454.html",
    "date": "2014-04-17T23:11:40+08:00",
    "description": "\n（感谢 @jd刘锟洋 投稿，更多文章参看他的博客：码梦为生）\n原文链接：《比AtomicLong还高效的LongAdder 源码解析》\n接触到AtomicLong的原因是在看guava的LoadingCache相关代码时，关于LoadingCache，其实思路也非常简单清晰：用模板模式解决了缓存不命中时获取数据的逻辑，这个思路我早前也正好在项目中使用到。\n言归正传，为什么说LongAdder引起了我的注意，原因有二：\n\n作者是Doug lea ，地位实在举足轻重。\n他说这个比AtomicLong高效。\n\n我们知道，AtomicLong已经是非常好的解决方案了，涉及并发的地方都是使用CAS操作，在硬件层次上去做 compare and set操作。效率非常高。\n因此，我决定研究下，为什么LongAdder比AtomicLong高效。\n首先，看LongAdder的继承树：\n\n继承自Striped64，这个类包装了一些很重要的内部类和操作。稍候会看到。\n …\n 阅读全文 Read More\n\n (23 人打了分，平均分： 3.91 )Loading...\n"
  },
  {
    "content": "",
    "title": "从Code Review 谈如何做技术",
    "url": "https://coolshell.cn/articles/11432.html",
    "date": "2014-04-12T16:28:01+08:00",
    "description": "\n（这篇文章缘由我的微博，我想多说一些，有些杂乱，想到哪写到哪）\n这两天，在微博上表达了一下Code Review的重要性。因为翻看了阿里内部的Review Board上的记录，从上面发现Code Review做得好的是一些比较偏技术的团队，而偏业务的技术团队基本上没有看到Code Review的记录。当然，这并不能说没有记录他们就没有做Code Review，于是，我就问了一下以前在业务团队做过的同事有没有Code Review，他告诉我不但没有Code Review，而且他认为Code Review没用，因为：\n1）工期压得太紧，时间连coding都不够，以上线为目的，\n2）需求老变，代码的生命周期太短。所以，写好的代码没有任何意义，烂就烂吧，反正与绩效无关。\n我心里非常不认同这样的观点，我觉得我是程序员，我是工程师，就像医生一样，不是把病人医好就好了，还要对病人的长期健康负责。对于常见病，要很快地医好病人很简单，下猛药，大量使用抗生素，好得飞快。但大家都知道，这明显是“饮鸩止渴”、“竭泽而渔”的做法。医生需要有责任心和医德，我也觉得程序员工程师也要有相应的责任心和相应的修养。东西交给我我必需要负责，我觉得这种负责和修养不是”做出来“就了事了，而是要到“做漂亮”这个级别，这就是“山寨”和“工业”的差别。而只以“做出来”为目的标准，我只能以为，这样的做法只不过是“按部就班”的堆砌代码罢了，和劳动密集型的“装配生产线”和“砌砖头”没有什么差别，在这种环境里呆着还不如离开。\n老实说，因为去年我在业务团队的时候，我的团队也没有做Code Review，原因是多样的。其中一个重要原因是，我刚来阿里，所以，需要做的是在适应阿里的文化，任何公司都有自己的风格和特点，任何公司的做法都有他的理由和成因，对于我这样的一个初来者，首要的是要适应和观察，不要对团队做太多的改动，跟从、理解和信任是融入的关键。（注：在建北京团队和不要专职的测试人员上我都受到了一些阻力），所以跟着团队走没有玩Code Review。干了一年后，觉得我妥协了很多我以前所坚持的东西，觉得自己的标准在降低，想一想后背拔凉拔凉的，所以我决定坚持，而且还要坚持高标准。\n …\n 阅读全文 Read More\n\n (211 人打了分，平均分： 4.77 )Loading...\n"
  },
  {
    "content": "",
    "title": "C语言结构体里的成员数组和指针",
    "url": "https://coolshell.cn/articles/11377.html",
    "date": "2014-04-01T08:17:15+08:00",
    "description": "\n单看这文章的标题，你可能会觉得好像没什么意思。你先别下这个结论，相信这篇文章会对你理解C语言有帮助。这篇文章产生的背景是在微博上，看到@Laruence同学出了一个关于C语言的题，微博链接。微博截图如下。我觉得好多人对这段代码的理解还不够深入，所以写下了这篇文章。\n\n为了方便你把代码copy过去编译和调试，我把代码列在下面：\n#include <stdio.h>\nstruct str{\n    int len;\n    char s[0];\n};\n\nstruct foo {\n    struct str *a;\n};\n\nint main(int argc, char** argv) {\n    struct foo f={0};\n    if (f.a->s) {\n        printf( f.a->s);\n    }\n    return 0;\n}\n\n你编译一下上面的代码，在VC++和GCC下都会在14行的printf处crash掉你的程序。@Laruence 说这个是个经典的坑，我觉得这怎么会是经典的坑呢？上面这代码，你一定会问，为什么if语句判断的不是f.a？而是f.a里面的数组？写这样代码的人脑子里在想什么？还是用这样的代码来玩票？不管怎么样，看过原微博的回复，我个人觉得大家主要还是对C语言理解不深，如果这算坑的话，那么全都是坑。\n …\n 阅读全文 Read More\n\n (97 人打了分，平均分： 4.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "无插件Vim编程技巧",
    "url": "https://coolshell.cn/articles/11312.html",
    "date": "2014-03-24T08:25:29+08:00",
    "description": "\n相信大家看过《简明Vim教程》也玩了《Vim大冒险》的游戏了，相信大家对Vim都有一个好的入门了。我在这里把我日常用Vim编程的一些技巧列出来给大家看看，希望对大家有用，另外，也是一个抛砖引玉的过程，也希望大家把你们的技巧跟贴一下，我会更新到这篇文章中。另外，这篇文章里的这些技巧全都是vim原生态的，不需要你安装什么插件。我的Vim的版本是7.2。\n浏览代码\n首先，我们先从浏览代码开始。有时候，我们需要看多个文件，所以，传统的做法是，我们开多个tty终端，每个tty里用Vim打开一个文件，然后来回切换。这很没有什么效率。我们希望在一个Vim里打开多个文件，甚至浏览程序目录。\n浏览目录的命令很简单：（你也可以直接vim一个目录）\n:E\n注意，是大写。于是，你会看到下面这样的界面：\n …\n 阅读全文 Read More\n\n (43 人打了分，平均分： 4.28 )Loading...\n"
  },
  {
    "content": "",
    "title": "Python修饰器的函数式编程",
    "url": "https://coolshell.cn/articles/11265.html",
    "date": "2014-03-20T09:50:34+08:00",
    "description": "\nPython的修饰器的英文名叫Decorator，当你看到这个英文名的时候，你可能会把其跟Design Pattern里的Decorator搞混了，其实这是完全不同的两个东西。虽然好像，他们要干的事都很相似——都是想要对一个已有的模块做一些“修饰工作”，所谓修饰工作就是想给现有的模块加上一些小装饰（一些小功能，这些小功能可能好多模块都会用到），但又不让这个小装饰（小功能）侵入到原有的模块中的代码里去。但是OO的Decorator简直就是一场恶梦，不信你就去看看wikipedia上的词条（Decorator Pattern）里的UML图和那些代码，这就是我在《 从面向对象的设计模式看软件设计》“餐后甜点”一节中说的，OO鼓励了——“厚重地胶合和复杂层次”，也是《 如此理解面向对象编程》中所说的“OO的狂热者们非常害怕处理数据”，Decorator Pattern搞出来的代码简直就是OO的反面教程。\nPython 的 Decorator在使用上和Java/C#的Annotation很相似，就是在方法名前面加一个@XXX注解来为这个方法装饰一些东西。但是，Java/C#的Annotation也很让人望而却步，太TMD的复杂了，你要玩它，你需要了解一堆Annotation的类库文档，让人感觉就是在学另外一门语言。\n而Python使用了一种相对于Decorator Pattern和Annotation来说非常优雅的方法，这种方法不需要你去掌握什么复杂的OO模型或是Annotation的各种类库规定，完全就是语言层面的玩法：一种函数式编程的技巧。如果你看过本站的《函数式编程》，你一定会为函数式编程的那种“描述你想干什么，而不是描述你要怎么去实现”的编程方式感到畅快。（如果你不了解函数式编程，那在读本文之前，还请你移步去看看《函数式编程》） 好了，我们先来点感性认识，看一个Python修饰器的Hello World的代码。\n …\n 阅读全文 Read More\n\n (39 人打了分，平均分： 4.28 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个浮点数跨平台产生的问题",
    "url": "https://coolshell.cn/articles/11235.html",
    "date": "2014-03-15T20:44:24+08:00",
    "description": "\n感谢网友唐磊（微博@唐磊_name）投稿，本文原文在唐磊的博客上（原文地址），原文分析还不够好，而且可能对人有误导，所以，我对原文做了很多修改，并加了Linux下的内容。浮点数是一个很复杂的事情，希望这篇文章有助于大家了解浮点数与其相关的C/C++的编译选项。（注：我没有Windows 32位以及C#的环境，所以，对于Windows 32位的程序和C#的程序没有验证过）\n背景就简单点儿说，最近一个项目C#编写，涉及浮点运算，来龙去脉省去，直接看如下代码。\nfloat p3x = 80838.0f;\nfloat p2y = -2499.0f;\ndouble v321 = p3x * p2y;\nConsole.WriteLine(v321);\n很简单吧，马上笔算下结果为-202014162，没问题，难道C#没有产生这样的结果？不可能吧，开启Visual Studio，copy代码试试，果然结果是-202014162。就这样完了么？显然没有！你把编译时的选项从AnyCPU改成x64试试~(服务器环境正是64位滴哦！！)结果居然边成了-202014160，对没错，就是-202014160。有点不相信，再跑两遍，仍然是-202014160。呃，想通了，因为浮点运算的误差，-202014160这个结果是合理的。\n为什么合理呢？很正常，因为上面的p3x和p2y是两个float类型，虽然v321是double，但也是两个float类型计算完后再转成double的，float的精度本来也只有7位，所以，对于这个上亿的数，自然没有办法保证精度。\n但是为什么修改CPU的type会有不同的效果？嗯，我们再试试C/C++。\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 3.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "Java中的CopyOnWrite容器",
    "url": "https://coolshell.cn/articles/11175.html",
    "date": "2014-03-07T08:26:31+08:00",
    "description": "\n感谢 清英 同学的投稿\nCopy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。从JDK1.5开始Java并发包里提供了两个使用CopyOnWrite机制实现的并发容器,它们是CopyOnWriteArrayList和CopyOnWriteArraySet。CopyOnWrite容器非常有用，可以在非常多的并发场景中使用到。\n什么是CopyOnWrite容器\nCopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器。\n …\n 阅读全文 Read More\n\n (30 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何用最有创造力的方式输出42",
    "url": "https://coolshell.cn/articles/11170.html",
    "date": "2014-03-06T22:42:42+08:00",
    "description": "\n酷壳似乎好长时间没有像《编程真难啊》或是《老手是这样教新手编程的》或是像《如何写出无法维护的代码》这样“严肃正经”的文章了，所以，赶在大家还没有向我扔臭鸡蛋前奉献一篇。这篇文章来自CodeGolf.StackExchange上的《Most creative way to display 42》—— 请以最有创造力的方式输出42。于是出现了下面的这些答案（注：精彩的总是留在最后面）\n人生和宇宙终级问题的答案：42\n这里，需要介绍一下为什么要输出42。这时因为42是我们人生，世界乃至整个宇宙的终级答案。这要从《银河系漫游指南》（英文名：The Hitchhiker’s Guide to the Galaxy）说起。这本书是著名英国科幻小说作家Douglas  Adams所著5本银河系漫游指南系列科幻喜剧系列小说中的第一本，改编自他本人为英国广播公司第四电台（BBC Radio 4）所写的广播剧剧本。该书1979年10月12日首次由麦克米伦出版公司（Pan Books）出版，次周成为英国图书销量榜冠军，前3个月内销售超过25万本。截至2005年，这本小说已被翻译成超过30种语言在全世界发行，并且被改编为电视剧、电影、舞台剧等多种艺术形式的作品。\n这本小说中小说中充满尖锐的讽刺和隐喻，被西方科幻爱好者奉为“科幻圣经”。其中有两个关键词，一个是Don’t Panic，一个是42影响力很大，而其中关于42的故事简介是这样的：\n百万年前，老鼠其实是一种超智慧生物，它们建造了一部超级电脑深思Deep Thought，它们问超级电脑，生命、宇宙以及任何事情的终极答案（Answer to Life, the Universe, and Everything）什么，经过了750万年的计算，深思告诉老鼠的后人答案是42，深思解释它只能计算出答案是什么，但答案的原因必须由另一部更高智能的电脑才能解释，而该部电脑就是地球。经过了800万年，就在结果要出来的五分钟前，地球却因为挡在预定兴建的星际间高速公路的路线，被Vogons给毁灭，电脑没有给出最后的结果。\n …\n 阅读全文 Read More\n\n (31 人打了分，平均分： 4.03 )Loading...\n"
  },
  {
    "content": "",
    "title": "由苹果的低级Bug想到的",
    "url": "https://coolshell.cn/articles/11112.html",
    "date": "2014-02-24T08:12:11+08:00",
    "description": "\n 2014年2月22日，在这个“这么二”的日子里，苹果公司推送了 iOS 7.0.6（版本号11B651）修复了 SSL 连接验证的一个 bug。官方网页在这里：http://support.apple.com/kb/HT6147，网页中如下描述：\nImpact: An attacker with a privileged network position may capture or modify data in sessions protected by SSL/TLS\nDescription: Secure Transport failed to validate the authenticity of the connection. This issue was addressed by restoring missing validation steps.\n也就是说，这个bug会引起中间人攻击，bug的描述中说，这个问题是因为miss了对连接认证的合法性检查的步骤。\n这里多说一句，一旦网上发生任何的和SSL/TL相关的bug或安全问题，不管是做为用户，还是做为程序员的你，你一定要高度重视起来。因为这个网络通信的加密协议被广泛的应用在很多很多最最需要安全的地方，如果SSL/TLS有问题的话，意味着这个世界的计算机安全体系的崩溃。\nBug的代码原因\nAdam Langley的《Apple’s SSL/TLS bug 》的博文暴出了这个bug的细节。（在苹果的开源网站上，通过查看苹果的和SSL/TLS有关的代码变更，我们可以在文件sslKeyExchange.c中找到下面的代码）\n …\n 阅读全文 Read More\n\n (57 人打了分，平均分： 4.53 )Loading...\n"
  },
  {
    "content": "",
    "title": "可视化编程",
    "url": "https://coolshell.cn/articles/11094.html",
    "date": "2014-02-22T00:27:10+08:00",
    "description": "\n本文来自《Visual Programming Languages – Snapshots》，作者Eric Hosick收集了一堆关于可视化编程的工具，好多我都听都没听说过，我一股脑的全转过来，给大家看看，算是开开眼界了。本文也是参考了Wikipedia的 Visual Programming Language 词条。\n另外，在原文有很多评论，其中也有很多正文没有提到的，你可以前去围观一下。\nSketchPad\nMaybe the first. 1963.\n图片来源, Wikipedia 和 官方网站\n\n …\n 阅读全文 Read More\n\n (21 人打了分，平均分： 3.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "从“黑掉Github”学Web安全开发",
    "url": "https://coolshell.cn/articles/11021.html",
    "date": "2014-02-10T08:16:11+08:00",
    "description": "\nEgor Homakov（Twitter: @homakov 个人网站: EgorHomakov.com）是一个Web安全的布道士，他这两天把github给黑了，并给github报了5个安全方面的bug，他在他的这篇blog——《How I hacked Github again》（墙）说明了这5个安全bug以及他把github黑掉的思路。Egor的这篇文章讲得比较简单，很多地方一笔带过，所以，我在这里用我的语言给大家阐述一下黑掉Github的思路以及原文中所提到的那5个bug。希望这篇文章能让从事Web开发的同学们警惕。关于Web开发中的安全事项，大家可以看看这篇文章《Web开发中的你需要了解的东西》\nOAuth简介\n首先，这个故事要从Github OAuth讲起。所以，我们需要先知道什么是OAuth。所谓OAuth就是说，第三方的应用可以通过你的授权而不用知道你的帐号密码能够访问你在某网站的你自己的数据或功能。像Google, Facebook, Twitter等网站都提供了OAuth服务，提供OAuth服务的网站一般都有很多开放的API，第三方应用会调用这些API来开发他们的应用以让用户拥有更多的功能，但是，当用户在使用这些第三方应用的时候，这些第三方的应用会来访问用户的帐户内的功能和数据，所以，当第三应用要干这些事的时候，我们不能让第三方应用弹出一个对话框来问用户要他的帐号密码，不然第三方的应用就把用户的密码给获取了，所以，OAuth协议会跳转到一个页面，让用户授权给这个第三方应用以某些权限，然后，这个权限授权的记录保存在Google/Facebook/Twitter上，并向第三方应用返回一个授权token，于是第三方的应用通过这个token来操作某用户帐号的功能和数据时，就畅通无阻了。下图简单地说明了Twitter的OAuth的授权过程。\n …\n 阅读全文 Read More\n\n (55 人打了分，平均分： 4.07 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个“蝇量级” C 语言协程库",
    "url": "https://coolshell.cn/articles/10975.html",
    "date": "2014-01-28T10:50:41+08:00",
    "description": "\n（感谢网友 @我的上铺叫路遥 投稿）\n协程(coroutine)顾名思义就是“协作的例程”（co-operative routines）。跟具有操作系统概念的线程不一样，协程是在用户空间利用程序语言的语法语义就能实现逻辑上类似多任务的编程技巧。实际上协程的概念比线程还要早，按照 Knuth 的说法“子例程是协程的特例”，一个子例程就是一次子函数调用，那么实际上协程就是类函数一样的程序组件，你可以在一个线程里面轻松创建数十万个协程，就像数十万次函数调用一样。只不过子例程只有一个调用入口起始点，返回之后就结束了，而协程入口既可以是起始点，又可以从上一个返回点继续执行，也就是说协程之间可以通过 yield 方式转移执行权，对称（symmetric）、平级地调用对方，而不是像例程那样上下级调用关系。当然 Knuth 的“特例”指的是协程也可以模拟例程那样实现上下级调用关系，这就叫非对称协程（asymmetric coroutines）。\n基于事件驱动模型\n我们举一个例子来看看一种对称协程调用场景，大家最熟悉的“生产者-消费者”事件驱动模型，一个协程负责生产产品并将它们加入队列，另一个负责从队列中取出产品并使用它。为了提高效率，你想一次增加或删除多个产品。伪代码可以是这样的：\n# producer coroutine\nloop\nwhile queue is not full\n  create some new items\n  add the items to queue\nyield to consumer\n\n# consumer coroutine\nloop\nwhile queue is not empty\n  remove some items from queue\n  use the items\nyield to producer\n …\n 阅读全文 Read More\n\n (39 人打了分，平均分： 4.26 )Loading...\n"
  },
  {
    "content": "",
    "title": "分布式系统的事务处理",
    "url": "https://coolshell.cn/articles/10910.html",
    "date": "2014-01-20T11:08:16+08:00",
    "description": "\n当我们在生产线上用一台服务器来提供数据服务的时候，我会遇到如下的两个问题：\n1）一台服务器的性能不足以提供足够的能力服务于所有的网络请求。\n2）我们总是害怕我们的这台服务器停机，造成服务不可用或是数据丢失。\n于是我们不得不对我们的服务器进行扩展，加入更多的机器来分担性能上的问题，以及来解决单点故障问题。 通常，我们会通过两种手段来扩展我们的数据服务：\n1）数据分区：就是把数据分块放在不同的服务器上（如：uid % 16，一致性哈希等）。\n2）数据镜像：让所有的服务器都有相同的数据，提供相当的服务。\n对于第一种情况，我们无法解决数据丢失的问题，单台服务器出问题时，会有部分数据丢失。所以，数据服务的高可用性只能通过第二种方法来完成——数据的冗余存储（一般工业界认为比较安全的备份数应该是3份，如：Hadoop和Dynamo）。 但是，加入更多的机器，会让我们的数据服务变得很复杂，尤其是跨服务器的事务处理，也就是跨服务器的数据一致性。这个是一个很难的问题。 让我们用最经典的Use Case：“A帐号向B帐号汇钱”来说明一下，熟悉RDBMS事务的都知道从帐号A到帐号B需要6个操作：\n\n从A帐号中把余额读出来。\n对A帐号做减法操作。\n把结果写回A帐号中。\n从B帐号中把余额读出来。\n对B帐号做加法操作。\n把结果写回B帐号中。\n\n为了数据的一致性，这6件事，要么都成功做完，要么都不成功，而且这个操作的过程中，对A、B帐号的其它访问必需锁死，所谓锁死就是要排除其它的读写操作，不然会有脏数据的问题，这就是事务。那么，我们在加入了更多的机器后，这个事情会变得复杂起来：\n …\n 阅读全文 Read More\n\n (113 人打了分，平均分： 4.64 )Loading...\n"
  },
  {
    "content": "",
    "title": "函数式编程",
    "url": "https://coolshell.cn/articles/10822.html",
    "date": "2013-12-27T08:11:03+08:00",
    "description": "\n当我们说起函数式编程来说，我们会看到如下函数式编程的长相：\n\n函数式编程的三大特性：\n\nimmutable data 不可变数据：像Clojure一样，默认上变量是不可变的，如果你要改变变量，你需要把变量copy出去修改。这样一来，可以让你的程序少很多Bug。因为，程序中的状态不好维护，在并发的时候更不好维护。（你可以试想一下如果你的程序有个复杂的状态，当以后别人改你代码的时候，是很容易出bug的，在并行中这样的问题就更多了）\nfirst class functions：这个技术可以让你的函数就像变量一样来使用。也就是说，你的函数可以像变量一样被创建，修改，并当成变量一样传递，返回或是在函数中嵌套函数。这个有点像Javascript的Prototype（参看Javascript的面向对象编程）\n尾递归优化：我们知道递归的害处，那就是如果递归很深的话，stack受不了，并会导致性能大幅度下降。所以，我们使用尾递归优化技术——每次递归时都会重用stack，这样一来能够提升性能，当然，这需要语言或编译器的支持。Python就不支持。\n\n\n\n\n函数式编程的几个技术\n\nmap & reduce ：这个技术不用多说了，函数式编程最常见的技术就是对一个集合做Map和Reduce操作。这比起过程式的语言来说，在代码上要更容易阅读。（传统过程式的语言需要使用for/while循环，然后在各种变量中把数据倒过来倒过去的）这个很像C++中的STL中的foreach，find_if，count_if之流的函数的玩法。\npipeline：这个技术的意思是，把函数实例成一个一个的action，然后，把一组action放到一个数组或是列表中，然后把数据传给这个action list，数据就像一个pipeline一样顺序地被各个函数所操作，最终得到我们想要的结果。\nrecursing 递归 ：递归最大的好处就简化代码，他可以把一个复杂的问题用很简单的代码描述出来。注意：递归的精髓是描述问题，而这正是函数式编程的精髓。\ncurrying：把一个函数的多个参数分解成多个函数， 然后把函数多层封装起来，每层函数都返回一个函数去接收下一个参数这样，可以简化函数的多个参数。在C++中，这个很像STL中的bind_1st或是bind2nd。\nhigher order function 高阶函数：所谓高阶函数就是函数当参数，把传入的函数做一个封装，然后返回这个封装函数。现象上就是函数传进传出，就像面向对象对象满天飞一样。\n\n\n\n …\n 阅读全文 Read More\n\n (88 人打了分，平均分： 4.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "X-Y Problem",
    "url": "https://coolshell.cn/articles/10804.html",
    "date": "2013-12-16T10:22:37+08:00",
    "description": "\nX-Y Problem\n对于X-Y Problem的意思如下：\n1）有人想解决问题X\n2）他觉得Y可能是解决X问题的方法\n3）但是他不知道Y应该怎么做\n4）于是他去问别人Y应该怎么做？\n简而言之，没有去问怎么解决问题X，而是去问解决方案Y应该怎么去实现和操作。于是乎：\n1）热心的人们帮助并告诉这个人Y应该怎么搞，但是大家都觉得Y这个方案有点怪异。\n2）在经过大量地讨论和浪费了大量的时间后，热心的人终于明白了原始的问题X是怎么一回事。\n3）于是大家都发现，Y根本就不是用来解决X的合适的方案。\nX-Y Problem最大的严重的问题就是：在一个根本错误的方向上浪费他人大量的时间和精力！\n示例\n举个两个例子：\nQ) 我怎么用Shell取得一个字符串的后3位字符？\nA1) 如果这个字符的变量是$foo，你可以这样来 echo ${foo:-3}\nA2) 为什么你要取后3位？你想干什么？\nQ) 其实我就想取文件的扩展名\nA1) 我靠，原来你要干这事，那我的方法不对，文件的扩展名并不保证一定有3位啊。\nA1) 如果你的文件必然有扩展名的话，你可以这来样来：echo ${foo##*.}\n …\n 阅读全文 Read More\n\n (117 人打了分，平均分： 4.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "Lua简明教程",
    "url": "https://coolshell.cn/articles/10739.html",
    "date": "2013-12-03T08:29:06+08:00",
    "description": "\n这几天系统地学习了一下Lua这个脚本语言，Lua脚本是一个很轻量级的脚本，也是号称性能最高的脚本，用在很多需要性能的地方，比如：游戏脚本，nginx，wireshark的脚本，当你把他的源码下下来编译后，你会发现解释器居然不到200k，这是多么地变态啊（/bin/sh都要1M，MacOS平台），而且能和C语言非常好的互动。我很好奇得浏览了一下Lua解释器的源码，这可能是我看过最干净的C的源码了。\n我不想写一篇大而全的语言手册，一方面是因为已经有了（见本文后面的链接），重要的原因是，因为大篇幅的文章会挫败人的学习热情，我始终觉得好的文章读起来就像拉大便一样，能一口气很流畅地搞完，才会让人爽（这也是我为什么不想写书的原因）。所以，这必然又是一篇“入厕文章”，还是那句话，我希望本文能够让大家利用上下班，上厕所大便的时间学习一个技术。呵呵。\n相信你现在已经在厕所里脱掉裤子露出屁股已经准备好大便了，那就让我们畅快地排泄吧……\n运行\n首先，我们需要知道，Lua是类C的，所以，他是大小写字符敏感的。\n下面是Lua的Hello World。注意：Lua脚本的语句的分号是可选的，这个和GO语言很类似。\nprint(\"Hello World\")\n你可以像python一样，在命令行上运行lua命令后进入lua的shell中执行语句。\nchenhao-air:lua chenhao$ lua\nLua 5.2.2  Copyright (C) 1994-2013 Lua.org, PUC-Rio\n> print(\"Hello, World\")\nHello, World\n> \n …\n 阅读全文 Read More\n\n (88 人打了分，平均分： 4.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程能力与编程年龄",
    "url": "https://coolshell.cn/articles/10688.html",
    "date": "2013-11-13T08:21:45+08:00",
    "description": "\n程序员这个职业究竟可以干多少年，在中国这片神奇的土地上，很多人都说只能干到30岁，然后就需要转型，就像《程序员技术练级攻略》这篇文章很多人回复到这种玩法会玩死人的一样。我在很多面试中，问到应聘者未来的规划都能听到好些应聘都说程序员是个青春饭。因为，大多数程序员都认为，编程这个事只能干到30岁，最多35岁吧。每每我听到这样的言论，都让我感到相当的无语，大家都希望能像《21天速成C++》那样速成，好多时候超级有想和他们争论的冲动，但后来想想算了，因为你无法帮助那些只想呆在井底思维封闭而且想走捷径速成的人。\n今天，我们又来谈这个老话题，因为我看到一篇论文，但是也一定会有很多人都会找出各种理由来论证这篇论文的是错的，无所谓了，我把这篇文章送给那些和我一样准备为技术和编程执着和坚持的人。\n论文\n首先，我们先来看一篇论文《Is Programming Knowledge Related to Age?》（PDF链接），这篇论文是两个北卡罗莱纳州立大学计算机科学系的两个人Patrick Morrison 和 Emerson Murphy-Hill 对StackOverflow.com上的用户做了相关的数据挖掘得出来的一些数据。（我们知道StackOverflow.com上的数据是公开的，任何人都可以用来分析和统计，所以这篇论文的真实性是有的）\n数据采样和清洗条件如下：（数据全量是1694981用户，平均年龄30.3岁）\n\n15-70岁之间的用户（这年龄段的用户被称做“Working age”），当然，有很多用户没有输入年龄，这些用户都被过滤了。\n用户在2012年内都回答过问题。因为StackOverflow在2012年对问题和答案的质量要求得比以前高了一倍，所以更能反映程序员的真实水平。\nReputation声望在2-100K之间。（注：StackOverflow的用户Reputation是得到社会认可的，在面试和招聘中是硬通货币。比大学的学分更有价值）\n\n上述的条件一共过滤出84,248名程序员，平均年龄：29.02岁，平均Reputaion在1073.9分。\n …\n 阅读全文 Read More\n\n (207 人打了分，平均分： 4.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序的本质复杂性和元语言抽象",
    "url": "https://coolshell.cn/articles/10652.html",
    "date": "2013-10-31T08:00:09+08:00",
    "description": "\n（感谢 @文艺复兴记（todd） 投递此文）\n组件复用技术的局限性\n常听到有人讲“我写代码很讲究，一直严格遵循DRY原则，把重复使用的功能都封装成可复用的组件，使得代码简短优雅，同时也易于理解和维护”。显然，DRY原则和组件复用技术是最常见的改善代码质量的方法，不过，在我看来以这类方法为指导，能帮助我们写出“不错的程序”，但还不足以帮助我们写出简短、优雅、易理解、易维护的“好程序”。对于熟悉Martin Fowler《重构》和GoF《设计模式》的程序员，我常常提出这样一个问题帮助他们进一步加深对程序的理解：\n如果目标是代码“简短、优雅、易理解、易维护”，组件复用技术是最好的方法吗？这种方法有没有根本性的局限？\n虽然基于函数、类等形式的组件复用技术从一定程度上消除了冗余，提升了代码的抽象层次，但是这种技术却有着本质的局限性，其根源在于 每种组件形式都代表了特定的抽象维度，组件复用只能在其维度上进行抽象层次的提升。比如，我们可以把常用的HashMap等功能封装为类库，但是不管怎么封装复用类永远是类，封装虽然提升了代码的抽象层次，但是它永远不会变成Lambda，而实际问题所代表的抽象维度往往与之并不匹配。\n以常见的二进制消息的解析为例，组件复用技术所能做到的只是把读取字节，检查约束，计算CRC等功能封装成函数，这是远远不够的。比如，下面的表格定义了二进制消息X的格式：\n …\n 阅读全文 Read More\n\n (37 人打了分，平均分： 4.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "二维码的生成细节和原理",
    "url": "https://coolshell.cn/articles/10590.html",
    "date": "2013-10-29T08:32:35+08:00",
    "description": "\n二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。\n关于QR Code Specification，可参看这个PDF：http://raidenii.net/files/datasheets/misc/qr_code.pdf \n基础知识\n首先，我们先说一下二维码一共有40个尺寸。官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)*4 + 21（V是版本号） 最高Version 40，(40-1)*4+21 = 177，所以最高是177 x 177 的正方形。\n下面我们看看一个二维码的样例：\n\n …\n 阅读全文 Read More\n\n (96 人打了分，平均分： 4.41 )Loading...\n"
  },
  {
    "content": "",
    "title": "伙伴分配器的一个极简实现",
    "url": "https://coolshell.cn/articles/10427.html",
    "date": "2013-10-09T23:10:42+08:00",
    "description": "\n（感谢网友 @我的上铺叫路遥 投稿）\n提起buddy system相信很多人不会陌生，它是一种经典的内存分配算法，大名鼎鼎的Linux底层的内存管理用的就是它。这里不探讨内核这么复杂实现，而仅仅是将该算法抽象提取出来，同时给出一份及其简洁的源码实现，以便定制扩展。\n伙伴分配的实质就是一种特殊的“分离适配”，即将内存按2的幂进行划分，相当于分离出若干个块大小一致的空闲链表，搜索该链表并给出同需求最佳匹配的大小。其优点是快速搜索合并（O(logN)时间复杂度）以及低外部碎片（最佳适配best-fit）；其缺点是内部碎片，因为按2的幂划分块，如果碰上66单位大小，那么必须划分128单位大小的块。但若需求本身就按2的幂分配，比如可以先分配若干个内存池，在其基础上进一步细分就很有吸引力了。\n可以在维基百科上找到该算法的描述，大体如是：\n分配内存：\n1.寻找大小合适的内存块（大于等于所需大小并且最接近2的幂，比如需要27，实际分配32）\n1.如果找到了，分配给应用程序。\n2.如果没找到，分出合适的内存块。\n1.对半分离出高于所需大小的空闲内存块\n2.如果分到最低限度，分配这个大小。\n3.回溯到步骤1（寻找合适大小的块）\n4.重复该步骤直到一个合适的块\n …\n 阅读全文 Read More\n\n (29 人打了分，平均分： 3.79 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++11的Lambda使用一例：华容道求解",
    "url": "https://coolshell.cn/articles/10476.html",
    "date": "2013-10-09T15:50:21+08:00",
    "description": "\n（感谢网友  @bnu_chenshuo 投稿）\n\n华容道是一个有益的智力游戏，游戏规则不再赘述。用计算机求解华容道也是一道不错的编程练习题，为了寻求最少步数，求解程序一般用广度优先搜索算法。华容道的一种常见开局如图 1 所示。\n广度优先搜索算法求解华容道的基本步骤：\n\n准备两个“全局变量”，队列 Q 和和集合 S，S 代表“已知局面”。初时 Q 和 S 皆为空。\n将初始局面加入队列 Q 的末尾，并将初始局面设为已知。\n当队列不为空时，从 Q 的队首取出当前局面 curr。如果队列为空则结束搜索，表明无解。\n如果 curr 是最终局面（曹操位于门口，图 2），则结束搜索，否则继续到第 5 步。\n考虑 curr 中每个可以移动的棋子，试着上下左右移动一步，得到新局面 next，如果新局面未知（next ∉ S），则把它加入队列 Q，并设为已知。这一步可能产生多个新局面。\n回到第2步。\n\n其中“局面已知”并不要求每个棋子的位置相同，而是指棋子的投影的形状相同（代码中用 mask 表示），例如交换图 1 中的张飞和赵云并不产生新局面，这一规定可以大大缩小搜索空间。\n以上步骤很容易转换为 C++ 代码，这篇文章重点关注的是第 5 步的实现。\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 2.95 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++面试中string类的一种正确写法",
    "url": "https://coolshell.cn/articles/10478.html",
    "date": "2013-10-09T15:40:38+08:00",
    "description": "\n（感谢网友  @bnu_chenshuo 投稿）\nC++ 的一个常见面试题是让你实现一个 String 类，限于时间，不可能要求具备 std::string 的功能，但至少要求能正确管理资源。具体来说：\n\n能像 int 类型那样定义变量，并且支持赋值、复制。\n能用作函数的参数类型及返回类型。\n能用作标准库容器的元素类型，即 vector/list/deque 的 value_type。（用作 std::map 的 key_type 是更进一步的要求，本文从略）。\n\n换言之，你的 String 能让以下代码编译运行通过，并且没有内存方面的错误。\nvoid foo(String x)\n{\n}\n\nvoid bar(const String& x)\n{\n}\n\nString baz()\n{\n  String ret(\"world\");\n  return ret;\n}\n\nint main()\n{\n  String s0;\n  String s1(\"hello\");\n  String s2(s0);\n  String s3 = s1;\n  s2 = s1;\n\n  foo(s1);\n  bar(s1);\n  foo(\"temporary\");\n  bar(\"temporary\");\n  String s4 = baz();\n\n  std::vector<String> svec;\n  svec.push_back(s0);\n  svec.push_back(s1);\n  svec.push_back(baz());\n  svec.push_back(\"good job\");\n}\n …\n 阅读全文 Read More\n\n (34 人打了分，平均分： 3.76 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++模板”>>”编译问题与词法消歧设计",
    "url": "https://coolshell.cn/articles/10449.html",
    "date": "2013-10-02T18:47:36+08:00",
    "description": "\n（感谢 @文艺复兴记（todd） 投递此文）\n在编译理论中，通常将编译过程抽象为5个主要阶段：词法分析(Lexical Analysis)，语法分析(Parsing)，语义分析(Semantic Analysis)，优化(Optimization)，代码生成(Code Generation)。这5个阶段类似Unix管道模型，上一个阶段的输出作为下一个阶段的输入。其中，词法分析是根据输入源代码文本流，分割出词，识别类别，产生词法元素(Token)流，如：\n\nint a = 10;\n\n​经过词法分析会得到[(Type, “int”), (Identifier, “a”), (AssignOperator, “=”), (IntLiteral, 10)]，在后续的语法分析阶段，就会根据这些词法元素匹配相应的语法规则。在我学习编译原理时，教科书中对于词法分析的介绍主要是基于正则表达式的，言下之意就是普通语言的词法规则是可以通过正则表达式描述的。比如，C语言的变量名规则是“包含字母、数字或下划线，并且以字母或下划线开头”，这就可以用正则表达式[a-zA-Z_][a-zA-Z0-9_]*表达。但是，在实践中我发现不管是主流语言，还是自己设计的DSL都大量存在不能简单通过正则表达式进行词法分析的例子。来看C++98的模版例子：\n\nmap<int, vector<int>>\n\n上面这段代码会被C++98编译器中报语法错误，原因在于它把“>>”识别成了位右移运算符而不是两个模版右括号，在C++98中必须在两个括号中间加空格，写成\n …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 3.84 )Loading...\n"
  },
  {
    "content": "",
    "title": "数据即代码：元驱动编程",
    "url": "https://coolshell.cn/articles/10337.html",
    "date": "2013-08-09T10:18:31+08:00",
    "description": "\n（感谢 @文艺复兴记（todd） 投递此文）\n几个小伙伴在考虑下面这个各个语言都会遇到的问题：\n问题：设计一个命令行参数解析API\n一个好的命令行参数解析库一般涉及到这几个常见的方面：\n1) 支持方便地生成帮助信息\n2) 支持子命令，比如：git包含了push, pull, commit等多种子命令\n3) 支持单字符选项、多字符选项、标志选项、参数选项等多种选项和位置参数\n4) 支持选项默认值，比如：–port选项若未指定认为5037\n5) 支持使用模式，比如：tar命令的-c和-x是互斥选项，属于不同的使用模式\n经过一番考察，小伙伴们发现了这个几个有代表性的API设计：\n1. getopt()：\ngetopt()是libc的标准函数，很多语言中都能找到它的移植版本。\n …\n 阅读全文 Read More\n\n (58 人打了分，平均分： 4.03 )Loading...\n"
  },
  {
    "content": "",
    "title": "数据的游戏：冰与火",
    "url": "https://coolshell.cn/articles/10192.html",
    "date": "2013-07-31T08:11:17+08:00",
    "description": "\n我对数据挖掘和机器学习是新手，从去年7月份在Amazon才开始接触，而且还是因为工作需要被动接触的，以前都没有接触过，做的是需求预测机器学习相关的。后来，到了淘宝后，自己凭兴趣主动地做了几个月的和用户地址相关数据挖掘上的工作，有一些浅薄的心得。下面这篇文章主要是我做为一个新人仅从事数据方面技术不到10个月的一些心得，也许对你有用，也许很傻，不管怎么样，欢迎指教和讨论。\n另外，注明一下，这篇文章的标题模仿了一个美剧《权力的游戏：冰与火之歌》。在数据的世界里，我们看到了很多很牛，很强大也很有趣的案例。但是，数据就像一个王座一样，像征着一种权力和征服，但登上去的路途一样令人胆颤。\n数据挖掘中的三种角色\n在Amazon里从事机器学习的工作时，我注意到了Amazon玩数据的三种角色。\n\nData Analyzer：数据分析员。这类人的人主要是分析数据的，从数据中找到一些规则，并且为了数据模型的找不同场景的Training Data。另外，这些人也是把一些脏数据洗干净的的人。\n\n\nResearch Scientist：研究科学家。这种角色主要是根据不同的需求来建立数据模型的。他们把自己戏称为不近人间烟火的奇异性物种，就像《生活大爆炸》里的 那个Sheldon一样。这些人基本上玩的是数据上的科学\n\n\nSoftware Developer ：软件开发工程师。主要是把 Scientist 建立的数据模型给实现出来，交给Data Analyzer去玩。这些人通常更懂的各种机器学习的算法。\n\n我相信其它公司的做数据挖掘或是机器学习的也就这三种工作，或者说这三种人，对于我来说，\n …\n 阅读全文 Read More\n\n (71 人打了分，平均分： 4.46 )Loading...\n"
  },
  {
    "content": "",
    "title": "7个示例科普CPU Cache",
    "url": "https://coolshell.cn/articles/10249.html",
    "date": "2013-07-30T09:05:38+08:00",
    "description": "\n（感谢网友 @我的上铺叫路遥 翻译投稿）\nCPU cache一直是理解计算机体系架构的重要知识点，也是并发编程设计中的技术难点，而且相关参考资料如同过江之鲫，浩瀚繁星，阅之如临深渊，味同嚼蜡，三言两语难以入门。正好网上有人推荐了微软大牛Igor Ostrovsky一篇博文《漫游处理器缓存效应》，文章不仅仅用7个最简单的源码示例就将CPU cache的原理娓娓道来，还附加图表量化分析做数学上的佐证，个人感觉这种案例教学的切入方式绝对是俺的菜，故而忍不住贸然译之，以飨列位看官。\n原文地址：Gallery of Processor Cache Effects\n大多数读者都知道cache是一种快速小型的内存，用以存储最近访问内存位置。这种描述合理而准确，但是更多地了解一些处理器缓存工作中的“烦人”细节对于理解程序运行性能有很大帮助。\n在这篇博客中，我将运用代码示例来详解cache工作的方方面面，以及对现实世界中程序运行产生的影响。\n下面的例子都是用C#写的，但语言的选择同程序运行状况以及得出的结论几乎没什么影响。\n示例1：内存访问和运行\n你认为相较于循环1，循环2会运行多快？\nint[] arr = new int[64 * 1024 * 1024];\n\n// Loop 1\nfor (int i = 0; i < arr.Length; i++) arr[i] *= 3;\n\n// Loop 2\nfor (int i = 0; i < arr.Length; i += 16) arr[i] *= 3;\n …\n 阅读全文 Read More\n\n (53 人打了分，平均分： 3.96 )Loading...\n"
  },
  {
    "content": "",
    "title": "加班与效率",
    "url": "https://coolshell.cn/articles/10217.html",
    "date": "2013-07-24T08:28:10+08:00",
    "description": "\n微博上看到了这么一个贴子，就像以前在《腾讯，竞争力 和 用户体验》中批评过腾讯说自己的核心竞争力是员工加班一样，我顺着Winter的回复也批评了一下这个微博——\n“靠加班超越对手？！劳动密集型么？我要是对手的话，我就来趁机挖人了，直接摁死你……//@寒冬winter: 当一个管理者的智慧无法衡量一支团队的产出的时候，他就会把“工时”当做最后的救命稻草，死死抱住——这是他唯一听得懂的东西了。”\n\n然后，@玄了个澄的在微博里at我说，他在微信里看了@Fenng 关于加班的言论，希望我评论一下。我看了一下大辉的文章，虽然写得有点散乱，但是我和他的一些观点还是很类似的，我主要在这里加强一下我的看法。\n关于加班\n认为加班是公司的核心竞争力，或是超越对手的手段，是一种相当 Ridiculous 的想法。这说明管理者们已经想不到自己公司的核心价值了。\n …\n 阅读全文 Read More\n\n (110 人打了分，平均分： 4.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "类型的本质和函数式实现",
    "url": "https://coolshell.cn/articles/10169.html",
    "date": "2013-07-22T19:46:00+08:00",
    "description": "\n（感谢 @文艺复兴记（todd） 投递此文）\n在上一篇文章《二叉树迭代器算法》中，我介绍了一种基于栈的二叉树迭代器实现。程序设计语言和Haskell大牛@九瓜 在看过之后评论到：\n这里用了 stack 来做，有点偷懒，所以错失了一个抽象思考机会。如果我们能够理解二叉树到线性表的转换过程，完全可以把 Iterator 当作抽象的线性表来看，只要定义了关于 Iterator 的 empty, singleton, 还有 append 操作，实现二叉树的 Iterator 就变得非常直观。\n“错失了一个抽象思考机会”是什么意思呢？我理解九瓜的意思是基于栈的实现虽然是正确的，但它缺乏对于迭代器类型本质的理解，不具有通用性。如果能对迭代器进行合适地抽象就可以像二叉树递归遍历一样自然地得出二叉树迭代器，甚至其他更复杂的数据结构，只要我们能写出它的遍历算法，迭代器算法都可以自然推出。\n类型的本质\n九瓜提到了通过empty, singleton和append操作对Iterator进行抽象，我本来打算直接根据这个思路介绍函数式的二叉树迭代器实现，但是考虑到其实首要的问题在于理解类型的本质，而并不是所有人都具备这个基础，不如先普及一下类型基础再进入具体实现。那么下面我们就先来认识一下类型到底是什么？我们先以来看看表示元素对的Pair类型，可能有人一提到Pair类型马上就会在脑海中浮现出下面的结构：\n …\n 阅读全文 Read More\n\n (23 人打了分，平均分： 3.61 )Loading...\n"
  },
  {
    "content": "",
    "title": "C语言全局变量那些事儿",
    "url": "https://coolshell.cn/articles/10115.html",
    "date": "2013-07-21T21:16:33+08:00",
    "description": "\n（感谢网友 @我的上铺叫路遥 投稿）\n作为一名程序员，如果说沉迷一门编程语言算作一种乐趣的话，那么与此同时反过来去黑一门编程语言就是这种乐趣的升华。今天我们就来黑一把C语言，好好展示一下这门经典语言令人抓狂的一面。\n我们知道，全局变量是C语言语法和语义中一个很重要的知识点，首先它的存在意义需要从三个不同角度去理解：对于程序员来说，它是一个记录内容的变量(variable)；对于编译/链接器来说，它是一个需要解析的符号(symbol)；对于计算机来说，它可能是具有地址的一块内存(memory)。其次是语法/语义：从作用域上看，带static关键字的全局变量范围只能限定在文件里，否则会外联到整个模块和项目中；从生存期来看，它是静态的，贯穿整个程序或模块运行期间（注意，正是跨单元访问和持续生存周期这两个特点使得全局变量往往成为一段受攻击代码的突破口，了解这一点十分重要）；从空间分配上看，定义且初始化的全局变量在编译时在数据段(.data)分配空间，定义但未初始化的全局变量暂存(tentative definition)在.bss段，编译时自动清零，而仅仅是声明的全局变量只能算个符号，寄存在编译器的符号表内，不会分配空间，直到链接或者运行时再重定向到相应的地址上。\n我们将向您展现一下，非static限定全局变量在编译/链接以及程序运行时会发生哪些有趣的事情，顺便可以对C编译器/链接器的解析原理管中窥豹。以下示例对ANSI C和GNU C标准都有效，笔者的编译环境是Ubuntu下的GCC-4.4.3。\n …\n 阅读全文 Read More\n\n (29 人打了分，平均分： 3.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "二叉树迭代器算法",
    "url": "https://coolshell.cn/articles/9886.html",
    "date": "2013-07-14T11:08:23+08:00",
    "description": "\n（感谢 @文艺复兴记（todd） 投递此文）\n二叉树(Binary Tree)的前序、中序和后续遍历是算法和数据结构中的基本问题，基于递归的二叉树遍历算法更是递归的经典应用。\n假设二叉树结点定义如下：\n\n// C++\nstruct Node {\n    int value;\n    Node *left;\n    Node *right;\n}\n\n中序递归遍历算法：\n\n// C++\nvoid inorder_traverse(Node *node) {\n    if (NULL != node->left) {\n        inorder_traverse(node->left);\n    }\n    do_something(node);\n    if (NULL != node->right) {\n        inorder_traverse(node->right);\n    }\n}\n\n前序和后序遍历算法类似。\n但是，仅有遍历算法是不够的，在许多应用中，我们还需要对遍历本身进行抽象。假如有一个求和的函数sum，我们希望它能应用于链表，数组，二叉树等等不同的数据结构。这时，我们可以抽象出迭代器(Iterator)的概念，通过迭代器把算法和数据结构解耦了，使得通用算法能应用于不同类型的数据结构。我们可以把sum函数定义为：\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 3.13 )Loading...\n"
  },
  {
    "content": "",
    "title": "Alan Cox：大教堂、市集与市议会",
    "url": "https://coolshell.cn/articles/9917.html",
    "date": "2013-07-08T15:42:27+08:00",
    "description": "\n（感谢网友 @我的上铺叫路遥 投稿）\n在网上搜到的Cox大叔于1998年在开源社区写的一篇文章，当时很轰动，明眼人一看就知道是针对ESR那篇《大教堂与市集》，从中可见Alan在项目管理风格上乃至个人性格上都与ESR、Linus等人不同之处。顺便说一句，Alan现在出于“家庭原因”已经离开了Linux项目，他曾经评价Linus是a good developer but a terrible engineer，甚至在Google+上直接说Linus就是一a*sh**e。不管如何，两位曾经十余年里并肩战斗惺惺相惜的大牛就此分道扬镳还是惹人唏嘘。\n言归正传，以下为slashdot收录的英文原文：Cathedrals, Bazaars and the Town Council。\n以下是一些我对市集模式的想法，我认为这值得分享，这种模式会教你如何完全毁掉一个自由软件项目。我还举了一个我称之为“市议会”(Town Council)效应的实例（虽然那些市议员们可不这么认为，注：此处指Linux项目开发者）。\n关于软件开发人员，你必须去了解一些情况。首先要了解的是真正优秀的程序员相对来说并不普遍，不仅如此，在很多其它专业领域里“真正的程序员”和一些捣乱的家伙之间的区别要比“伟大”和“普通”之间的区别要大得多，研究表明生产效率上最好的同其余的比重是30:1。\n其次，你需要了解的是一大堆妄想型码农(wannabe programmer)总是善于发表意见。其中很多人患上了一种叫做“流行性热词”(buzzword)疾病，或者对他们“非黑即白”(one true path)的思考方式有着特殊的偏执，网上很多讨论都是廉价的。\n …\n 阅读全文 Read More\n\n (21 人打了分，平均分： 3.62 )Loading...\n"
  },
  {
    "content": "",
    "title": "IoC/DIP其实是一种管理思想",
    "url": "https://coolshell.cn/articles/9949.html",
    "date": "2013-07-05T08:44:03+08:00",
    "description": "\n 关于IoC的的概念提出来已经很多年了，其被用于一种面象对像的设计。我在这里再简单的回顾一下这个概念。我先谈技术，再说管理。\n话说，我们有一个开关要控制一个灯的开和关这两个动作，最常见也是最没有技术含量的实现会是这个样子：\n\n然后，有一天，我们发现需要对灯泡扩展一下，于是我们做了个抽象类：\n\n但是，如果有一天，我们发现这个开关可能还要控制别的不单单是灯泡的东西，我们就发现这个开关耦合了灯泡这种类别，非常不利于我们的扩展，于是反转控制出现了。\n就像现实世界一样，造开关的工厂根本不关心要控制的东西是什么，它只做一个开关应该做好的事，就是把电接通，把电断开（不管是手动的，还是声控的，还是光控，还是遥控的），而我们的造各种各样的灯泡（不管是日关灯，白炽灯）的工厂也不关心你用什么样的开关，反正我只管把灯的电源接口给做出来，然后，开关厂和电灯厂依赖于一个标准的通电和断电的接口。于是产生了IoC控制反转，如下图：\n …\n 阅读全文 Read More\n\n (36 人打了分，平均分： 3.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "Alan Cox：单向链表中prev指针的妙用",
    "url": "https://coolshell.cn/articles/9859.html",
    "date": "2013-06-30T12:27:04+08:00",
    "description": "\nAlan Cox\n （感谢网友 @我的上铺叫路遥 投稿）\n之前发过一篇二级指针操作单向链表的例子，显示了C语言指针的灵活性，这次再探讨一个指针操作链表的例子，而且是一种完全不同的用法。\n这个例子是linux-1.2.13网络协议栈里的，关于链表遍历&数据拷贝的一处实现。源文件是/net/inet/dev.c，你可以从kernel.org官网上下载。\n从最早的0.96c版本开始，linux网络部分一直采取TCP/IP协议族实现，这是最为广泛应用的网络协议，整个架构就是经典的OSI七层模型的描述，其中dev.c是属于链路层实现。从功能上看，其位于网络设备驱动程序和网络层协议实现模块之间，作为二者之间的数据包传输通道，一种接口模块而存在——对驱动层的接口函数netif_rx, 以及对网络层的接口函数net_bh。前者提供给驱动模块的中断例程调用，用于链路数据帧的封装；后者作为驱动中断例程底半部(buttom half)，用于对数据帧的解析处理并向上层传送。\n为了便于理解，这里补充一下网络通信原理和linux驱动中断机制的背景知识。从最底层的物理层说起，当主机和路由器相互之间进行通信的时候，在物理介质上（同轴、光纤等）以电平信号进行传输。主机或路由器的硬件接口（网卡）负责收发这些信号，当信号发送到接口，再由内置的调制解调器(modem)将数字信号转换成二进制码，这样才能驻留在主机的硬件缓存中。这时接口（网卡）设备驱动程序将通过硬中断来获取硬件缓存中的数据，驱动程序是操作系统中负责直接同硬件设备打交道的模块，硬中断的触发是初始化时通过设置控制寄存器实现的，用于通知驱动程序硬件缓存中有新的数据到来。linux卡设备驱动就是在中断处理例程(ISR)中将硬件缓存数据拷贝到内核缓存中，打包成数据链路帧进行解析处理，再向上分发到各种协议层。由于ISR上下文是原子性的、中断屏蔽的，整个步骤又较为繁琐，因此全部放在ISR中处理会影响到其它中断响应实时性，于是linux有实现一种bottom half的软中断处理机制，将整个ISR一分为二，前半部上下文屏蔽所有中断，专门处理紧急的、实时性强的事务，如拷贝硬件缓存并打包封装，后半部上下文没有屏蔽中断（但代码不可重入），用于处理比较耗时且非紧急事务，包括数据帧的解析处理和分发。下面要讲的net_bh就属于后半部。\n我们主要关心的是将链路帧分发到协议层那一段逻辑，下面摘自net_bh函数中的一段代码：\n …\n 阅读全文 Read More\n\n (36 人打了分，平均分： 4.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "Javascript 装载和执行",
    "url": "https://coolshell.cn/articles/9749.html",
    "date": "2013-06-05T08:31:06+08:00",
    "description": "\n一两个月前在淘宝内网里看到一个优化Javascript代码的竞赛，发现有不少的人对Javascript的执行和装载的基础并不懂，所以，从那天起我就想写一篇文章，但一直耽搁了。自上篇《浏览器渲染原理简介》，正好也可以承前启后。\n首先，我想说一下Javascript的装载和执行。通常来说，浏览器对于Javascript的运行有两大特性：1）载入后马上执行，2）执行时会阻塞页面后续的内容（包括页面的渲染、其它资源的下载）。于是，如果有多个js文件被引入，那么对于浏览器来说，这些js文件被被串行地载入，并依次执行。\n因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件，因为这是js文件的特殊性造成的。所以，如果你的javascript想操作后面的DOM元素，基本上来说，浏览器都会报错说对象找不到。因为Javascript执行时，后面的HTML被阻塞住了，DOM树时还没有后面的DOM结点。所以程序也就报错了。\n传统的方式\n所以，当你写在代码中写下如下的代码：\n<script type=\"text/javascript\"\n        src=\"https://coolshell.cn/asyncjs/alert.js\"></script>\n …\n 阅读全文 Read More\n\n (64 人打了分，平均分： 4.31 )Loading...\n"
  },
  {
    "content": "",
    "title": "无锁HashMap的原理与实现",
    "url": "https://coolshell.cn/articles/9703.html",
    "date": "2013-05-30T21:31:20+08:00",
    "description": "\n (本文由onetwogoo投稿)\n在《疫苗：Java HashMap的死循环》中，我们看到，java.util.HashMap并不能直接应用于多线程环境。对于多线程环境中应用HashMap，主要有以下几种选择：\n\n使用线程安全的java.util.Hashtable作为替代。\n使用java.util.Collections.synchronizedMap方法，将已有的HashMap对象包装为线程安全的。\n使用java.util.concurrent.ConcurrentHashMap类作为替代，它具有非常好的性能。\n\n而以上几种方法在实现的具体细节上，都或多或少地用到了互斥锁。互斥锁会造成线程阻塞，降低运行效率，并有可能产生死锁、优先级翻转等一系列问题。\nCAS(Compare And Swap)是一种底层硬件提供的功能，它可以将判断并更改一个值的操作原子化。关于CAS的一些应用，《无锁队列的实现》一文中有很详细的介绍。\nJava中的原子操作\n在java.util.concurrent.atomic包中，Java为我们提供了很多方便的原子类型，它们底层完全基于CAS操作。\n例如我们希望实现一个全局公用的计数器，那么可以：\n \nprivate AtomicInteger counter = new AtomicInteger(3);\n\npublic void addCounter() {\n    for (;;) {\n        int oldValue = counter.get();\n        int newValue = oldValue + 1;\n        if (counter.compareAndSet(oldValue, newValue))\n            return;\n    }\n}\n …\n 阅读全文 Read More\n\n (30 人打了分，平均分： 3.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "浏览器的渲染原理简介",
    "url": "https://coolshell.cn/articles/9666.html",
    "date": "2013-05-22T08:17:47+08:00",
    "description": "\n看到这个标题大家一定会想到这篇神文《How Browsers Work》，这篇文章把浏览器的很多细节讲得很细，而且也被翻译成了中文。为什么我还想写一篇呢？因为两个原因，\n1）这篇文章太长了，阅读成本太大，不能一口气读完。\n2）花了大力气读了这篇文章后可以了解很多，但似乎对工作没什么帮助。\n所以，我准备写下这篇文章来解决上述两个问题。希望你能在上班途中，或是坐马桶时就能读完，并能从中学会一些能用在工作上的东西。\n浏览器工作大流程\n废话少说，先来看个图：\n\n从上面这个图中，我们可以看到那么几个事：\n …\n 阅读全文 Read More\n\n (70 人打了分，平均分： 4.39 )Loading...\n"
  },
  {
    "content": "",
    "title": "疫苗：Java HashMap的死循环",
    "url": "https://coolshell.cn/articles/9606.html",
    "date": "2013-05-10T08:12:12+08:00",
    "description": "\n在淘宝内网里看到同事发了贴说了一个CPU被100%的线上故障，并且这个事发生了很多次，原因是在Java语言在并发情况下使用HashMap造成Race Condition，从而导致死循环。这个事情我4、5年前也经历过，本来觉得没什么好写的，因为Java的HashMap是非线程安全的，所以在并发下必然出现问题。但是，我发现近几年，很多人都经历过这个事（在网上查“HashMap Infinite Loop”可以看到很多人都在说这个事）所以，觉得这个是个普遍问题，需要写篇疫苗文章说一下这个事，并且给大家看看一个完美的“Race Condition”是怎么形成的。\n问题的症状\n从前我们的Java代码因为一些原因使用了HashMap这个东西，但是当时的程序是单线程的，一切都没有问题。后来，我们的程序性能有问题，所以需要变成多线程的，于是，变成多线程后到了线上，发现程序经常占了100%的CPU，查看堆栈，你会发现程序都Hang在了HashMap.get()这个方法上了，重启程序后问题消失。但是过段时间又会来。而且，这个问题在测试环境里可能很难重现。\n我们简单的看一下我们自己的代码，我们就知道HashMap被多个线程操作。而Java的文档说HashMap是非线程安全的，应该用ConcurrentHashMap。\n但是在这里我们可以来研究一下原因。\n …\n 阅读全文 Read More\n\n (184 人打了分，平均分： 4.66 )Loading...\n"
  },
  {
    "content": "",
    "title": "“C++的数组不支持多态”？",
    "url": "https://coolshell.cn/articles/9543.html",
    "date": "2013-04-29T16:17:40+08:00",
    "description": "\n先是在微博上看到了个微博和云风的评论，然后我回了“楼主对C的内存管理不了解”。\n\n后来引发了很多人的讨论，大量的人又借机来黑C++，比如：\n//@Baidu-ThursdayWang:这不就c++弱爆了的地方吗，需要记忆太多东西\n//@编程浪子张发财:这个跟C关系真不大。不过我得验证一下，感觉真的不应该是这样的。如果基类的析构这种情况不能 调用，就太弱了。\n//@程序元：现在看来，当初由于毅力不够而没有深入纠缠c++语言特性的各种犄角旮旯的坑爹细枝末节，实是幸事。为现在还沉浸于这些诡异特性并乐此不疲的同志们感到忧伤。\n然后，也出现了一些乱七八糟的理解：\n …\n 阅读全文 Read More\n\n (52 人打了分，平均分： 4.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "Unix考古记：一个“遗失”的shell",
    "url": "https://coolshell.cn/articles/9410.html",
    "date": "2013-04-26T22:29:56+08:00",
    "description": "\n(感谢网友Leo投递此文)\n谨以此文纪念伟大的计算机科学巨匠Ken Thompson和Dennis Ritchie，并同时向其他所有为Unix发展做出贡献的黑客致敬。\n历史的尘埃\nUnix作为一个举世闻名的操作系统已有40余年的历史，围绕着这个古老的操作系统的发展又衍生出了一系列外围软件生态群，其中一个非常重要的组件就是shell。它是操作系统最外层的接口，负责直接面向用户交互并提供内核服务，包括命令行接口(CLI)或图形界面接口(GUI)两种形式。以CLI为例，它提供一套命令规范，是一种解释性语言，将用户输入经过解释器(interpreter)输出使其转化成真正的系统调用，实现人机交互的功能。\n和操作系统一样，shell也经历了一个漫长的演变史。如今大部分资料讲述最古老的shell都是从1977年的Bourne Shell说起的，它最初移植到Unix V7上，被追认整个shell家族成员的鼻祖，后来的种群都是从其身上分支出来的。\n\n对于1977年之前的历史很多资料大多一笔带过或略过不提。事实上，第一个移植到Unix上的shell却不是Steve Bourne写的，早在1975年5月，贝尔实验室就对外发布了第一个广泛传播的Unix版本——Unix V6（之前开发的版本只供内部研究之用），其根目录下的/bin/sh是第一个Unix自带的shell，由Ken Thompson写的，因此也被称为Thompson Shell。甚至，更早可以追溯到1971年的时候，Thompson Shell就作为一个独立于内核的应用程序而实现了，只不过从1975年正式问世到1977年被取代，短短两年的寿命使得它很少为大多数人所认识。\n …\n 阅读全文 Read More\n\n (39 人打了分，平均分： 4.15 )Loading...\n"
  },
  {
    "content": "",
    "title": "PFIF网上寻人协议",
    "url": "https://coolshell.cn/articles/9508.html",
    "date": "2013-04-22T00:20:16+08:00",
    "description": "\n本文的主要内容来自Wikipedia(http://en.wikipedia.org/wiki/People_Finder_Interchange_Format)\nPFIF全称People Finder Interchange Format，是一个应用广泛的数据开源的标准协议，这个协议主要是设计用来在不同的政府、救援组织、或是其它的一些灾难中生存者和其亲人联系的网站间进行数据交换的一种协议。\n\n这个协议基于XML，信息中包括人的身份标识，还有人目前的位置和状态等一些信息。PFIF可以通过Atom和RSS feed出去。PFIF可以允许不同的寻人站点进行数据交换和合并。每一条记录都有一个唯一的标识，这个标识说明了这是由哪个域名创建的。这样，当A站点获得B点的某个人的数据时，在A站点可以对这个人的增加的信息可以转到其它站点上再被增加相关的信息，因为有一个唯一的ID，所以信息可以在不同的站点上被附加。\n从wikipedia上看，说起PFIF这个事，得回到2001年的911事件，那时人们一共使用了超过25个不同的在线论坛和网上寻人站来查找相关的亲人和朋友（注：寻人网站英文叫：Survivor Registry，生还者登记网站）。其中一个最大的网站是由伯克利大学的学生Ka-Ping Yee 和 Miriam Walker 开发运行在Millennium计算集群上的safe.millennium.berkeley.edu网站。那时，为了减少各种网站间的混乱，伯克利的寻人网站开始从其它几个比较大的寻人站点收集相关的数据，并人肉整合到一起。\n …\n 阅读全文 Read More\n\n (31 人打了分，平均分： 3.97 )Loading...\n"
  },
  {
    "content": "",
    "title": "“作环保的程序员，从不用百度开始”",
    "url": "https://coolshell.cn/articles/9308.html",
    "date": "2013-03-23T21:47:20+08:00",
    "description": "\n酷壳对来自百度搜索引擎的访问会弹窗，但是我的这个行为发酵出了一些事情，这里把这个事情说明如下，我会更新相关的东西。内行看门道，外行看热闹。\n事由\n2月6日 看到梁斌同学的微博（起因可能是因为梁斌同学在微博上对帮助百度的一些工程师们说话导致他的“微博寻人”全站被百度屏蔽）\n\n我看到后，觉得梁斌同学有点太看重被百度收录了，没有站长应该有的气质，所以，我回了一个微博——\n“我的酷壳倒反而因为被百度收录而感到掉价！”\n2月6日当天，我给coolshell做了个弹窗，并发布微博—— （该微博目前已被新浪管理员删除，后面有说明）\n …\n 阅读全文 Read More\n\n (621 人打了分，平均分： 4.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "《Rework》摘录及感想",
    "url": "https://coolshell.cn/articles/9156.html",
    "date": "2013-03-11T08:25:34+08:00",
    "description": "\n读了《Rework》这本书好多遍，每次读都有不同的感想。但从来没有把这些感想记录下来，今天把《Rework》书中的一些章节做一些摘录，并把我的一些感想总结出来。供大家参考。这是一本平生以来让我中毒很深的书，也是一本让我思考得很多的书。希望看到这篇文章的人都能好好地读读这本书。这本书并不难读，是一本你可以一口气不中断就可以读完的书。\n现实世界\n“这在现实世界里面行不通”，当你向人们介绍一个新创意时，人们总是这么回答你。这个“现实世界”听起来如此令人沮丧，……只有人耳熟能详，习以为常的事情才会胜利，即使是这些事情已经漏洞百出陈腐低效。\n揭开“现实世界”这个锅盖，你会发现居住在里的人都充斥着悲观主义和失望的情绪。更糟的是，他们想将别人拖进他们的坟墓。如果你是充满希望和野心的人，他们会试着说服你，你的想法是不可能的。他们会说你在浪费时间。\n“现实世界”并不存在，那只是人的一个借口。只是某些人为了开脱 自己的无所作为，跟你一点关系也没有。\n感想：我经常会向一同事和朋友提及一些我的想法，朋友同事们经常会回答我——这个事某某人，某某团队做过了，没成功。或是对我说，你做这个事的时候，要小心这个要小心那个。我觉得，这个时候是最考验我们的时候了，要有一个清醒的头脑去分析别人的话，别人真不代表自己。这个世界上大多数人都是比较保守的，大多数都对这个现实世界都有或多或少的恐惧感。当然，你可以选择做大众，但是如果你想让你的人生有些不同，有些精彩，我还是建议你不要和大多数人想得一样，如果你和大多数人的想法一样，你必然会和大多数人一样的平庸。当然，如果你和大多数人不一样，你要么就是天才，要么就是傻瓜。要证明你自己是不是傻瓜，我们可以看看我们过去有没有过一些小成功或小成绩。如果有，那么就应该大胆地坚持自己的想法。\n被高估的“从错误中学习”\n你真的从错误和失败里面学到什么了吗？你也许学到了别再重蹈覆辙，但是这有什么意义吗？你仍然不知道接下来该做什么。\n …\n 阅读全文 Read More\n\n (94 人打了分，平均分： 4.59 )Loading...\n"
  },
  {
    "content": "",
    "title": "实例分析Java Class的文件结构",
    "url": "https://coolshell.cn/articles/9229.html",
    "date": "2013-03-05T23:28:51+08:00",
    "description": "\n【感谢网友 @Krq_Tiger 投稿】\n今天把之前在Evernote中的笔记重新整理了一下，发上来供对java class 文件结构的有兴趣的同学参考一下。\n学习Java的朋友应该都知道Java从刚开始的时候就打着平台无关性的旗号，说“一次编写，到处运行”，其实说到无关性，Java平台还有另外一个无关 性那就是语言无关性，要实现语言无关性，那么Java体系中的class的文件结构或者说是字节码就显得相当重要了，其实Java从刚开始的时候就有两套 规范，一个是Java语言规范，另外一个是Java虚拟机规范，Java语言规范只是规定了Java语言相关的约束以及规则，而虚拟机规范则才是真正从跨 平台的角度去设计的。今天我们就以一个实际的例子来看看，到底Java中一个Class文件对应的字节码应该是什么样子。 这篇文章将首先总体上阐述一下Class到底由哪些内容构成，然后再用一个实际的Java类入手去分析class的文件结构。\n在继续之前，我们首先需要明确如下几点：\n1）Class文件是有8个字节为基础的字节流构成的，这些字节流之间都严格按照规定的顺序排列，并且字节之间不存在任何空隙，对于超过8个字节的数据，将按 照Big-Endian的顺序存储的，也就是说高位字节存储在低的地址上面，而低位字节存储到高地址上面，其实这也是class文件要跨平台的关键，因为 PowerPC架构的处理采用Big-Endian的存储顺序，而x86系列的处理器则采用Little-Endian的存储顺序，因此为了Class文 件在各中处理器架构下保持统一的存储顺序，虚拟机规范必须对起进行统一。\n2） Class文件结构采用类似C语言的结构体来存储数据的，主要有两类数据项，无符号数和表，无符号数用来表述数字，索引引用以及字符串等，比如 u1,u2,u4,u8分别代表1个字节，2个字节，4个字节，8个字节的无符号数，而表是有多个无符号数以及其它的表组成的复合结构。可能大家看到这里 对无符号数和表到底是上面也不是很清楚，不过不要紧，等下面实例的时候，我会再以实例来解释。\n明确了上面的两点以后，我们接下来后来看看Class文件中按照严格的顺序排列的字节流都具体包含些什么数据：\n …\n 阅读全文 Read More\n\n (37 人打了分，平均分： 4.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "并发框架Disruptor译文",
    "url": "https://coolshell.cn/articles/9169.html",
    "date": "2013-02-28T20:13:46+08:00",
    "description": "\n（感谢同事方腾飞投递本文）\nMartin Fowler在自己网站上写了一篇LMAX架构的文章，在文章中他介绍了LMAX是一种新型零售金融交易平台，它能够以很低的延迟产生大量交易。这个系统是建立在JVM平台上，其核心是一个业务逻辑处理器，它能够在一个线程里每秒处理6百万订单。业务逻辑处理器完全是运行在内存中，使用事件源驱动方式。业务逻辑处理器的核心是Disruptor。\nDisruptor它是一个开源的并发框架，并获得2011 Duke’s 程序框架创新奖，能够在无锁的情况下实现网络的Queue并发操作。本文是Disruptor官网中发布的文章的译文（现在被移到了GitHub）。\n剖析Disruptor:为什么会这么快\n\n剖析Disruptor:为什么会这么快？(一)锁的缺点\n\n\n剖析Disruptor:为什么会这么快？(二)神奇的缓存行填充\n\n\n剖析Disruptor:为什么会这么快？(三)伪共享\n\n\n剖析Disruptor:为什么会这么快？(四)揭秘内存屏障\n\nDisruptor如何工作和使用\n\n如何使用Disruptor（一）Ringbuffer的特别之处\n\n\n如何使用Disruptor（二）如何从Ringbuffer读取\n\n\n如何使用Disruptor（三）写入Ringbuffer\n\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 4.04 )Loading...\n"
  },
  {
    "content": "",
    "title": "sed 简明教程",
    "url": "https://coolshell.cn/articles/9104.html",
    "date": "2013-02-20T08:36:48+08:00",
    "description": "\nawk于1977年出生，今年36岁本命年，sed比awk大2-3岁，awk就像林妹妹，sed就是宝玉哥哥了。所以 林妹妹跳了个Topless，他的哥哥sed坐不住了，也一定要出来抖一抖。\nsed全名叫stream editor，流编辑器，用程序的方式来编辑文本，相当的hacker啊。sed基本上就是玩正则模式匹配，所以，玩sed的人，正则表达式一般都比较强。\n同样，本篇文章不会说sed的全部东西，你可以参看sed的手册，我这里主要还是想和大家竞争一下那些从手机指缝间或马桶里流走的时间，用这些时间来学习一些东西。当然，接下来的还是要靠大家自己双手。\n用s命令替换\n我使用下面的这段文本做演示：\n$ cat pets.txt\nThis is my cat\n  my cat's name is betty\nThis is my dog\n  my dog's name is frank\nThis is my fish\n  my fish's name is george\nThis is my goat\n  my goat's name is adam\n把其中的my字符串替换成Hao Chen’s，下面的语句应该很好理解（s表示替换命令，/my/表示匹配my，/Hao Chen’s/表示把匹配替换成Hao Chen’s，/g 表示一行上的替换所有的匹配）：\n$ sed \"s/my/Hao Chen's/g\" pets.txt\nThis is Hao Chen's cat\n  Hao Chen's cat's name is betty\nThis is Hao Chen's dog\n  Hao Chen's dog's name is frank\nThis is Hao Chen's fish\n  Hao Chen's fish's name is george\nThis is Hao Chen's goat\n  Hao Chen's goat's name is adam\n注意：如果你要使用单引号，那么你没办法通过\\’这样来转义，就有双引号就可以了，在双引号内可以用\\”来转义。\n …\n 阅读全文 Read More\n\n (114 人打了分，平均分： 4.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "AWK 简明教程",
    "url": "https://coolshell.cn/articles/9070.html",
    "date": "2013-02-17T08:38:29+08:00",
    "description": "\n有一些网友看了前两天的《Linux下应该知道的技巧》希望我能教教他们用awk和sed，所以，出现了这篇文章。我估计这些80后的年轻朋友可能对awk/sed这类上古神器有点陌生了，所以需要我这个老家伙来炒炒冷饭。况且，AWK是贝尔实验室1977年搞出来的文本出现神器，今年是蛇年，是AWK的本命年，而且年纪和我相仿，所以非常有必要为他写篇文章。\n之所以叫AWK是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的Family Name的首字符。要学AWK，就得提一提AWK的一本相当经典的书《The AWK Programming Language》，它在豆瓣上的评分是9.4分！在亚马逊上居然卖1022.30元。\n我在这里的教程并不想面面俱到，本文和我之前的Go语言简介一样，全是示例，基本无废话。\n我只想达到两个目的：\n1）你可以在乘坐公交地铁上下班，或是在坐马桶拉大便时读完（保证是一泡大便的工夫）。\n2）我只想让这篇博文像一个火辣的脱衣舞女挑起你的兴趣，然后还要你自己去下工夫去撸。\n废话少说，我们开始脱吧（注：这里只是topless）。\n起步上台\n我从netstat命令中提取了如下信息作为用例：\n …\n 阅读全文 Read More\n\n (127 人打了分，平均分： 4.61 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linus：利用二级指针删除单向链表",
    "url": "https://coolshell.cn/articles/8990.html",
    "date": "2013-02-04T08:33:20+08:00",
    "description": "\n感谢网友full_of_bull投递此文（注：此文最初发表在这个这里，我对原文后半段修改了许多，并加入了插图）\nLinus大婶在slashdot上回答一些编程爱好者的提问，其中一个人问他什么样的代码是他所喜好的，大婶表述了自己一些观点之后，举了一个指针的例子，解释了什么才是core low-level coding。\n下面是Linus的教学原文及翻译——\n“At the opposite end of the spectrum, I actually wish more people understood the really core low-level kind of coding. Not big, complex stuff like the lockless name lookup, but simply good use of pointers-to-pointers etc. For example, I’ve seen too many people who delete a singly-linked list entry by keeping track of the “prev” entry, and then to delete the entry, doing something like。（在这段话的最后，我实际上希望更多的人了解什么是真正的核心底层代码。这并不像无锁文件名查询（注：可能是git源码里的设计）那样庞大、复杂，只是仅仅像诸如使用二级指针那样简单的技术。例如，我见过很多人在删除一个单项链表的时候，维护了一个”prev”表项指针，然后删除当前表项，就像这样）”\nif (prev)\n    prev->next = entry->next;\nelse\n    list_head = entry->next;\nand whenever I see code like that, I just go “This person doesn’t understand pointers”. And it’s sadly quite common.（当我看到这样的代码时，我就会想“这个人不了解指针”。令人难过的是这太常见了。）\n …\n 阅读全文 Read More\n\n (54 人打了分，平均分： 4.28 )Loading...\n"
  },
  {
    "content": "",
    "title": "从面向对象的设计模式看软件设计",
    "url": "https://coolshell.cn/articles/8961.html",
    "date": "2013-02-01T08:15:59+08:00",
    "description": "\n前些天发了一篇《如此理解面向对象编程》的文章，然后引起了大家的热议。然后我在微博上说了一句——“那23个经典的设计模式和OO半毛钱关系没有，只不过人家用OO来实现罢了……OO的设计模式思想和Unix的设计思想基本没什么差别”，结果引来了一点点争议。所以，我写下这篇文章把我的观点说明一下。我希望这样可以让大家更容易地理解什么是设计模式。我顺便帮OO和 Unix/Linux搞搞基。\n什么是模式\n在正式说明GoF的那23个经典的设计模式其实和OO关系不大并和Unix的设计思想很相似的这个观点之前，让我先来说说什么是模式？设计模式的英文是Design Pattern，模式是Pattern的汉译。所谓Pattern就是一种规则，或是一种模型，或是一种习惯。Pattern这个东西到处都是，并不只有技术圏子里才有。比如：\n\n文章有文章的Pattern。如新闻有新闻的Pattern（第一段话简述了整个新闻），诗歌总是抒情的，论文总是死板的，讲稿总是高谈的，漫画总是幽默的，……\n小说有小说的Pattern。比如，\n\n武侠小说必然要整个武林大会，整几个NB的武功和大师，分个正派和反派，还有一个或数个惊天阴谋，坏人总是要在一开始占尽优势，好人总是要力挽狂澜……\n言情小说总是要有第三者，总是要有负心人，里面的女子总是要哭得死去活来，但又痴心不改，……\n\n\n 新闻联播的模式是：头10分钟领导很忙，中间10分钟人民很幸福，后10分钟国外很乱。中国政府官方宣传稿也模式也很明显，各种赞美，口号，胜利，总是要坚持个什么，团结个什么，迈向个什么，某某精神，某某思想，群众情绪稳定，不明真相，等等……\n春节的模式是，回家，吃饺子，放个鞭炮，给压岁钱，同学聚会…… 同学聚会的模式基本上都是在饭桌上回忆一下校园时光，比较一下各自的当前处境，调戏一下女同学……\n…… ……\n\n这就是Pattern，只要你细心观察，你会发现这世间有很多很多的Pattern。\n …\n 阅读全文 Read More\n\n (51 人打了分，平均分： 4.18 )Loading...\n"
  },
  {
    "content": "",
    "title": "应该知道的Linux技巧",
    "url": "https://coolshell.cn/articles/8883.html",
    "date": "2013-01-09T08:24:29+08:00",
    "description": "\n这篇文章来源于Quroa的一个问答《What are some time-saving tips that every Linux user should know?》—— Linux用户有哪些应该知道的提高效率的技巧。我觉得挺好的，总结得比较好，把其转过来，并加了一些自己的理解。 首先，我想告诉大家，在Unix/Linux下，最有效率技巧的不是操作图形界面，而是命令行操作，因为命令行意味着自动化。如果你看过《你可能不知道的Shell》以及《28个Unix/Linux的命令行神器》你就会知道Linux有多强大，这个强大完全来自于命令行，于是，就算你不知道怎么去做一个环保主义的程序员，至少他们可以让你少熬点夜，从而有利于你的身体健康和性生活。下面是一个有点长的列表，正如作者所说，你并不需要知道所有的这些东西，但是如果你还在很沉重地在使用Linux的话，这些东西都值得你看一看。 （注：如果你想知道下面涉及到的命令的更多的用法，你一定要man一点。对于一些命令，你可以需要先yum或apt-get来安装一下，如果有什么问题，别忘了Google。如果你要Baidu的话，我仅代表这个地球上所有的生物包括微生物甚至细菌病毒和小强BS你到宇宙毁灭）\n基础\n\n学习 Bash 。你可以man bash来看看bash的东西，并不复杂也并不长。你用别的shell也行，但是bash是很强大的并且也是系统默认的。（学习zsh或tsch只会让你在很多情况下受到限制）\n\n\n学习 vim 。在Linux下，基本没有什么可与之竞争的编译辑器（就算你是一个Emacs或Eclipse的重度用户）。你可以看看《简明vim攻略》和 《Vim的冒险游戏》以及《给程序员的Vim速查卡》还有《把Vim变成一个编程的IDE》等等。\n\n\n了解 ssh。明白不需要口令的用户认证（通过ssh-agent, ssh-add），学会用ssh翻墙，用scp而不是ftp传文件，等等。你知道吗？scp 远端的时候，你可以按tab键来查看远端的目录和文件（当然，需要无口令的用户认证），这都是bash的功劳。\n\n …\n 阅读全文 Read More\n\n (79 人打了分，平均分： 4.41 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序算法与人生选择",
    "url": "https://coolshell.cn/articles/8790.html",
    "date": "2012-12-28T09:00:50+08:00",
    "description": "\n每年一到要找工作的时候，我就能收到很多人给我发来的邮件，总是问我怎么选择他们的offer，去腾讯还是去豆瓣，去外企还是去国内的企业，去创业还是去考研，来北京还是回老家，该不该去创新工场？该不该去thoughtworks？……等等，等等。今年从7月份到现在，我收到并回复了60多封这样的邮件。我更多帮他们整理思路，帮他们明白自己最想要的是什么。（注：我以后不再回复类似的邮件了）。\n我深深地发现，对于我国这样从小被父母和老师安排各种事情长大的人，当有一天，父母和老师都跟不上的时候，我们几乎完全不知道怎么去做选择。而我最近也离开了亚马逊，换了一个工作。又正值年底，就像去年的那篇《三个故事和三个问题》一样，让我想到写一篇这样的文章。\n几个例子\n当我们在面对各种对选择的影响因子的时候，如：城市，公司规模，公司性质，薪水，项目，户口，技术，方向，眼界…… 你总会发现，你会在几个公司中纠结一些东西，举几个例子：\n\n某网友和我说，他们去上海腾讯，因为腾讯的规模很大，但却发现薪水待遇没有豆瓣高（低的还不是一点），如果以后要换工作的话，起薪点直接关系到了以后的高工资。我说那就去豆瓣吧，他说豆瓣在北京，污染那么严重，又没有户口，生存环境不好。我说去腾讯吧，他说腾讯最近组织调整，不稳定。我说那就去豆瓣吧，慢公司，发展很稳当。他说，豆瓣的盈利不清楚，而且用Python，自己不喜欢。我说，那就去腾讯吧，……\n\n\n还有一网友和我说，他想回老家，因为老家的人脉关系比较好，能混得好。但又想留在大城市，因为大城市可以开眼界。\n\n …\n 阅读全文 Read More\n\n (147 人打了分，平均分： 4.79 )Loading...\n"
  },
  {
    "content": "",
    "title": "Web工程师的工具箱",
    "url": "https://coolshell.cn/articles/8767.html",
    "date": "2012-12-19T00:04:43+08:00",
    "description": "\n本文出自Ivan Zuzak 的《The Web engineer’s online toolbox》，作者给了一个各种可以用来进行开发、测试、调试以及文档编排的在线工具集。（注：我发现CSDN上已经有了这篇文章《Web工程师必备的18款工具》，但可惜的是这篇文章并不全（原文后来被更新到了33个工具），而且其中并没有包括原文评论中出现的所有工具，所以，我一并补全了更出来，一共40多个工具）\nWeb工程师在线工具箱\n\nRequestBin：允许你创建一个URL，利用这款工具进行收集请求，然后通过个性化方式进行检查。\n\n\nHurl：发出HTTP请求，输入URL，设置标题，查看响应，最后分享给其他人。类似的工具有：REST test test, Apigee console.。\n\n\nHttpbin：HTTP请求&响应服务，涵盖所有的HTTP方案（例如不同的HTTP verbs、状态代码和重定向）。类似工具：UrlEcho。\n\n\nREDbot：这是一个机器人工具，帮助用户检查HTTP资源，可查看它的操作情况，指出常见的问题并提出改进。类似工具：HTTP lint。\n\n\nWebGun：用于创建webhooks模板的API。类似工具：UrlReq。\n\n\nWebscript  自选一个url，填一段Lua代码，就能对访问做各种respond，还可以主动运行任务，cron job等等…\n\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 3.96 )Loading...\n"
  },
  {
    "content": "",
    "title": "如此理解面向对象编程",
    "url": "https://coolshell.cn/articles/8745.html",
    "date": "2012-12-13T08:19:28+08:00",
    "description": "\n从Rob Pike 的 Google+上的一个推看到了一篇叫《Understanding Object Oriented Programming》的文章，我先把这篇文章简述一下，然后再说说老牌黑客Rob Pike的评论。\n先看这篇教程是怎么来讲述OOP的。它先给了下面这个问题，这个问题需要输出一段关于操作系统的文字：假设Unix很不错，Windows很差。\n这个把下面这段代码描述成是Hacker Solution。（这帮人觉得下面这叫黑客？我估计这帮人真是没看过C语言的代码）\npublic class PrintOS\n{\n\tpublic static void main(final String[] args)\n\t{\n\t\tString osName = System.getProperty(\"os.name\") ;\n\t\tif (osName.equals(\"SunOS\") || osName.equals(\"Linux\"))\n\t\t{\n\t\t\tSystem.out.println(\"This is a UNIX box and therefore good.\") ;\n\t\t}\n\t\telse if (osName.equals(\"Windows NT\") || osName.equals(\"Windows 95\"))\n\t\t{\n\t\t\tSystem.out.println(\"This is a Windows box and therefore bad.\") ;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tSystem.out.println(\"This is not a box.\") ;\n\t\t}\n\t}\n}\n然后开始用面向对象的编程方式一步一步地进化这个代码。\n先是以过程化的思路来重构之。\n …\n 阅读全文 Read More\n\n (61 人打了分，平均分： 4.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员疫苗：代码注入",
    "url": "https://coolshell.cn/articles/8711.html",
    "date": "2012-12-10T08:34:48+08:00",
    "description": "\n几个月在我的微博上说过要建一个程序员疫苗网站，希望大家一起来提交一些错误示例的代码，来帮助我们新入行的程序员，不要让我们的程序员一代又一代的再重复地犯一些错误。很多程序上错误就像人类世界的病毒一样，我们应该给我们的新入行的程序员注射一些疫苗，就像给新生儿打疫苗一样，希望程序员从入行时就对这些错误有抵抗力。\n我的那个疫苗网站正在建议中（不好意思拖了很久），不过，我可以先写一些关于程序员疫苗性质的文章，也算是热热身。希望大家喜欢，先向大家介绍第一注疫苗——代码注入。\nShell注入\n我们先来看一段perl的代码：\n[perl]use CGI qw(:standard);\n$name = param(‘name’);\n$nslookup = \"/path/to/nslookup\";\nprint header;\nif (open($fh, \"$nslookup $name|\")) {\n  while (<$fh>) {\nprint escapeHTML($_);\nprint \"<br>\\n\";\n}\nclose($fh);\n}[/perl]\n如果用户输入的参数是：\ncoolshell.cn%20%3B%20/bin/ls%20-l\n那么，这段perl的程序就成了：\n …\n 阅读全文 Read More\n\n (40 人打了分，平均分： 4.15 )Loading...\n"
  },
  {
    "content": "",
    "title": "你可能不知道的Shell",
    "url": "https://coolshell.cn/articles/8619.html",
    "date": "2012-11-23T08:19:24+08:00",
    "description": "\nShell也叫做命令行界面，它是*nix操作系统下用户和计算机的交互界面。Shell这个词是指操作系统中提供访问内核服务的程序。\n这篇文章向大家介绍Shell一些非广为人知、但却实用有趣的知识，权当品尝shell主食后的甜点吧。\n科普\n先科普几个你可能不知道的事实：\n\nShell几乎是和Unix操作系统一起诞生，第一个Unix Shell是肯·汤普逊（Ken Thompson）以Multics上的Shell为模范在1971年改写而成，并命名Thompson sh。即便是后来流行的bash（shell的一种变体），它的年龄实际上比当前流行的所有的Linux kernel都大，可谓在Linux系统上是先有Shell再有Kernel。\n\n\n当前绝大部分*nix和MacOS操作系统里的默认的Shell都是bash，bash由Brian Fox在1987年创造，全称Bourne Again shell ( bash)。\n\n\n你或许听说除了bash之外，还有Bourne shell ( sh)，Korn shell ( ksh)，C shell （包括 csh and tcsh），但是你知道这个星球上一共存在着大约50多种不同的shell么？想了解他们，请参考 http://www.freebsd.org/ports/shells.html。\n\n\n每个月tiobe上都会给一个编程语言的排名，来显示各种语言的流行度。排名指数综合了全球范围内使用该语言的工程师人数、教学的课程数和第三方供应商数。截止至2012年11月份，tiobe公布的编程语言排行榜里，bash的指数是0.56%排名22位。如果算上它旗下的awk 0.21%和tcl 0.146%，大概就能排到14名。注意这里还不包括bash的同源的兄弟姐妹csh、ksh等，算上它们，shell家族有望接近前十。值得一提的是一直以来shell的排名就很稳定，不像某些“暴发户”语言，比如objective-c，这些语言的流行完全是因为当前Apple系的崛起，但这种热潮极有可能来得快去得更快。\n\n …\n 阅读全文 Read More\n\n (33 人打了分，平均分： 4.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何测试洗牌程序",
    "url": "https://coolshell.cn/articles/8593.html",
    "date": "2012-11-20T08:22:07+08:00",
    "description": "\n我希望本文有助于你了解测试软件是一件很重要也是一件不简单的事。\n我们有一个程序，叫ShuffleArray()，是用来洗牌的，我见过N多千变万化的ShuffleArray()，但是似乎从来没人去想过怎么去测试这个算法。所以，我在面试中我经常会问应聘者如何测试ShuffleArray()，没想到这个问题居然难倒了很多有多年编程经验的人。对于这类的问题，其实，测试程序可能比算法更难写，代码更多。而这个问题正好可以加强一下我在《我们需要专职的QA吗？》中我所推崇的——开发人员更适合做测试的观点。\n我们先来看几个算法（第一个用递归二分随机抽牌，第二个比较偷机取巧，第三个比较通俗易懂）\n递归二分随机抽牌\n有一次是有一个朋友做了一个网页版的扑克游戏，他用到的算法就是想模拟平时我们玩牌时用手洗牌的方式，是用递归+二分法，我说这个程序恐怕不对吧。他觉得挺对的，说测试了没有问题。他的程序大致如下（原来的是用Javascript写的，我在这里凭记忆用C复现一下）：\n\n//递归二分方法\nconst size_t MAXLEN = 10;\nconst char TestArr[MAXLEN] = {'A','B','C','D','E','F','G','H','I','J'};\n\nstatic char RecurArr[MAXLEN]={0};\nstatic int cnt = 0;\nvoid ShuffleArray_Recursive_Tmp(char* arr, int len)\n{\n    if(cnt > MAXLEN || len <=0){\n        return;\n    }\n\n    int pos = rand() % len;\n    RecurArr[cnt++] = arr[pos];\n    if (len==1) return;\n    ShuffleArray_Recursive_Tmp(arr, pos);\n    ShuffleArray_Recursive_Tmp(arr+pos+1, len-pos-1);\n}\n\nvoid ShuffleArray_Recursive(char* arr, int len)\n{\n    memset(RecurArr, 0, sizeof(RecurArr));\n    cnt=0;\n    ShuffleArray_Recursive_Tmp(arr, len);\n    memcpy(arr, RecurArr, len);\n}\n\nvoid main()\n{\n    char temp[MAXLEN]={0};\n    for(int i=0; i<5; i++) {\n        strncpy(temp, TestArr, MAXLEN);\n        ShuffleArray_Recursive((char*)temp, MAXLEN);\n    }\n}\n\n …\n 阅读全文 Read More\n\n (30 人打了分，平均分： 4.10 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go 语言简介（下）— 特性",
    "url": "https://coolshell.cn/articles/8489.html",
    "date": "2012-11-07T08:17:20+08:00",
    "description": "\n希望你看到这篇文章的时候还是在公交车和地铁上正在上下班的时间，我希望我的这篇文章可以让你利用这段时间了解一门语言。当然，希望你不会因为看我的文章而错过站。呵呵。\n如果你还不了解Go语言的语法，还请你移步先看一下上篇——《Go语言简介（上）：语法》\n\ngoroutine\nGoRoutine主要是使用go关键字来调用函数，你还可以使用匿名函数，如下所示：\n …\n 阅读全文 Read More\n\n (34 人打了分，平均分： 4.24 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go 语言简介（上）— 语法",
    "url": "https://coolshell.cn/articles/8460.html",
    "date": "2012-11-06T08:27:48+08:00",
    "description": "\n周末天气不好，只能宅在家里，于是就顺便看了一下Go语言，觉得比较有意思，所以写篇文章介绍一下。我想写一篇你可以在乘坐地铁或公交车上下班时就可以初步了解一门语言的文章。所以，下面的文章主要是以代码和注释为主。只需要你对C语言，Unix，Python有一点基础，我相信你会在30分钟左右读完并对Go语言有一些初步了解的。\n\nHello World\n\n//文件名：hello.go\npackage main //声明本文件的package名\n\nimport \"fmt\" //import语言的fmt库——用于输出\n\nfunc main() {\n    fmt.Println(\"hello world\")\n}\n …\n 阅读全文 Read More\n\n (39 人打了分，平均分： 4.38 )Loading...\n"
  },
  {
    "content": "",
    "title": "TF-IDF模型的概率解释",
    "url": "https://coolshell.cn/articles/8422.html",
    "date": "2012-10-24T09:05:54+08:00",
    "description": "\n（感谢 @猫叔shiro（以前的todd） 投递此文）\n信息检索概述\n信息检索是当前应用十分广泛的一种技术，论文检索、搜索引擎都属于信息检索的范畴。通常，人们把信息检索问题抽象为：在文档集合D上，对于由关键词w[1] … w[k]组成的查询串q，返回一个按查询q和文档d匹配度relevance(q, d)排序的相关文档列表D’。\n对于这一问题，先后出现了布尔模型、向量模型等各种经典的信息检索模型，它们从不同的角度提出了自己的一套解决方案。布尔模型以集合的布尔运算为基础，查询效率高，但模型过于简单，无法有效地对不同文档进行排序，查询效果不佳。向量模型把文档和查询串都视为词所构成的多维向量，而文档与查询的相关性即对应于向量间的夹角。不过，由于通常词的数量巨大，向量维度非常高，而大量的维度都是0，计算向量夹角的效果并不好。另外，庞大的计算量也使得向量模型几乎不具有在互联网搜索引擎这样海量数据集上实施的可行性。\ntf-idf模型\n目前，真正在搜索引擎等实际应用中广泛使用的是tf-idf模型。tf-idf模型的主要思想是：如果词w在一篇文档d中出现的频率高，并且在其他文档中很少出现，则认为词w具有很好的区分能力，适合用来把文章d和其他文章区分开来。该模型主要包含了两个因素：\n …\n 阅读全文 Read More\n\n (21 人打了分，平均分： 3.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "xkcd 神图“Click and Drag”",
    "url": "https://coolshell.cn/articles/8398.html",
    "date": "2012-10-16T08:15:44+08:00",
    "description": "\nxkcd对于经常浏览国外网站的朋友一定不会陌生。不过，还是先让我来介绍一下xkcd（维基百科词条）。这是一个漫画网站，它主要是发布一些很简单的随手画的漫画，它主要有四种体裁——浪漫、讽刺、数学 和 语言。也会经常出现一些和IT有关的漫画，比如下面这个漫画—— （懂Unix的人一眼就看懂了，不懂的怎么看也看不懂）\n\n本质上来说，xkcd是一种Geek文化，里面的东西都非常的Geek和晦涩，讽刺很辛辣，但很多只有特定人群可以看得懂。而且表达的形式自由到天马行空，飘忽不定。\n …\n 阅读全文 Read More\n\n (43 人打了分，平均分： 4.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "Bret Victor – Learnable Programming",
    "url": "https://coolshell.cn/articles/8387.html",
    "date": "2012-10-14T16:37:04+08:00",
    "description": "\n大家是否还记得之前酷壳向大家介绍的苹果设计师Bret Victor一种可视编程的视频《Bret Victor – Inventing on Principle》，最近，他写了一篇文章—— Learnable Programming，写这篇文章的原因是因为“可汗学院(Khan Academy)”近期上线的一个在线编程环境，根据他的演讲提供了一堆基于Javascript的“实时编程”的环境，因为这个环境是引用了他的想法，所以，他有必要出来喷两句。\n这篇文章的开头就是一个问题——“How do we get people to understand programming?”，我们怎么让人们懂得编程？\n\n然后，他说了两条——\n\n编程是一种思考，而不是一种死记硬背的技能！你学会了“for循环”并不是说你就学会了编程，这就好像你知道有铅笔这个东西，但是你对绘画还是什么不懂。（对于这一条，正好这两天我在微博上和人辩论“基础算法面试题是否好”（还有微博一，微博二），而且我以前也写过一篇《为什么我反对纯算法面试》，这里借用Bret的话再加强一下我的观点——“我们一方面在骂中国的应试教育毁了学生，另一方面我们又在把我们的面试变成“考八股文”式的考试！  你会qsort有什么用？你只不过是会用一支高级铅笔而已罢了。”）\n\n\n人只有看得见，才能理解。如果一个程序员不能看到他的程序在干什么，那么她就不能理解程序。（对于这一条，让我想到了Donald Knuth的话——“An algorithm must be seen to be believe!”）\n\n所以，Bret 觉得编程软件的目标是——\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 3.92 )Loading...\n"
  },
  {
    "content": "",
    "title": "C/C++语言中闭包的探究及比较",
    "url": "https://coolshell.cn/articles/8309.html",
    "date": "2012-09-20T08:17:07+08:00",
    "description": "\n（感谢投稿人 @思禽饮霜 ）\n这里主要讨论的是C语言的扩展特性block。该特性是Apple为C、C++、Objective-C增加的扩展，让这些语言可以用类Lambda表达式的语法来创建闭包。前段时间，在对CoreData存取进行封装时（让开发人员可以更简洁快速地写相关代码），我对block机制有了进一步了解，觉得可以和C++ 11中的Lambda表达式相互印证，所以最近重新做了下整理，分享给大家。\n0. 简单创建匿名函数\n下面两段代码的作用都是创建匿名函数并调用，输出Hello, World语句。分别使用Objective-C和C++ 11：\n^{ printf(\"Hello, World!\\n\"); } ();\n[] { cout << \"Hello, World\" << endl; } ();\nLambda表达式的一个好处就是让开发人员可以在需要的时候临时创建函数，便捷。\n在创建闭包（或者说Lambda函数）的语法上，Objective-C采用的是上尖号^，而C++ 11采用的是配对的方括号[]。\n不过“匿名函数”一词是针对程序员而言的，编译器还是采取了一定的命名规则。\n比如下面Objective-C代码中的3个block，\n\n#import <Foundation/Foundation.h>\n\nint (^maxBlk)(int , int) = ^(int m, int n){ return m > n ? m : n; };\n\nint main(int argc, const char * argv[])\n{\n    ^{ printf(\"Hello, World!\\n\"); } ();\n\n    int i = 1024;\n    void (^blk)(void) = ^{ printf(\"%d\\n\", i); };\n    blk();\n\n    return 0;\n}\n\n会产生对应的3个函数：\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 3.89 )Loading...\n"
  },
  {
    "content": "",
    "title": "对九个超级程序员的采访",
    "url": "https://coolshell.cn/articles/8275.html",
    "date": "2012-09-14T08:29:54+08:00",
    "description": "\n原文：《Q&A With Nine Great Programmers》时间有限，我只能粗译，难免错误。\n这篇访谈源自2006年，最先发布在波兰程序员 Jaroslaw “sztywny” Rzeszótko (AKA “Stiff”) 的博客上。但是这篇博文现在找不到了。非常感谢他能授权我重新发布这个博文。\n在一个炎热无聊的下午，我突发奇想。我想通过电子邮件的方式对那些我非常感兴趣和非常敬重的程序员问10个问题。准备这10个问题我只花了5分钟，这些都是我个人想问他们的问题，所以，我基本上没想太多要问他们什么。最后两个问题和编程没有什么关系，我就是想问题这些人的一些兴趣爱好。另外，不是每一个人都想回答我的，这是我第一次做“访谈”，所以，我犯了一些错误，一些问题没有得到回答。不管怎么样，我得到了很多很有意思的内容，所以，这对我绝对是一次很有意义的经历。\n\n并不是每一个人都回了我的邮件，也并不是每一个人都同意回答我的这些问题，也许在我发布这篇文章后我会得到那些回答，但是我已经迫不及待想把这些东西发布了，所以，我可能会更新这篇文章（更新：2006年3月8日，我收到了Bjarne Stroustrup的回信）\n— Jaroslaw\n介绍\n\nLinus Torvalds – Linux kernel 作者。\n\n\nDave Thomas – “Pragmatic Programmer”(注：douban) 和 “Programming Ruby”(注：douban) 以及其它一些优秀书籍的作者。 你可以在 这里 读读他对编程的一些想法。\n\n\nDavid Heinemeier Hansson –   Rails Framework 作者- 一个目前最新最热的Web开发框架。他的blog在 这里. （陈皓注：他也是37signals的领导人之一）\n\n\nSteve Yegge – 他可能并不那么知名，但是他给了很多有意思的回答。他有一个很火的关于编程的 blog，他也是游戏 “Wyvern” 的作者。（陈皓注：他最火的是去年在google+上对google和amazon的吐槽，06年他应该在google了）\n\n\nPeter Norvig – Research Director at Google, 知名的 Lisper，AI书的著名作家，个人主页。\n\n\nGuido Van Rossum – Python 发明者。\n\n\nBjarne Stroustrup – C++发明者， 个人主页。\n\n\nJames Gosling –  Java 发明者。\n\n\nTim Bray –  XML 和 Atom 规格说明书作者之一 个人博客 。\n\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.04 )Loading...\n"
  },
  {
    "content": "",
    "title": "无锁队列的实现",
    "url": "https://coolshell.cn/articles/8239.html",
    "date": "2012-09-07T08:26:55+08:00",
    "description": "\n————注：本文于2019年11月4日更新————\n关于无锁队列的实现，网上有很多文章，虽然本文可能和那些文章有所重复，但是我还是想以我自己的方式把这些文章中的重要的知识点串起来和大家讲一讲这个技术。下面开始正文。\n关于CAS等原子操作\n在开始说无锁队列之前，我们需要知道一个很重要的技术就是CAS操作——Compare & Set，或是 Compare & Swap，现在几乎所有的CPU指令都支持CAS的原子操作，X86下对应的是 CMPXCHG 汇编指令。有了这个原子操作，我们就可以用其来实现各种无锁（lock free）的数据结构。\n这个操作用C语言来描述就是下面这个样子：（代码来自Wikipedia的Compare And Swap词条）意思就是说，看一看内存*reg里的值是不是oldval，如果是的话，则对其赋值newval。\n\nint compare_and_swap (int* reg, int oldval, int newval)\n{\n  int old_reg_val = *reg;\n  if (old_reg_val == oldval) {\n     *reg = newval;\n  }\n  return old_reg_val;\n}\n\n我们可以看到，old_reg_val 总是返回，于是，我们可以在 compare_and_swap 操作之后对其进行测试，以查看它是否与 oldval相匹配，因为它可能有所不同，这意味着另一个并发线程已成功地竞争到 compare_and_swap 并成功将 reg 值从 oldval 更改为别的值了。\n这个操作可以变种为返回bool值的形式（返回 bool值的好处在于，可以调用者知道有没有更新成功）：\nbool compare_and_swap (int *addr, int oldval, int newval)\n{\n  if ( *addr != oldval ) {\n      return false;\n  }\n  *addr = newval;\n  return true;\n}\n与CAS相似的还有下面的原子操作：（这些东西大家自己看Wikipedia，也没什么复杂的）\n\nFetch And Add，一般用来对变量做 +1 的原子操作\nTest-and-set，写值到某个内存位置并传回其旧值。汇编指令BST\nTest and Test-and-set，用来低低Test-and-Set的资源争夺情况\n\n注：在实际的C/C++程序中，CAS的各种实现版本如下：\n …\n 阅读全文 Read More\n\n (53 人打了分，平均分： 4.21 )Loading...\n"
  },
  {
    "content": "",
    "title": "“单元测试要做多细？”",
    "url": "https://coolshell.cn/articles/8209.html",
    "date": "2012-09-03T08:13:31+08:00",
    "description": "\n这篇文章主要来源是StackOverflow上的一个回答——“How deep are your unit tests?”。一个有13.8K的分的人（John Nolan）问了个关于TDD的问题，这个问题并不新鲜，最亮的是这个问题的Best Answer，这个问题是——\n“TDD需要花时间写测试，而我们一般多少会写一些代码，而第一个测试是测试我的构造函数有没有把这个类的变量都设置对了，这会不会太过分了？那么，我们写单元测试的这个单元的粒度到底是什么样的？并且，是不是我们的测试测试得多了点？”\n答案\nStackOverflow上，这个问题的答案是这样的——\n“I get paid for code that works, not for tests, so my philosophy is to test as little as possible to reach a given level of confidence (I suspect this level of confidence is high compared to industry standards, but that could just be hubris). If I don’t typically make a kind of mistake (like setting the wrong variables in a constructor), I don’t test for it. I do tend to make sense of test errors, so I’m extra careful when I have logic with complicated conditionals. When coding on a team, I modify my strategy to carefully test code that we, collectively, tend to get wrong.”\n老板为我的代码付报酬，而不是测试，所以，我对此的价值观是——测试越少越好，少到你对你的代码质量达到了某种自信（我觉得这种的自信标准应该要高于业内的标准，当然，这种自信也可能是种自大）。如果我的编码生涯中不会犯这种典型的错误（如：在构造函数中设了个错误的值），那我就不会测试它。我倾向于去对那些有意义的错误做测试，所以，我对一些比较复杂的条件逻辑会异常地小心。当在一个团队中，我会非常小心的测试那些会让团队容易出错的代码。\n这个回答对TDD似乎有一种否定，最亮的是这个问题是由Kent Beck，Kent是XP和TDD的创造者，是敏捷开发实践方法的奠基人。以致于还有人调侃到——\n …\n 阅读全文 Read More\n\n (29 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "一次Ajax查错的经历",
    "url": "https://coolshell.cn/articles/8170.html",
    "date": "2012-08-27T14:56:59+08:00",
    "description": "\n先说故事，再说想法吧。\n我有一朋友做网站，用jQuery的Ajax方法从后端载入一段HTML代码然后动态插入到网页的Div元件中。这个东西太普遍了。jQuery强大的load方法可以完成这个事情。朋友的代码是这么写的：\n[javascript]var tab = jQuery(\"#dynamic_tab\");\nvar url = \"/list_ajax/\";\ntab.load(url);[/javascript]\n简单到不能再简单了。在Chrome，Firefox，Safari下运行一点问题也没有，只有IE不行，不管是IE7，IE8，还是IE9。问题的症壮是，使用IE访问那个Ajax的链接，没有问题，但是在jQuery的Ajax方法返回了“undefined”的respons对象。没有任何报错！\n怎么搞也搞不定，只好Google了一下——“jQuery load IE”，一看，很多人都在问这个问题。于是开始了散弹枪编程方式。\n排在第一的就是StackOverflow被浏览了33K次的这个问题：jQuery’s .load() not working in IE – but fine in Firefox, Chrome and Safari，答案没有被打勾（不靠谱），StackOverflow还有很多人问相似的问题，不过都没有答案。不管三七二十一，先试了一下，散弹枪嘛。试了半天都没有用。\n然后上Google查，又看到有人说的IE缓存的问题，什么，要把cache设置成false，或是用下面的方法来解决：\n[javascript]var tab = jQuery(\"#dynamic_tab\");\nvar fuckie = Math.random();\nvar url = \"/list_ajax/\"+\"?fuckie=\"+fuckie;\ntab.load(url);[/javascript]\n反正还是一样，统统不Work，几乎所有的都试了，都不Work。搞了一天的朋友恼怒道：“Microsoft应该快点倒闭吧，产品太烂了”。IE的确是太烂了。\n …\n 阅读全文 Read More\n\n (32 人打了分，平均分： 3.88 )Loading...\n"
  },
  {
    "content": "",
    "title": "为什么我反对纯算法面试题",
    "url": "https://coolshell.cn/articles/8138.html",
    "date": "2012-08-22T08:20:18+08:00",
    "description": "\n算法面试可能是微软搞出来的面试方法，现在很多公司都在效仿，而且我们的程序员也乐于解算法题，我个人以为，这是应试教育的毒瘤！我在《再谈“我是怎么招程序员”》中比较保守地说过，“问难的算法题并没有错，错的很多面试官只是在肤浅甚至错误地理解着面试算法题的目的。”，今天，我想加强一下这个观点——我反对纯算法题面试！（注意，我说的是纯算法题）\n图片源Wikipedia（点击图片查看词条）\n我再次引用我以前的一个观点——\n能解算法题并不意味着这个人就有能力就能在工作中解决问题，你可以想想，小学奥数题可能比这些题更难，但并不意味着那些奥数能手就能解决实际问题。\n好了，让我们来看一个示例（这个示例是昨天在微博上的一个讨论），这个题是——“找出无序数组中第2大的数”，几乎所有的人都用了O(n)的算法，我相信对于我们这些应试教育出来的人来说，不用排序用O(n)算法是很正常的事，连我都不由自主地认为O(n)算法是这个题的标准答案。我们太习惯于标准答案了，这是我国教育最悲哀的地方。（广义的洗脑就是让你的意识依赖于某个标准答案，然后通过给你标准答案让你不会思考而控制你）\n功能性需求分析\n试想，如果我们在实际工作中得到这样一个题 我们会怎么做？我一定会分析这个需求，因为我害怕需求未来会改变，今天你叫我找一个第2大的数，明天你找我找一个第4大的数，后天叫我找一个第100大的数，我不搞死了。需求变化是很正常的事。分析完这个需求后，我会很自然地去写找第K大数的算法——难度一下子就增大了。\n …\n 阅读全文 Read More\n\n (54 人打了分，平均分： 4.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "GCC 用 C++ 来编译",
    "url": "https://coolshell.cn/articles/8115.html",
    "date": "2012-08-20T08:40:04+08:00",
    "description": "\nGCC在2012年8月15日的时候，merge了一个patch – Merge from cxx-conversion branch，这意味着，以后在GCC的编译只能用C++的编译器了，也意味着，gcc的实现代码开始转向C++了。\n你可能会有两个问题，\n\n一个问题是为什么GCC要转成C++的实现？\n\n\n没有C++的编译器，我怎么编译C++编译器的代码？这不是“鸡生蛋还是蛋生鸡”的问题么？\n\n那，我们来看一看吧。\n为什么要用C++\n在GNU的C++ Conversion文档中，我们可以在Background中看到这样的描述：\nWhether we use C or C++, we need to try to ensure that interfaces are easy to understand, that the code is reasonably modular, that the internal documentation corresponds to the code, that it is possible for new developers to write new passes and to fix bugs. Those are the important issues for us to consider. The C++ features which are not present in C — features which are well documented in many books and many web sites — are not an important issue.\n这句话的意思可以理解为，今天GCC在用C语言的实现已经有点hold不住了，因为，开发人员觉得，不管我们用C或C++，都需要努力确保接口是容易理解的，这样我们的代码是想当理性地被模块化的，这样内部文档和代码一致，这样可以更好地组织代码，这样有利于新人了fix-bug。而C++正好可以让他们更好的完成这些东西。\nGNU还给出了下面这些理由：\n …\n 阅读全文 Read More\n\n (22 人打了分，平均分： 3.59 )Loading...\n"
  },
  {
    "content": "",
    "title": "K Nearest Neighbor 算法",
    "url": "https://coolshell.cn/articles/8052.html",
    "date": "2012-08-17T08:15:30+08:00",
    "description": "\nK Nearest Neighbor算法又叫KNN算法，这个算法是机器学习里面一个比较经典的算法， 总体来说KNN算法是相对比较容易理解的算法。其中的K表示最接近自己的K个数据样本。KNN算法和K-Means算法不同的是，K-Means算法用来聚类，用来判断哪些东西是一个比较相近的类型，而KNN算法是用来做归类的，也就是说，有一个样本空间里的样本分成很几个类型，然后，给定一个待分类的数据，通过计算接近自己最近的K个样本来判断这个待分类数据属于哪个分类。你可以简单的理解为由那离自己最近的K个点来投票决定待分类数据归为哪一类。\nWikipedia上的KNN词条中有一个比较经典的图如下：\n\n从上图中我们可以看到，图中的有两个类型的样本数据，一类是蓝色的正方形，另一类是红色的三角形。而那个绿色的圆形是我们待分类的数据。\n\n如果K=3，那么离绿色点最近的有2个红色三角形和1个蓝色的正方形，这3个点投票，于是绿色的这个待分类点属于红色的三角形。\n\n\n如果K=5，那么离绿色点最近的有2个红色三角形和3个蓝色的正方形，这5个点投票，于是绿色的这个待分类点属于蓝色的正方形。\n\n我们可以看到，机器学习的本质——是基于一种数据统计的方法！那么，这个算法有什么用呢？我们来看几个示例。\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 3.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "对技术的态度",
    "url": "https://coolshell.cn/articles/8088.html",
    "date": "2012-08-16T23:50:25+08:00",
    "description": "\n最近人品爆发，图灵社区，InfoQ，51CTO相继对我做了采访，前两天我把InfoQ对我的采访张贴了出来，今天，图灵社区和51CTO对我的采访发布了（图灵的访谈 ，51CTO的访谈），我是一个有技术焦虑症的人，我的经历比较特殊，对大家来说可能也没有什么意思，这两个采都有一些重叠的部分，不过有些观点我想再加强一些，并放在这里和大家一起分享一下。\n对于日新月异的新技术，你是什么态度？\n遇到新技术我会去了解，但不会把很大的精力放在这些技术（如：NoSQL，Node.js，等）。这些技术尚不成熟，只需要跟得住就可以了。技术十年以上可能是一个门槛。有人说技术更新换代很快，我一点儿都不觉得是这样想。虽然有不成熟的技术不断地涌出，但是成熟的技术，比如Unix，40多年，C，40多年，C++，30多年，TCP/IP，20多年，Java也有将近20年了……，所以，如果你着眼成熟的技术，其实并不多。\n我的观点是——要了解技术就一定需要了解整个计算机的技术历史发展和进化路线。（这个观点，我在《程序员练级攻略》和《C++的坑多吗？》中提到过多次了。）因为，你要朝着球运动的轨迹去，而不是朝着球的位置去，要知道球的运动轨迹，你就需要知道它历史上是怎么跑的。\n如果要捋一个技术的脉络，70年代Unix的出现，是软件发展方面的一个里程碑，那个时期的C语言，也是语言方面的里程碑。（当时）所有的项目都在Unix/C上，全世界人都在用这两样东西写软件。Linux跟随的是Unix, Windows下的开发也是 C/C++。这时候出现的C++很自然就被大家接受了，企业级的系统很自然就会迁移到这上面，C++虽然接过了C的接力棒，但是它的问题是它没有一个企业方面的架构，而且太随意了，否则也不会有今天的Java。C++和C非常接近，它只不过是C的一个扩展，长年没有一个企业架构的框架。而Java在被发明后，被IBM把企业架构这部分的需求接了过来，J2EE的出现让C/C++捉襟见肘了，在语言进化上，还有Python/Ruby，后面还有了.NET，但可惜的是这只局限在Windows平台上。这些就是企业级软件方面语言层面就是C -> C++ -> Java这条主干，操作系统是Unix -> Linux/Windows这条主干，软件开发中需要了解的网络知识就是Ethernet -> IP -> TCP/UDP 这条主干。另外一条脉络就是互联网方面的（HTML/CSS/JS/LAMP…）。我是一个有技术忧虑症的人，这几条软件开发的主线一定不能放弃。\n另外，从架构上来说，我们可以看到，\n …\n 阅读全文 Read More\n\n (43 人打了分，平均分： 4.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "InfoQ的ArchSummit大会对我的采访",
    "url": "https://coolshell.cn/articles/8031.html",
    "date": "2012-08-12T16:02:28+08:00",
    "description": "\n偷个懒，做个更新，今天下午InfoQ的ArchSummit对我的一些采访。我整理了一下，算做是我个人写酷壳的一些想法和总结。不过问我的这些问题并不尖锐，呵呵，不像@图灵谢工 问我的问题：“你的价值观太过理想，根本不现实，你站在道德的高点拷问社会，是不是想炒作自己？”。\n1) 作为酷壳的博主，请您大概介绍下酷壳是什么时候开始的，初衷是什么 ？\n我写blog是从2002年开始（那时还没有blog这个词），当时对我来说，没有自己的电脑，上网很不方便，而我有写学习笔记的习惯，读书和工作中学到的一些东西需要保存在某个地方，我希望这个地方可以让我在任何地方都可以调出来看看（因为我当时的工作出差太多），正好当时的CSDN有个“专家专栏”的功能，也就是后来出现的blog。\n后来Blog出现后，CSDN把自己的“专家专栏”全部迁移到了blog.csdn.net上，07-08年这段时间，CSDN的blog基本上是不能使用，性能差得不能再差，每天宕机，上传图片，贴代码，都非常不好用。也许，这就是使用.NET/Windows平台的问题（开个玩笑）。\n我是从2009年3月开始创建酷壳的，创建的初衷如下：\n\n我需要一个更稳定，更方便的地方，我的博客的风格不会被大众的风格所掩盖的地方。\n我的从事新闻的老婆很不待见我在CSDN的博客，她觉得太技术，书呆子。\n我正好看到了煎蛋这个国外娱乐新闻文摘的blog，而我正好每天会有2个小时阅读国外社区的东西。\n\n基于上述三个原因，我自己花了4500元/年租了个主机，建了酷壳。所以，这也是你一开始看到酷壳基本上是娱乐性比较强的博客，我收集一些比较有意思的程序员中发生的事情，也收集一各式各样的程序员圈子里的各处观点。\n我当时的想法是，一些特别技术的东西，我会和CSDN同步，而一些轻松的话题，我会放在酷壳。我当时的初衷就是想说明程序员并不是一个木纳、书呆子、不食人间烟火、巨无趣的一个群体，程序员圈子里同样也有很多有趣的东西。所以，你可以看到11年初以前的东西我有很多网络恶搞式乱调侃的语言。\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 4.13 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++的坑真的多吗？",
    "url": "https://coolshell.cn/articles/7992.html",
    "date": "2012-08-06T08:12:05+08:00",
    "description": "\n先说明一下，我不希望本文变成语言争论贴。希望下面的文章能让我们客观理性地了解C++这个语言。（另，我觉得技术争论不要停留在非黑即白的二元价值观上，这样争论无非就是比谁的嗓门大，比哪一方的观点强，毫无价值。我们应该多看看技术是怎么演进的，怎么取舍的。）\n事由\n周五的时候，我在我的微博上发了一个贴说了一下一个网友给我发来的C++程序的规范和内存管理写的不是很好（后来我删除了，因为当事人要求），我并非批判，只是想说明其实程序员是需要一些“疫苗”的，并以此想开一个“程序员疫苗的网站”，结果，@简悦云风同学直接回复到：“不要用 C++ 直接用 C , 就没那么多坑了。”就把这个事带入了语言之争。\n我又发了一条微博：\n@左耳朵耗子 ： 说C++比C的坑更多的人我可以理解，但理性地思考一下。C语言的坑也不少啊，如果说C语言有90个坑，那么C++就是100个坑（另，我看很多人都把C语言上的坑也归到了C++上来），但是C++你得到的东西更多，封装，多态，继承扩展，泛型编程，智能指针，……，你得到了500%东西，但却只多了10%的坑，多值啊。\n结果引来了更多的回复（只节选了一些言论）：\n\n@淘宝褚霸也在微博里说：“自从5年前果断扔掉C++，改用了ansi c后，我的生活质量大大提升，没有各种坑坑我。”\n\n\n@Laruence在其微博里说: “我确实用不到, C语言灵活运用struct, 可以很好的满足这些需求.//@左耳朵耗子: 封装，继承，多态，模板，智能指针，这也用不到？这也学院派？//@Laruence: 问题是, 这些东西我都用不到… C语言是工程师搞的, C++是学院派搞的”\n\n那么，C++的坑真的多么？我还请大家理性地思考一下。\n …\n 阅读全文 Read More\n\n (51 人打了分，平均分： 4.41 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个fork的面试题",
    "url": "https://coolshell.cn/articles/7965.html",
    "date": "2012-08-01T08:20:46+08:00",
    "description": "\n前两天有人问了个关于Unix的fork()系统调用的面试题，这个题正好是我大约十年前找工作时某公司问我的一个题，我觉得比较有趣，写篇文章与大家分享一下。这个题是这样的：\n题目：请问下面的程序一共输出多少个“-”？\n\n#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main(void)\n{\n   int i;\n   for(i=0; i<2; i++){\n      fork();\n      printf(\"-\");\n   }\n\n   wait(NULL);\n   wait(NULL);\n\n   return 0;\n}\n\n如果你对fork()的机制比较熟悉的话，这个题并不难，输出应该是6个“-”，但是，实际上这个程序会很tricky地输出8个“-”。\n要讲清这个题，我们首先需要知道fork()系统调用的特性，\n …\n 阅读全文 Read More\n\n (68 人打了分，平均分： 4.74 )Loading...\n"
  },
  {
    "content": "",
    "title": "各式各样的验证码",
    "url": "https://coolshell.cn/articles/7917.html",
    "date": "2012-07-19T08:32:09+08:00",
    "description": "\n还记得以前那篇《超强验证码》？其实这个世界变态的验证码还有很多，下面是一个列表向像展示了各种稀奇古怪的验证码。不过本文并不单单只是收集这验证码，前面的比较恶搞，后面的会向你展示什么是有accessibility验证码。\n完全看不清楚的\n这是人类的字符吗？\n\n图案中的字母是什么？\n\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 4.08 )Loading...\n"
  },
  {
    "content": "",
    "title": "代码执行的效率",
    "url": "https://coolshell.cn/articles/7886.html",
    "date": "2012-07-13T08:18:32+08:00",
    "description": "\n在《性能调优攻略》里，我说过，要调优性需要找到程序中的Hotspot，也就是被调用最多的地方，这种地方，只要你能优化一点点，你的性能就会有质的提高。在这里我给大家举三个关于代码执行效率的例子（它们都来自于网上）\n第一个例子\n PHP中Getter和Setter的效率（来源reddit）\n这个例子比较简单，你可以跳过。\n考虑下面的PHP代码：我们可看到，使用Getter/Setter的方式，性能要比直接读写成员变量要差一倍以上。\n<?php\n\t//dog_naive.php\n\n\tclass dog {\n\t\tpublic $name = \"\";\n\t\tpublic function setName($name) {\n\t\t\t$this-&gt;name = $name;\n\t\t}\n\t\tpublic function getName() {\n\t\t\treturn $this-&gt;name;\n\t\t}\n\t}\n\n\t$rover = new dog();\n        //通过Getter/Setter方式\n\tfor ($x=0; $x<10; $x++) {\n\t\t$t = microtime(true);\n\t\tfor ($i=0; $i<1000000; $i++) {\n\t\t\t$rover->setName(\"rover\");\n\t\t\t$n = $rover->getName();\n\t\t}\n\t\techo microtime(true) - $t;\n\t\techo \"\\n\";\n\t}\n        //直接存取变量方式\n        for ($x=0; $x<10; $x++) {\n\t\t$t = microtime(true);\n\t\tfor($i=0; $i<1000000; $i++) {\n\t\t\t$rover->name = \"rover\";\n\t\t\t$n = $rover->name;\n\t\t}\n\t\techo microtime(true) - $t;\n\t\techo \"\\n\";\n\t}\n?>\n这个并没有什么稀，因为有函数调用的开销，函数调用需要压栈出栈，需要传值，有时还要需要中断，要干的事太多了。所以，代码多了，效率自然就慢了。所有的语言都这个德行，这就是为什么C++要引入inline的原因。而且Java在打开优化的时候也可以优化之。但是对于动态语言来说，这个事就变得有点困难了。\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 3.81 )Loading...\n"
  },
  {
    "content": "",
    "title": "28个Unix/Linux的命令行神器",
    "url": "https://coolshell.cn/articles/7829.html",
    "date": "2012-07-11T08:10:11+08:00",
    "description": "\n下面是Kristóf Kovács收集的28个Unix/Linux下的28个命令行下的工具（原文链接），有一些是大家熟悉的，有一些是非常有用的，有一些是不为人知的。这些工具都非常不错，希望每个人都知道。本篇文章还在Hacker News上被讨论，你可以过去看看。我以作者的原文中加入了官网链接和一些说明。\n\ndstat & sar\niostat, vmstat, ifstat 三合一的工具，用来查看系统性能（我在《性能调优攻略》中提到过那三个xxstat工具）。\n官方网站：http://dag.wieers.com/rpm/packages/dstat/\n你可以这样使用：\nalias dstat='dstat -cdlmnpsy'\n\n\nslurm\n\n查看网络流量的一个工具\n官方网站：  Simple Linux Utility for Resource Management\n …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 4.20 )Loading...\n"
  },
  {
    "content": "",
    "title": "少即是极多",
    "url": "https://coolshell.cn/articles/7771.html",
    "date": "2012-07-05T08:12:25+08:00",
    "description": "\n【感谢网友 @innocentim (Twitter) 投稿】\n这是一篇翻译练习。力图保留原意。若有不准确处，求速速指出。猛击此处（墙）看原文。作者为Rob Pike，贝尔实验室来的大牛，现在就职于Google。他主导了Go语言的创建工作。下面是正文——\n——————————————正文分隔线——————————————\n这是我在2012年6月的Go SF上演讲的文本。\n这是一个个人演讲。 我承认，虽然面前的团队让Go诞生并延续，但是我的观点并不代表任何其他Go语言小组成员的意见。 我也想感谢Go SF的组织者提供这个和你们交流的机会。\n几星期前我被问起:“你在推出Go的过程中遇到的最大的惊奇是什么？”我立即意识到了答案: 虽然我们希望C++程序员意识到Go是个较好的选择，但是令人意外的是，大多数Go程序员来自Python和Ruby这样的动态语言，而很少有来自C++的。\n我们——Ken，Robert和我——是C++程序员(译者: Ken也用C++？)，当时在为解决我们所写的这类软件产生的问题设计一个新的语言。 这似乎有点自相矛盾，因为别的C++程序员根本不关心这些问题，更不会去设计一个语言。\n我今天想说的是关于那些激发我们创造Go的事情，和为什么它本不应令我们如此惊讶。 我保证这些内容更多与Go相关而不是C++，所以即使你不很了解C++你也能跟得上。\n回答可以这样归结: 你认为”少即是多”呢，还是”少就是少”？\n这里有个比喻，将以真实故事的形式给出。 贝尔实验室中心原来发放3位数号码: 物理研究是111，计算科学研究是127，如此这般。 1980年代早期，一个便笺飞过来说”鉴于你们对研究的理解有所加深，将为你们的号码多加上一位，以便更好地体现你们的工作”。 所以我们中心的号码变成了1127。 Ron Hardin半当真地开玩笑说如果我们真的理解我们的世界更好一点的话，我们将丢掉一位数字，将127变成27。 当然主管没听到这个笑话(这也不是我们希望的)，但是我想这里面有点值得思考的东西。 少即是多。 你理解得越好，你将变得越简洁。\n …\n 阅读全文 Read More\n\n (31 人打了分，平均分： 4.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "关于闰秒",
    "url": "https://coolshell.cn/articles/7804.html",
    "date": "2012-06-30T17:16:34+08:00",
    "description": "\n2012年6月30日，也就今天晚上，时间会多出现一秒，也就是我们所说的闰秒。我不知道大家对闰秒的了解有多少，所以写下这篇文章。\n背景知识\n闰秒是在在UTC（中文“世界标准时间”或“世界协调时间”／英文“Coordinated Universal Time”／法文“Temps Universel Cordonné”）是基于Atomic Clock（原子时钟）的一种时间，向太阳时（Solar Time ）对齐的一种方法，因为太阳时是根据地球公转来计算的。所以，1972年制定的UTC为了确保其时间相对于UTC的时间误差不能超过0.9秒，因此在过一段时间后需要加一秒。下图是有UTC以来闰秒的调整表（来自Wikipedia闰秒的中文词条）\n\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "K-Means 算法",
    "url": "https://coolshell.cn/articles/7779.html",
    "date": "2012-06-29T08:24:02+08:00",
    "description": "\n最近在学习一些数据挖掘的算法，看到了这个算法，也许这个算法对你来说很简单，但对我来说，我是一个初学者，我在网上翻看了很多资料，发现中文社区没有把这个问题讲得很全面很清楚的文章，所以，把我的学习笔记记录下来，分享给大家。\n在数据挖掘中， k-Means 算法是一种 cluster analysis 的算法，其主要是来计算数据聚集的算法，主要通过不断地取离种子点最近均值的算法。\n问题\nK-Means算法主要解决的问题如下图所示。我们可以看到，在图的左边有一些点，我们用肉眼可以看出来有四个点群，但是我们怎么通过计算机程序找出这几个点群来呢？于是就出现了我们的K-Means算法（Wikipedia链接）\nK-Means 要解决的问题\n算法概要\n这个算法其实很简单，如下图所示：\n …\n 阅读全文 Read More\n\n (22 人打了分，平均分： 4.18 )Loading...\n"
  },
  {
    "content": "",
    "title": "持续部署，并不简单！",
    "url": "https://coolshell.cn/articles/7657.html",
    "date": "2012-06-25T08:20:08+08:00",
    "description": "\n【感谢 @常新居士 投递此文 】\n这几年，持续集成随着敏捷在国内的推广而持续走热，与之相伴的持续部署也一直备受关注。自前两年，持续交付这个延续性概念又闯进了国内IT圈，慢慢开始在社区和会议中展露头角。许多不明真相的群众跟风哭着喊着要“上”，而许多前CI的半吊子玩家换件衣服就接着干，有的甚至衣服都来不及换……。国内的这些土财主如果不巧请了某些所谓的战略家，除了建了一堆持续集成环境，以及每天嚷嚷着要这个要那个，混乱的状况在根本上没有得到改善。本文无意费力探讨持续集成和持续交付的概念，而是打算谈谈对于大型软件企业，以持续集成为基础实现持续部署（交付）时，所要面对的问题以及可行的解决方案。地主老财们，夜黑风正猛，山高路又远，注意脚下……\nAnd God Said, Let there be light: and there wa— GENSIS, Charpter 1, King James\n一、起步\n先来讲个故事……\n几年前，一对留美的夫妇通过朋友找到我，让我帮忙在国内组建一个开发团队，该团队负责为其开发一款基于社交网络的客户关系管理软件,（暂且称之为项目A）。这个项目除了尚不清晰的需求范围和很紧的期限外，作为业内人士的老公Richard根据眼下流行的软件开发过程还提了诸多额外的要求：\n\n功能要及早交付（以便拿去和潜在的投资人洽谈）\n功能在部署到生产环境前要先部署的一个测试环境（Richard要试用后给予反馈）\n功能必须经过测试（长期作为软件外包的甲方，对质量要求严格）\n要减少后期维护的工作（美国人精贵，少雇一个是一个）\n支持协同开发（以便维护人员及早介入）\n……\n\n这正是持续集成所要解决的典型场景。针对Richard的要求，我们只要建立一个基于Hudson（现在叫Jenkins）+Maven +SVN 的持续集成环境（再加上持续集成所要求的测试和过程）就可以很好地满足上述要要求，此方案的结构如下：\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.15 )Loading...\n"
  },
  {
    "content": "",
    "title": "Git显示漂亮日志的小技巧",
    "url": "https://coolshell.cn/articles/7755.html",
    "date": "2012-06-24T23:29:05+08:00",
    "description": "\n原文：http://garmoncheg.blogspot.com/2012/06/pretty-git-log.html （墙）\nGit的传统log如下所示，你喜欢吗？\n\n看看下面这个你喜不喜欢？（点击图片看大图）\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 4.07 )Loading...\n"
  },
  {
    "content": "",
    "title": "性能调优攻略",
    "url": "https://coolshell.cn/articles/7490.html",
    "date": "2012-06-20T09:24:53+08:00",
    "description": "\n关于性能优化这是一个比较大的话题，在《由12306.cn谈谈网站性能技术》中我从业务和设计上说过一些可用的技术以及那些技术的优缺点，今天，想从一些技术细节上谈谈性能优化，主要是一些代码级别的技术和方法。本文的东西是我的一些经验和知识，并不一定全对，希望大家指正和补充。\n在开始这篇文章之前，大家可以移步去看一下酷壳以前发表的《代码优化概要》，这篇文章基本上告诉你——要进行优化，先得找到性能瓶颈！ 但是在讲如何定位系统性能瓶劲之前，请让我讲一下系统性能的定义和测试，因为没有这两件事，后面的定位和优化无从谈起。\n一、系统性能定义\n让我们先来说说如何什么是系统性能。这个定义非常关键，如果我们不清楚什么是系统性能，那么我们将无法定位之。我见过很多朋友会觉得这很容易，但是仔细一问，其实他们并没有一个比较系统的方法，所以，在这里我想告诉大家如何系统地来定位性能。 总体来说，系统性能就是两个事：\n\nThroughput ，吞吐量。也就是每秒钟可以处理的请求数，任务数。\nLatency， 系统延迟。也就是系统在处理一个请求或一个任务时的延迟。\n\n一般来说，一个系统的性能受到这两个条件的约束，缺一不可。比如，我的系统可以顶得住一百万的并发，但是系统的延迟是2分钟以上，那么，这个一百万的负载毫无意义。系统延迟很短，但是吞吐量很低，同样没有意义。所以，一个好的系统的性能测试必然受到这两个条件的同时作用。 有经验的朋友一定知道，这两个东西的一些关系：\n\nThroughput越大，Latency会越差。因为请求量过大，系统太繁忙，所以响应速度自然会低。\nLatency越好，能支持的Throughput就会越高。因为Latency短说明处理速度快，于是就可以处理更多的请求。\n\n二、系统性能测试\n经过上述的说明，我们知道要测试系统的性能，需要我们收集系统的Throughput和Latency这两个值。\n …\n 阅读全文 Read More\n\n (47 人打了分，平均分： 4.28 )Loading...\n"
  },
  {
    "content": "",
    "title": "抄袭，腾讯 和 产品",
    "url": "https://coolshell.cn/articles/7617.html",
    "date": "2012-06-13T08:35:31+08:00",
    "description": "\n很早就想写这篇文章了，只是想法比较零碎，所以一直没有成文，这两天觉得思考得比较成熟了一些，所以把我的这些想法整理下来，欢迎大家一起和我讨论。\n鄙视抄袭和山寨\n首先，先表达我的立场，我对抄袭的立场持BS和痛恨的态度，尤其是那些C2C的网站，痛恨这些国外有什么就山寨什么的做法，尤其是那些连界面都不改，像素级的抄袭，连CSS和img都是一样的，更甚者，连图片都链接到抄袭源的网站去了，连源代码都抄的行为，比如：腾讯抄新浪的代码，新浪抄twitter的源码。无法不BS之。\n有很多网友邀请我去那个抄袭Quora的网站上去回答问题，借此，再次声明我不会去的。因此，有一些网友说，我不一样也在Twitter的抄袭网站新浪微博上吗？说我装逼了。我想说，新浪和Twitter基本上是同一种产品的思路，但是其实现不一样，新浪微博上一些twitter上没有功能，我个人觉得这并不算抄袭，我甚至认为新浪微博和Twitter各有长处，在一些功能上新浪微博比twitter做得更好。你可以理解为，新浪微博总体上来说并没有突破我心中的那个条抄袭的底线。\n我个人对抄袭的理解如下：\n1）你可以复制别人的想法和功能，但是如果你连界面设计，代码，图片，风格，布局，等等所有的一切都照抄，那我就一定要鄙视你。\n2）你可以仿照别人的产品，但是你的出发点应该是他没做好，我来把它把做好，如果你的出发点是为了复制抄袭和山寨，我一样鄙视。\n所以，你可以理解我为什么不去Quora，Stackoverflow，Facebook，Google的山寨网站了，因为上述两点，1）完全复制，2）山寨地太次。\n理性对待抄袭\n因为很多朋友极端地理解了我对抄袭的立场，所以我有必要要说说我对“抄袭”或是“模仿”的其它一些观点：\n …\n 阅读全文 Read More\n\n (59 人打了分，平均分： 4.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "Lisp的永恒之道",
    "url": "https://coolshell.cn/articles/7526.html",
    "date": "2012-06-04T08:58:46+08:00",
    "description": "\n【感谢 Todd投递本文 – 微博帐号：weidagang 】\nLisp之魅\n长久以来，Lisp一直被许多人视为史上最非凡的编程语言。它不仅在50多年前诞生的时候带来了诸多革命性的创新并极大地影响了后来编程语言的发展，即使在一大批现代语言不断涌现的今天，Lisp的诸多特性仍然未被超越。当各式各样的编程语言摆在面前，我们可以从运行效率、学习曲线、社区活跃度、厂商支持等多种不同的角度进行评判和选择，但我特别看中的一点在于语言能否有效地表达编程者的设计思想。学习C意味着学习如何用过程来表达设计思想，学习Java意味着学习如何用对象来表达设计思想，而虽然Lisp与函数式编程有很大的关系，但学习Lisp绝不仅仅是学习如何用函数表达设计思想。实际上，函数式编程并非Lisp的本质，在已经掌握了lambda、高阶函数、闭包、惰性求值等函数式编程概念之后，学习Lisp仍然大大加深了我对编程的理解。学习Lisp所收获的是如何“自由地”表达你的思想，这正是Lisp最大的魅力所在，也是这门古老的语言仍然具有很强的生命力的根本原因。\nLisp之源\nLisp意为表处理(List Processing)，源自设计者John McCarthy于1960年发表的一篇论文《符号表达式的递归函数及其机器计算》。McCarthy在这篇论文中向我们展示了用一种简单的数据结构S表达式(S-expression)来表示代码和数据，并在此基础上构建一种完整的语言。Lisp语言形式简单、内涵深刻，Paul Graham在《Lisp之根源》中将其对编程的贡献与欧几里德对几何的贡献相提并论。\nLisp之形\n然而，与数学世界中简单易懂的欧氏几何形成鲜明对比，程序世界中的Lisp却一直是一种古老而又神秘的存在，真正理解其精妙的人还是少数。从表面上看，Lisp最明显的特征是它“古怪”的S表达式语法。S表达式是一个原子(atom)，或者若干S表达式组成的列表(list)，表达式之间用空格分开，放入一对括号中。“列表“这个术语可能会容易让人联想到数据结构中的链表之类的线形结构，实际上，Lisp的列表是一种可嵌套的树形结构。下面是一些S表达式的例子:\n\nfoo\n\n()\n\n(a b (c d) e)\n\n(+ (* 2 3) 5)\n\n(defun factorial (N)\n    (if (= N 1)\n        1\n        (* N (factorial (- N 1)))\n    )\n)\n\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "Javascript 中的 var",
    "url": "https://coolshell.cn/articles/7480.html",
    "date": "2012-05-24T14:50:31+08:00",
    "description": "\nMelonCard发布了一篇文章——”how one missing var ruined our launch“（”少写了一个var毁了我的网站”），这篇文章是说MelonCard用Node.js做后台，因为出了一个小高峰——有50-100人注册，结果整个网站都不响应了，而且还出现了很多奇怪的问题。当他们调查到问题的要源的时候，他们发现下面的代码少写了一个var。\n[javascript]app.all(‘/apps/:user_id/status’, function(req, res, next) {\n// …\ninitial = extractVariables(req.body);\n});[/javascript]\n为什么inital少写一个var会引发这个问题呢？因为如果你不写var，这个局部的变量会被javascript当成全局变量，而这个变量又是一个函数，所以，当多用户并发的时候，这个本应该在不同用户下互不干扰的变量，成了各个用户共享的东西。试想，用户A的数据被用户B覆盖了，用户A和B的数据还没处理完，结果被新的C给搞乱了，程序的逻辑自然出现了问题。\n在stackoverflow.com上有这么一个贴子说明了“有var”和“无var”的差别：\n// These are both globals\nvar foo = 1;\nbar = 2;\n\nfunction test()\n{\n    var foo = 1; // Local\n    bar = 2;     // Global\n\n    // Execute an anonymous function\n    (function()\n    {\n        var wibble = 1; // Local\n        foo = 2; // Inherits from scope above (creating a closure)\n        moo = 3; // Global\n    }())\n}\n上面这个示例告诉我们，如果你不用var，那么这个js引擎会一层一层地向上找父作用域中的变量，如果找到了，就用，如果找不到了，就会帮你定义一个全局的变量。上面这个例子充分说明了这一点。所以，如果你想在当前的作用域用声明变量，你一定要用var。这对于一些乱写javascript代码的程序员要注意了。这里再给大家介绍一个工具——\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 3.94 )Loading...\n"
  },
  {
    "content": "",
    "title": "Huffman 编码压缩算法",
    "url": "https://coolshell.cn/articles/7459.html",
    "date": "2012-05-22T13:32:05+08:00",
    "description": "\n前两天发布那个rsync算法后，想看看数据压缩的算法，知道一个经典的压缩算法Huffman算法。相信大家应该听说过 David Huffman 和他的压缩算法—— Huffman Code，一种通过字符出现频率，Priority Queue，和二叉树来进行的一种压缩算法，这种二叉树又叫Huffman二叉树 —— 一种带权重的树。从学校毕业很长时间的我忘了这个算法，但是网上查了一下，中文社区内好像没有把这个算法说得很清楚的文章，尤其是树的构造，而正好看到一篇国外的文章《A Simple Example of Huffman Code on a String》，其中的例子浅显易懂，相当不错，我就转了过来。注意，我没有对此文完全翻译。\n我们直接来看示例，如果我们需要来压缩下面的字符串：\n “beep boop beer!” \n首先，我们先计算出每个字符出现的次数，我们得到下面这样一张表 :\n\n\n\n\n字符\n次数\n\n\n‘b’\n3\n\n\n‘e’\n4\n\n\n‘p’\n2\n\n\n‘ ‘\n2\n\n\n‘o’\n2\n\n\n‘r’\n1\n\n\n‘!’\n1\n\n\n\n\n然后，我把把这些东西放到Priority Queue中（用出现的次数据当 priority），我们可以看到，Priority Queue 是以Prioirry排序一个数组，如果Priority一样，会使用出现的次序排序：下面是我们得到的Priority Queue：\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 4.17 )Loading...\n"
  },
  {
    "content": "",
    "title": "扎克伯格的一封信：关于Facebook IPO",
    "url": "https://coolshell.cn/articles/7448.html",
    "date": "2012-05-19T11:01:21+08:00",
    "description": "\nMENLO PARK, CA (The Borowitz Report) – 在Fackbook IPO前夕，Facebook的创始人兼CEO Mark Zuckerberg 给全球股民发表了封公开信：\n亲爱的股民们：\n    这么多年来，你们已经在Facebook上浪费了你们的时间 ，接下来，你们会得到浪费你们金钱的机会。\n   明天是Facebook的IPO，并且我知道你们一定在想，Facebook怎么就和2000年的.COM泡沫不一样啦？\n首先，我想告诉你们，以前那些糟糕的dot-com公司玩的是概念和炒作，而没有真正的商业价值。而Facebook不一样，也就是说，我们Facebook是建立在强大的以“疯狂的小鸟”和“一群想像中的羊”的基础上的。\n其次，Facebook是世界上最成功的社交网络，我们的用户最近才发现，这个社交网络让人们分享了数以万计别人根本不感兴趣的信息。\n第三，当某人点击Faceback广告的时候，我们就会挣到钱。而且我们知道，点我们广告的人都不是故意点击，成百万的人点我们的广告是因为那时他们喝醉了。我们完全从iTunes偷到这个有创意的想法。\n最后，如果你买我们的股票，你将永远不会孤独。据调查，在过去几年里使用facebook的全球9亿用户，他们都有轻微或中等程度的大脑损伤，这影响了他们的作正常判断的能力。所以，这些人都成为你的朋友——Facebook的股民。\n有了你的帮助，如果明天一切都照计划进行，Facebook IPO将会募到1000亿美金。这是个什么概念，这相当于4到5个摩根大通银行损失的钱。\n最后一件事：我，Mark Zuckerberg，是否会因此IPO获得180亿美金？ 也许，我正在考虑把希腊买了，但就算是这样，我还是有180亿美金。 LOL.\nFriend me (粉我),\nMark\n（新闻来源：http://www.borowitzreport.com/2012/05/17/a-letter-from-mark-zuckerberg/）\n (21 人打了分，平均分： 3.76 )Loading...\n"
  },
  {
    "content": "",
    "title": "rsync 的核心算法",
    "url": "https://coolshell.cn/articles/7425.html",
    "date": "2012-05-17T08:25:38+08:00",
    "description": "\nrsync是unix/linux下同步文件的一个高效算法，它能同步更新两处计算机的文件与目录，并适当利用查找文件中的不同块以减少数据传输。rsync中一项与其他大部分类似程序或协定中所未见的重要特性是镜像是只对有变更的部分进行传送。rsync可拷贝／显示目录属性，以及拷贝文件，并可选择性的压缩以及递归拷贝。rsync利用由Andrew Tridgell发明的算法。这里不介绍其使用方法，只介绍其核心算法。我们可以看到，Unix下的东西，一个命令，一个工具都有很多很精妙的东西，怎么学也学不完，这就是Unix的文化啊。\n本来不想写这篇文章的，因为原先发现有很多中文blog都说了这个算法，但是看了一下，发现这些中文blog要么翻译国外文章翻译地非常烂，要么就是介绍这个算法介绍得很乱让人看不懂，还有错误，误人不浅，所以让我觉得有必要写篇rsync算法介绍的文章。（当然，我成文比较仓促，可能会有一些错误，请指正）\n问题\n首先， 我们先来想一下rsync要解决的问题，如果我们要同步的文件只想传不同的部分，我们就需要对两边的文件做diff，但是这两个问题在两台不同的机器上，无法做diff。如果我们做diff，就要把一个文件传到另一台机器上做diff，但这样一来，我们就传了整个文件，这与我们只想传输不同部的初衷相背。\n于是我们就要想一个办法，让这两边的文件见不到面，但还能知道它们间有什么不同。这就出现了rsync的算法。\n算法\nrsync的算法如下：（假设我们同步源文件名为fileSrc，同步目的文件叫fileDst）\n …\n 阅读全文 Read More\n\n (37 人打了分，平均分： 4.49 )Loading...\n"
  },
  {
    "content": "",
    "title": "NoSQL 数据建模技术",
    "url": "https://coolshell.cn/articles/7270.html",
    "date": "2012-05-15T08:22:13+08:00",
    "description": "\n全文译自墙外文章“NoSQL Data Modeling Techniques”，译得不好，还请见谅。这篇文章看完之后，你可能会对NoSQL的数据结构会有些感觉。我的感觉是，关系型数据库想把一致性，完整性，索引，CRUD都干好，NoSQL只干某一种事，但是牺牲了很多别的东西。总体来说，我觉得NoSQL更适合做Cache。下面是正文——\nNoSQL 数据库经常被用作很多非功能性的地方，如，扩展性，性能和一致性的地方。这些NoSQL的特性在理论和实践中都正在被大众广泛地研究着，研究的热点正是那些和性能分布式相关的非功能性的东西，我们都知道 CAP 理论被很好地应用于了 NoSQL 系统中（陈皓注：CAP即，一致性(Consistency)， 可用性(Availability)， 分区容忍性(Partition tolerance)，在分布式系统中，这三个要素最多只能同时实现两个，而NoSQL一般放弃的是一致性）。但在另一方面，NoSQL的数据建模技术却因为缺乏像关系型数据库那样的基础理论没有被世人很好地研究。这篇文章从数据建模方面对NoSQL家族进行了比较，并讨论几个常见的数据建模技术。\n要开始讨论数据建模技术，我们不得不或多或少地先系统地看一下NoSQL数据模型的成长的趋势，以此我们可以了解一些他们内在的联系。下图是NoSQL家族的进化图，我们可以看到这样的进化：Key-Value时代，BigTable时代，Document时代，全文搜索时代，和Graph数据库时代：（陈皓注：注意图中SQL说的那句话，NoSQL再这样发展下去就是SQL了，哈哈。）\n\n\nNoSQL Data Models\n\n首先，我们需要注意的是SQL和关系型数据模型已存在了很长的时间，这种面向用户的自然性意味着：\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 3.94 )Loading...\n"
  },
  {
    "content": "",
    "title": "用Unix的设计思想来应对多变的需求",
    "url": "https://coolshell.cn/articles/7236.html",
    "date": "2012-05-03T08:14:20+08:00",
    "description": "\n之前，@风枫峰 在“这是谁的错？”中说过开发团队对需求来者不拒，而@weidagang 也在“需求变更和IoC”中说过用IoC来最大程度地解决需求变更。今天我也想从Unix设计思想的角度来说说什么是好的软件设计，什么样的设计可以把需求变更对开发的影响降低。（注意：这并不能解决用户或是PM的无理需求，面对无理需求，需要仔细分析需求，而用技术的手段无法搞定这个事，但是可以减轻需求变更带来的痛苦） 我曾经在《Unix传奇》的下篇中写过一些Unix的设计哲学和思想（这里重点推荐大家看一下《The Art of Unix Programming》，我推荐过多次了），以前也发过一篇《一些软件设计的原则》，不过，这些东西都太多了，记不住。其实，这么多年来，我的经验告诉我，无论是Unix设计，还是面向对象设计，还是别的什么如SOA，ECB，消息，事件，MVC，网络七层模型，数据库设计，等等，他们都在干三件事——解耦，解耦，还是解耦！所谓解耦，就是让软件的模块和模块间尽量少地依赖起来。\n\n现实当中的例子\n让我先举几个现实生活中的例子：\n1、现实社会中，制造灯具的工厂完全不关心制造灯泡的工厂，制造灯泡的工厂完全不关心制造灯具的工厂，但是，灯泡和灯饰可以很完美地组合成用户所喜欢的样子（这和@weidagang 在“需求变更和IoC”说到的那个PC的例子相仿）。他们是怎么做到的？\n2、互联网上，做网站的人完全不用关心用户在用什么样的操作系统，什么样的客户端浏览器（当然事实上，浏览器的不标准让网站那边很头痛，这里只是举个例），反过来，上网的人也不关心做网站的人在用什么的技术开发网站。但是大家在完全不关心对方的情况下，可以很正常地协同工作在一起。为什么？\n …\n 阅读全文 Read More\n\n (36 人打了分，平均分： 4.47 )Loading...\n"
  },
  {
    "content": "",
    "title": "做个环保主义的程序员",
    "url": "https://coolshell.cn/articles/7186.html",
    "date": "2012-04-27T08:26:44+08:00",
    "description": "\n十多年前刚走入社会工作的时候，那时的中国软件开发根本没有什么版本管理，也没有什么编程规范，软件开发相比起今天来说非常地混乱，那时仅凭自己的一些学习总结了一些C语言编程中的好的小笔记，后来，这些笔记写成了一篇叫《编程修养》的文章。今天，又有些感触，想把这个话题扩大一下，从“个人修养”扩大到“环境保护”，所谓，穷则独善其身，富则达济天下，今天的技术人员比十多年前在技术和环境上都富有了许多，所以，也应该或多或少地担负起“达济天下”的责任了。\n环境保护说白了就是保护一个良好的环境，为好的环境添砖加瓦，与破坏环境的人和事做斗争。其实，从技术人员来说，我们可以做一些力所能及的事。因为我们身边的技术环境还有很大的改善的空间，而一些来之不易的东西还需要我们去小心维护。另外，对于我们自己来说，少吃一些垃圾食品，健康生活，对自己也有益。\n环保主义软件开发\n先说说软件开发中的环保。比如：\n\n环保需求。当我们分析需求的时候，如果我们能做到不要像“这是到底是谁的错”一文中那样的来者不拒，如果我们在面对需求能多问这样几个问题：为什么 要有这样的需求？这个功能主要能解决什么 样的问题？为什么不是另外那一种？可不可以简化一下？其实，我们并不需要创新，只需要真正地问好这几个问题，我们就可以少看着一些弯路，少一些苦逼的加班，少一些内耗，少一些埋怨，也就可以为这个社会节省下一些资源，从而环保。\n\n\n\n环保开发。当我们做设计写代码的时候，如果我们多花一些时间去思考一下，我们就可以少一些代码（参看“多一些时间少一些代码”）。如果我们在一开始多思考一下，不要急着马上去用迭代的方式认识世界，多思考一下怎么把复杂的东西解藕，把复杂的东西简化，怎么做出一个优雅的设计，怎么让我们的程序少一些tricky的东西，怎么让我们的程序变得更简洁，更清楚，更直，在一开始思考一下未来需求可能的变化，未来软件需要怎么测试，未来的系统需要怎么的运维，那么，我们可以少一些返工，少一些重构，少欠一些债，少一些低级错误，少承担一些系统上线后的压力，那么，我们同样可以为这个社会节约一些资源。说得再直白一点，你用更少的代码产生出更高的效益，少耗一些CPU，就能省一些电，间接地保护了环境。（参看 Why C++？）\n\n …\n 阅读全文 Read More\n\n (148 人打了分，平均分： 4.49 )Loading...\n"
  },
  {
    "content": "",
    "title": "游戏：VIM大冒险",
    "url": "https://coolshell.cn/articles/7166.html",
    "date": "2012-04-26T08:22:22+08:00",
    "description": "\n不知道大家是否还记得“Vim简明攻略”呢？你是不是对Vim的那一大堆热键很头痛呢？现在好好，下面这个游戏是一个使用VIM热键玩的游戏。你可以在玩游戏的过程中熟悉Vim的热键。\n你可以点击图片，或是图片下的网址打开这个游戏\nhttp://vim-adventures.com/\n\n我试玩了一下这个游戏，真的很不错，下面是一些我给的游戏攻略。\n …\n 阅读全文 Read More\n\n (36 人打了分，平均分： 4.42 )Loading...\n"
  },
  {
    "content": "",
    "title": "这到底是谁之错？",
    "url": "https://coolshell.cn/articles/7126.html",
    "date": "2012-04-19T10:11:05+08:00",
    "description": "\n【感谢 @风枫峰 投递本文】\n故事一：\n背景介绍：RT是一个外包公司，ZWZX是项目承接公司，YD是甲方。\nRT公司每天下班的时候都会接到ZWZX负责人的电话，询问一天的工作情况，然后布置任务要求晚上加班做完，RT公司的员工很无奈也很气愤因为每天都要加班，员工们就问项目经理：“为什么天天加班赶需求，今天才提一个需求，明天就要上线，还让不让人活了?” 项目经理无奈的说：“我有什么办法啊？这是人家ZWZX负责人说的啊，对方逼得紧。”\n多次以后项目经理也忍不住了，就问ZWZX的负责人怎么天天这样啊，ZWZX的负责人就说了:”明天就要向YD的负责人展示这个页面，我也没有办法啊？YD那边老总就是这么要求的，我怎么办，我也不想这样啊？”\n然后RT的项目经理实在受不了了就辞职了，新上任的项目经理又会走他的老路，因为从开始我们就被培养“满足客户的需求是最重要的”。RT的员工也就这样一直抱怨着，一直忍受着。天天在心里咒骂YD的老总真是没有人性，不拿人当人看啊！\n人换了一批又一批，加班也就慢慢的变成了应该的，你不加班说明你不敬业，不合格。\n故事二：\nIE6一直存活着，所有的前端开发人员都痛恨它，都不想兼容它，可是产品经理看到IE6的市场占有率还是这么高，就会要求前端开发人员必须兼容IE6。\n …\n 阅读全文 Read More\n\n (34 人打了分，平均分： 4.21 )Loading...\n"
  },
  {
    "content": "",
    "title": "挑战无处不在",
    "url": "https://coolshell.cn/articles/7048.html",
    "date": "2012-04-17T10:06:16+08:00",
    "description": "\n面试过一些应聘者，当我问到为什么换工作的时候，他们都会告诉我，现在的工作没有挑战，无聊，所以想换一个有挑战的工作。于是我问了一下他的工作情况，发现那些有挑战的东西他还没有搞懂。我总是为有这样的认识的朋友感到惋惜，因为我总是认为有挑战的东西无处不在啊，不能因为工作上没有，自己就放纵了自己。比如，面试过一个做地图的工程师，他的工作是做计算地图上任意两点的最短或最优路径的一部分功能。我觉得这个事很有挑战，也有难度，应聘者说，没什么挑战，因为他做的东西只是调用相关的算法库。他在这个项目干了2年了，当我问他有没有看过算法库，知不知道地图是怎么存储的？他却告诉我，因为没有去做，所以就没有去了解，等做的时候再了解（我希望有这样想法的人都去看看程序员的谎谬之言还是至理名言？）。这样的例子很多，很多应聘者在面试中不能和我一起解决某个问题的时候，比如：OOD，数据库设计，系统设计，等，他们都会告诉我，不好意思，因为没有做过相关的事情，所以就不懂了，所以，他需要一个像我们这样的项目来学习和锻炼。我并不要求你能解决你所不擅长的问题，但毕竟数据库，OO，系统设计都是软件开发的基础知识，多少要懂一些吧。\n但另外一方面，他们都会告诉我他们对技术充满和热情和兴趣，有着很强的学习能力，也有很能吃苦的态度。这也许是某面试宝典上看来的，面经上可能都会说，如果面对不能作答问题，可以说一下自己的态度和决心。可惜的是，我并不这么想的，我在我的两篇关于招聘的文章里（我是怎么招聘程序员的，再谈我是怎么招聘程序员的）都说过一些我对如何择人的想法。这里重点说明一下其中两个观点：\n\n关于热情和态度，说白了就是不要给自己找借口。比如：“工作忙事多没时间学所以可以不懂”，“工作中没用到所以可以不懂”，“工作没有挑战，一直没有遇到合适的项目”等等。时间可以挤，工作之余可以学，随时随地去思考，挑战是无处不在的…… 想想那些你有热情的事，你会发现，几乎没有什么可以阻止你去做那些事。\n\n\n对于某些事情，如果以前没有在你身上发生过，那么这个事情在未来也不会发生。如果你以前没有对你接触过的东西去学习，去深挖，去思考，去改善，那么我不会相信你会在未来面对新的东西的时候也会有这样的态度；如果你以前没有用业余时间学习一些项目之外的东西，那么我也不会相信你会在未来会这样做；如果你以前没有把你的热情和态度转换成你的知识，经验和成果，那么我也不会相信你会在未来能做到。\n\n这两个观点可能太刻薄了，但是，当我回想我自己的经历的时候，观察程序员的成长过程的时候，我发现，优秀的程序员都是相似的，当他们还在是一个菜鸟的时候，就已经有各种成为高手的苗头了，这些苗头就是——他们热爱思考，喜欢解决难题，对新鲜事物非常好奇，总是找人讨论，可以用自己的业余时间狠命研究很多和工作无关的技术，会在业余的时间里写些有趣的小程序，或是会把自己的思路书写下来，等等，等等。\n …\n 阅读全文 Read More\n\n (61 人打了分，平均分： 4.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "我们需要专职的QA吗？",
    "url": "https://coolshell.cn/articles/6994.html",
    "date": "2012-04-11T08:48:59+08:00",
    "description": "\n这个文章必然是有争议的，我在我的微博上讨论过很多次了，每次都是很有争议的。有不同的观点，有争论总是一件好事，这样可以引发大家的思考。所以，对于我的这篇博文，如果你赞同我的观点，我会感到高兴，如果你会去认真地深入思考，我也会高兴，如果你反对，没关系，可以讨论。\n在此之前，我想说明一下我观点里的这个“专职QA”是怎么定义的。\n\n其是很多公司成立的专门做测试的技术人员，仅测试不开发。\n这些QA对于软件开发技术并不熟悉，甚至不懂。\n\n我经历过一些公司都有专职的QA团队（专职的测试人员），自从上个公司我的开发团队在一个项目上被QA部门搞得一团糟，我越来越怀疑专职QA存在在意义。我的观点不一定对，但请让我鲜明地表达一下——我觉得是不需要全职的QA的，甚至不需要QA这一专职角色或部门，因为，不懂开发的人必然做不好测试。就像不懂开发的研发经理必然管不好研发团队一样。我越来越觉得Dev应该应该是做测试最合适的人选，这必然是未来的趋势 （因为我已经看到了中国程序员的进步，相比起10年前，今天的程序员已经是非常全面了，再来十年，必然证明我的观点是对的）。\n在我正在展开说明之前，我想引用两篇文章：\n两篇文章\n一篇是  “On testers and testing”(中文翻译)，本文的作者Sriram Krishnan是一名程序员，曾在Yahoo和微软工作过，开发过很多软件，曾被纽约时报报道，写过一本书，本文是他的一篇博客。他在文章中表达了这几个观点——\n大多数的开发团队并不需要一个独立的测试角色。即使要有，那么所有的开发时间比上所有的测试时间应该 >20:1的。。证据吗？光看看一些从古至今最成功的软件开发团队就知道了。不论是当今的Facebook，还是30年前最初的NT团队，很多伟大的产品都是出自没有或很少测试人员的团队。\n开发人员应该测试自己的代码。没什么可说的。背后的道理并不重要。这包括单元测试，全覆盖的自动化测试或手工测试或组合测试。如果你的开发人员不能/不愿意或认为这“不归我管”，那你需要更好的程序员。\n另一篇文章是邹欣的“现代软件工程讲义 9 测试 QA 的角色和分工”，这是一篇很不错的文章。他在文章里提到了分工的必要性，比如第三方的鉴定机构，并且也指出了分工的一些问题，比如，画地为牢的分工，无明确责任的分工，等，这些问题直接命中了分工的要害。我隐约觉得，我和邹欣的很多观点是相同的，我们内容上是相同的，只是形式上还有分歧。另外，我的观点太鲜明了，从而容易导向极端的理解。\n你看，我们都同意，Dev要懂测试，QA要懂开发，只不过分工不同，既然你中有我，我中有你，那就不要分彼此了，一起携手开发测试吧。（另外，我个人觉得不懂开发的测试人员不可能测试得好）\n—- update—- {\n     //本篇文章出来后，网上出现了一些对此讨论的文章，我一并更新在这里\n【 《对《我们需要专职QA吗？》的回应》作者：@段念-段文韬 】\n【 《关于“我们需要专职的QA吗”》作者：@Jacky郭 】\n【 《我们需要专职的QA吗？（评）》作者：@Monkey陳曄曄 】\n【《 《我们需要专职的QA吗？》读后感》作者：@ 花生色魔叔】\n}\n …\n 阅读全文 Read More\n\n (60 人打了分，平均分： 4.23 )Loading...\n"
  },
  {
    "content": "",
    "title": "谈谈数据安全和云存储",
    "url": "https://coolshell.cn/articles/6976.html",
    "date": "2012-04-09T08:33:22+08:00",
    "description": "\n前些天，创新工场李开复同学在2012博鳌亚洲论坛表示：\n“你们有多少人丢过手机？大概有15%。你们有多少人数据放在微软掉过的？我想不见得很多吧。所以相对来说是安全的。放在大公司里比自己拿着掉的概率更大，你不相信的话，可以问陈冠希先生。”\n\n两种安全\n看到这个消息的时候，我觉得李开复同学混淆了云存储和安全这两个概念，在英文里，有两个单词，一个是Safety，一个是Security，很不幸的是，这两个英文单词翻译成中文都叫“安全”，因此总是被混淆，熟知英文又熟悉IT业的李开复同学在这个句子中混淆了这“两种安全”，我在我的微博上指出来后，居然还有很多网友继续混淆这两点，所以，这让我产生了写篇博文的说明一下，并顺着说说云存储和数据安全的个人理解。\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 3.81 )Loading...\n"
  },
  {
    "content": "",
    "title": "需求变化与IoC",
    "url": "https://coolshell.cn/articles/6950.html",
    "date": "2012-03-26T11:01:07+08:00",
    "description": "\n【感谢 Todd投递本文 – 微博帐号：@weidagang 】\n需求又变了，怎么办？\n先上一个轻松的段子：\n程序员XX遭遇车祸成植物人，医生说活下来的希望只有万分之一，唤醒更为渺茫。可他的Lead和亲人没有放弃，他们根据XX工作如命的作风，每天都在他身边念：“XX，需求又改了，该干活了，你快来呀！”，奇迹终于发生了，XX醒来了，第一句话：“需求又改了？”。\n这个段子用幽默的方式反映了需求变化是每一个程序员、架构师或项目经理都会经常遇到的问题。面对这个问题，不同的人有不同的应对之道，最近微博上有一段关于需求变化的讨论：\n@假装刺猬的猪：我们在软件开发过程中，会持续碰到客户需求变更的情况。如果没有领域建模，我们单纯将问题使用直觉将问题解决，那么等到客户需求变更或者有新的需求时，就会面临一个僵硬的前设计！无法在以前的设计上持续深入的优化模型，导致需求变更无法及时深化。设计实现均滞后与变更！\n@高煥堂: <碰到客户需求变更的情况>是合理的；但<领域建模>不是美好的手段!!!\n@weidagang: 要不被客户牵着鼻子走，需要自己有很强的设计能力，反过来让客户跟着你的设计来满足你的要求。能做到这点的公司很少，但这是软件行业唯一有希望的出路。\n@高煥堂: <这是软件行业唯一有希望的出路>。 Great!!\n如何应对需求变化？ @假装刺猬的猪 的答案是领域建模，并持续优化模型，适应需求的变化。@高煥堂 则认为领域建模不是美好的手段。我进一步补充，应该“反过来”让自己在需求变化中处于主导地位，而不是被动地适应。\n …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 3.88 )Loading...\n"
  },
  {
    "content": "",
    "title": "神奇的CSS形状",
    "url": "https://coolshell.cn/articles/6913.html",
    "date": "2012-03-24T20:35:41+08:00",
    "description": "\n【感谢 Neo 投递本文 – 微博帐号：@_锟_ 】\n在StackOverflow上有这么一个问题，有位同学在http://css-tricks.com/examples/ShapesOfCSS/  找到一些使用CSS做的形状，其中一位同学对下面的这个形状充满了疑问。\n形状是：\n\n代码是：\n\n#triangle-up {\nwidth: 0;\nheight: 0;\nborder-left: 50px solid transparent;\nborder-right: 50px solid transparent;\nborder-bottom: 100px solid red;\n}\n\n这位同学就提问啦，为啥这么这么几句就能画出一个三角形呢？\n于是呢，有高人出现，这个高人图文并茂的解释了这个三角的成因\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 3.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "CSS 布局:40个教程、技巧、例子和最佳实践",
    "url": "https://coolshell.cn/articles/6840.html",
    "date": "2012-03-19T08:25:46+08:00",
    "description": "\n【感谢 Neo 投递本文 – 微博帐号：_锟_ 】\n前言： 布局是WEB开发一个重要的课题，进入XHTML/CSS后，使用TABLE布局的方式逐渐淡出，CSS布局以众多优点成为主流，本文将介绍40个基于CSS的web布局的资源和教程。文章的出处在http://www.noupe.com/css/css-layouts-40-tutorials-tips-demos-and-best-practices.html。文中的不少的例子在一本经典的CSS书籍《CCS: The Missing Manual, 2nd Edition》中都可以找到，据我所知，第二版在中国没有翻译出版。你可以从这里下载英文版（不过需要注册个用户名）\n正文\n基于CSS的布局能提供更灵活布局方式和更强的用户视觉体验。一些重要技巧和关键点可以帮助初学者理解CSS布局的基础和本质。这也是本文成文的原因 ——找到那些完美的布局，完全灵活的，等高栏和工作完美的布局。\n因此下面这个列表就是我们整理了网络上关于基于CSS布局的一些技巧，教程和最佳实践的列表。\n当然你也可能对下面这些和CSS相关的主题有兴趣：\nThe 7 CSS Hacks that we should use\nUsing CSS to Do Anything: 50+ Creative Examples and Tutorials\nUsing CSS to Fix Anything: 20+ Common Bugs and Fixes\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 3.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "多版本并发控制(MVCC)在分布式系统中的应用",
    "url": "https://coolshell.cn/articles/6790.html",
    "date": "2012-03-13T08:36:53+08:00",
    "description": "\n【感谢 Todd投递本文 – 微博帐号：weidagang 】\n问题\n最近项目中遇到了一个分布式系统的并发控制问题。该问题可以抽象为：某分布式系统由一个数据中心D和若干业务处理中心L1，L2 … Ln组成；D本质上是一个key-value存储，它对外提供基于HTTP协议的CRUD操作接口。L的业务逻辑可以抽象为下面3个步骤：\n\nread: 根据keySet {k1, … kn}从D获取keyValueSet {k1:v1, … kn:vn}\ndo: 根据keyValueSet进行业务处理，得到需要更新的数据集keyValueSet’ {k1′:v1′, … km’:vm’} (注：读取的keySet和更新的keySet’可能不同)\nupdate: 把keyValueSet’更新到D （注：D保证在一次调用更新多个key的原子性）\n\n在没有事务支持的情况下，多个L进行并发处理可能会导致数据一致性问题。比如，考虑L1和L2的如下执行顺序：\n\nL1从D读取key:123对应的值100\nL2从D读取key:123对应的100\nL1将key:123更新为100 + 1\nL2将key:123更新为100 + 2\n\n如果L1和L2串行执行，key:123对应的值将为103，但上面并发执行中L1的执行效果完全被L2所覆盖，实际key:123所对应的值变成了102。\n …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 3.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "Bret Victor – Inventing on Principle",
    "url": "https://coolshell.cn/articles/6775.html",
    "date": "2012-03-09T08:38:48+08:00",
    "description": "\nBret Victor（简历） – 苹果公司的UI交互设计师（大神级的人），在 CUSEC（Canadian University Software Engineering Conference） 上做了一个题为 “Inventing on Principle” 的演讲（vimeo视频链接），这个演讲中展示了五个示例：\n\n用程序画树。如何把程序绘图变成实时的，如何把程序和图映射起来。\n游戏调试。在实时编程的基础上，可以更容易的让你看到程序参数对游戏的调整，甚至对游戏过程的可视化调试。\n算法调试。在写二分查找算法时可以实时看到程序的执行过程。边写边看到。\n电路图。可以实时地看到电路图中各个部件的对1/0信号的处理。\n动画。一种比flash制作动画更NB 的方法。\n\n下面是优酷上的视频——你一定会被示例中的那些编程工具所震撼！\n\n不过，Bret并不是在说什么编程，也不是在说什么技术，他是在说 How to live your life。\n …\n 阅读全文 Read More\n\n (58 人打了分，平均分： 4.59 )Loading...\n"
  },
  {
    "content": "",
    "title": "理解Javascript的闭包",
    "url": "https://coolshell.cn/articles/6731.html",
    "date": "2012-03-07T08:30:43+08:00",
    "description": "\n【感谢 Neo 投递本文 – 微博帐号：_锟_ 】\n前言：还是一篇入门文章。Javascript中有几个非常重要的语言特性——对象、原型继承、闭包。其中闭包对于那些使用传统静态语言C/C++的程序员来说是一个新的语言特性。本文将以例子入手来介绍Javascript闭包的语言特性，并结合一点ECMAScript语言规范来使读者可以更深入的理解闭包。\n注：本文是入门文章，例子素材整理于网络，如果你是高手，欢迎针对文章提出技术性建议和意见。本文讨论的是Javascript，不想做语言对比，如果您对Javascript天生不适，请自行绕道。\n什么是闭包\n闭包是什么?闭包是Closure，这是静态语言所不具有的一个新特性。但是闭包也不是什么复杂到不可理解的东西，简而言之，闭包就是：\n\n闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继续存在。\n闭包就是就是函数的“堆栈”在函数返回后并不释放，我们也可以理解为这些函数堆栈并不在栈上分配而是在堆上分配\n当在一个函数内定义另外一个函数就会产生闭包\n\n上面的第二定义是第一个补充说明，抽取第一个定义的主谓宾——闭包是函数的‘局部变量’集合。只是这个局部变量是可以在函数返回后被访问。（这个不是官方定义，但是这个定义应该更有利于你理解闭包）\n做为局部变量都可以被函数内的代码访问，这个和静态语言是没有差别。闭包的差别在于局部变变量可以在函数执行结束后仍然被函数外的代码访问。这意味着函数必须返回一个指向闭包的“引用”，或将这个”引用”赋值给某个外部变量，才能保证闭包中局部变量被外部代码访问。当然包含这个引用的实体应该是一个对象，因为在Javascript中除了基本类型剩下的就都是对象了。可惜的是，ECMAScript并没有提供相关的成员和方法来访问闭包中的局部变量。但是在ECMAScript中，函数对象中定义的内部函数(inner function)是可以直接访问外部函数的局部变量，通过这种机制，我们就可以以如下的方式完成对闭包的访问了。\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 4.16 )Loading...\n"
  },
  {
    "content": "",
    "title": "再谈javascript面向对象编程",
    "url": "https://coolshell.cn/articles/6668.html",
    "date": "2012-02-27T08:25:13+08:00",
    "description": "\n前言:虽有陈皓《Javascript 面向对象编程》珠玉在前，但是我还是忍不住再画蛇添足的补上一篇文章，主要是因为javascript这门语言魅力。另外这篇文章是一篇入门文章，我也是才开始学习Javascript，有一点心得，才想写一篇这样文章，文章中难免有错误的地方，还请各位不吝吐槽指正\n吐槽Javascript\n初次接触Javascript，这门语言的确会让很多正规军感到诸多的不适，这种不适来自于Javascript的语法的简练和不严谨，这种不适也来自Javascript这个悲催的名称，我在想网景公司的Javascript设计者在给他起名称那天一定是脑壳进水了,让Javascript这么多年来受了这么多不白之冤，人们都认为他是Java的附属物，一个WEB玩具语言。因此才会有些人会对Javascript不屑，认为Javascript不是一门真正的语言，但是这此他们真的错了。Javascript不仅是一门语言，是一门真真正正的语言，而且他还是一门里程碑式的语言，他独创多种新的编程模式原型继承，闭包（作者注：闭包不是JS首创，应该Scheme首创，prototypal inheritance 和 dynamic objects 是self语言首创，Javascript的首创并不精彩,谢谢网友的指正。），对后来的动态语言产生了巨大的影响。做为当今最流行的语言（没有之一），看看git上提交的最多的语言类型就能明白。随着HTML5的登场，浏览器将在个人电脑上将大显身手，完全有替换OS的趋势的时候，Javascript做为浏览器上的一门唯一真真的语言，如同C之于 unix/linux，java之于JVM，Cobol之于MainFrame，我们也需要来重新的认真地认识和审视这门语言。另外Javascript的正式名称是：ECMAScript，这个名字明显比Javascript帅太多了！\n…\n 阅读全文 Read More\n\n (20 人打了分，平均分： 3.70 )Loading...\n"
  },
  {
    "content": "",
    "title": "千万别惹程序员",
    "url": "https://coolshell.cn/articles/6639.html",
    "date": "2012-02-21T07:54:57+08:00",
    "description": "\n酷壳好久没有发娱乐性质的技术文章了，搞得气氛有点严肃了，考虑到程序员们都是比较严肃和容易较真的类书呆子的群体，所以，需要更新一个有娱乐性质的文章了。正好最近看到了两个比较有趣的图，在新浪微博上都得到了比较不错的反响，因此，更新到酷壳上来。\n如果编程语言是一种刀\n下面这个图是把编程语言看做是一种刀，那么会是什么样的。这个图我个人感觉很有意思。\n\n对于这个图，最好不要解释，意会就好。不过，我却有点想不解风情，忍不住想解释一下。\n …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 4.16 )Loading...\n"
  },
  {
    "content": "",
    "title": "Why C++ ? 王者归来",
    "url": "https://coolshell.cn/articles/6548.html",
    "date": "2012-02-02T08:22:57+08:00",
    "description": "\n因为又有人邀请我去Quora的C2C网站去回答问题去了，这回是 关于 @laiyonghao 的这篇有点争议的博文《2012 不宜进入的三个技术点》ActionScript，Thread 和 C++， C++争议的争议最大。（要我说，.NET比C++更需要慎重进入，呵）。我就在这里回复一下这个问题吧。\n正好我一个月前看到一个视频，这个演讲视频还比较著名，这个演讲者是Exceptional C++ 和 C++ Coding Standards 的作者，还是ISO C++ 委员会的Chair，C++/CLI首席架构师，还是Microsoft的软件架构师，他叫Herb Sutter，他的这个演讲视频是 C++ and Beyond 2011上的一次公开演讲，题目是——Why C++? （如果你觉得那里的视频比较慢，你可以看优酷上的视频）（英文听力好的同学可以看一样，因为都没有中文字幕）\n我觉得这篇文章就足够可以说明很多问题了，所以，我把Herb的演讲幻灯片截了几页放到这里，并做上一些注释，算是一个演讲内容摘要吧。\n1） 为什么C++？因为 Performance per $，也就是说performance 就是钱，这个分成三个方面，\n\n耗电，芯片的耗电量，移动设备的耗电量，家用电脑的耗电量都和钱有关系。\n资源，家用电脑和移动设备上的处理器资源有限，因为要让一般消费者买的起。\n体验，在更小的设备上会有更好的体验，有更好的体验就可以挣更多的钱。\n\n移动设备上的耗电量相信用过智能手机的人都知道吧，Android手机的耗电量实在是太大了。就算是iPhone在开启Wifi和3G的情况下耗电量也很快。\n\n …\n 阅读全文 Read More\n\n (32 人打了分，平均分： 4.06 )Loading...\n"
  },
  {
    "content": "",
    "title": "软件开发的“三重门”",
    "url": "https://coolshell.cn/articles/6526.html",
    "date": "2012-01-30T11:00:50+08:00",
    "description": "\n自从上次写了“程序员技术练级攻略” 以来，就觉得似乎还有很多东西没有谈到，但当时没有继续思考了。而春节前有人问我，是做底层技术，还是做业务。这问题让我思考了很多，不由自主地回顾了一 下我这十多年的软件开发经历，并顺着整理分类了一下自己解决过的若干问题，还发散想了很多，经过了一个春节假期的发酵，产生了下面这篇文章。\n前言\n这篇文章必然是通过我的个人经历来写的。所以，我先说说个人经历吧。我的经历基本分成三个阶段。\n第一阶段：我 刚毕业时在家乡的某银行工作，做些银行的业务系统，还搞些网络，电子邮件系统，OA什么的，因为大四的时候在老师的公司里实习，银行里的人际关系太复杂， 而且技术都包给了产商，所以在银行的每一天都觉得不能适应里面的工作环境。两年后离职，单位分的房也不要了，直接去了上海，在上海呆了两年，本来想做互联 网的，但是泡沫来了，最终去了一家做系统集成的国企公司还是继续做银行业务。这四年来，主要解决的都是一些业务上的问题，银行里的会计业务，OA业务，国 际业务，中间对公业务都非常地复杂，而且因为当时的软件开发相当的不规范，所以基本上是在一种比较混乱的状态下度过的，而银行方面又很强势，所以，这段时 间主要是做业务。所以，技术上主要是积累了如何使用那些技术。C+/Java， Windows编程，Unix编程，网络编程主要是这段时间学的，看了太多的书（我大学课程里没有C++和Java，也没有Windows/Unix和网 络编程，所以，只能拼命地看书和自学）。\n第二阶段：然后，我来了北京，到了一家做分布式计算系统的公 司，整天和一个高性能技术高可用性的企业级的集群式的软件产品打交道（这家公司去年被IBM收购了），在这家公司把Windows/Unix和网络编程有 了更深入的了解，对我长进比较大的是明白了怎么做一个性能高，可用性高的集群式的系统，天天和底层打交道，干了4年多。然后去了一家金融信息公司，这家金 融公司主要做全球的金融信息数据处理，而我主要还是做核心数据发布系统的性能调优的项目，金融数据的实时性要求的高，数据量非常地大，高可用性要求得高， 得想尽一切办法省网络带宽，增加系统性能，还要保持高的可用性，不当机，不丢包。又干了4年多，入职的时候从国外接过来两个系统，其性能单机每秒可处理 120K message，我走的时候，我和团队把其优化到了每秒1.4M messages 的吞吐，另一个系统，从接手时的100k message/s优化到了500k message/s。这八年多的时候，全是在和这些高计算高性能的项目打交量，几乎没有什么业务，都是纯技术，积累到了很多和性能有关的高并发高计算系统 架构级的知识。\n …\n 阅读全文 Read More\n\n (55 人打了分，平均分： 4.51 )Loading...\n"
  },
  {
    "content": "",
    "title": "由12306.cn谈谈网站性能技术",
    "url": "https://coolshell.cn/articles/6470.html",
    "date": "2012-01-16T08:20:22+08:00",
    "description": "\n12306.cn网站挂了，被全国人民骂了。我这两天也在思考这个事，我想以这个事来粗略地和大家讨论一下网站性能的问题。因为仓促，而且完全基于本人有限的经验和了解，所以，如果有什么问题还请大家一起讨论和指正。（这又是一篇长文，只讨论性能问题，不讨论那些UI，用户体验，或是是否把支付和购票下单环节分开的功能性的东西）\n业务\n任何技术都离不开业务需求，所以，要说明性能问题，首先还是想先说说业务问题。\n\n其一，有人可能把这个东西和QQ或是网游相比。但我觉得这两者是不一样的，网游和QQ在线或是登录时访问的更多的是用户自己的数据，而订票系统访问的是中心的票量数据，这是不一样的。不要觉得网游或是QQ能行你就以为这是一样的。网游和QQ 的后端负载相对于电子商务的系统还是简单。\n\n\n其二，有人说春节期间订火车的这个事好像网站的秒杀活动。的确很相似，但是如果你的思考不在表面的话，你会发现这也有些不一样。火车票这个事，一方面会伴随着大量的查询操作，更BT的是下单的时候需要对数据库很多的一致性的操作，一方面是从起点到终点各个分段票的一致性，另一方面，买的人路线、车次、时间选择有很多，会不停地改变下单方式。而秒杀，直接杀就好了，没有那么多查询和一致性的问题。另外，关于秒杀，完全可以做成只接受前N个用户的请求（完全不操作后端的任何数据， 仅仅只是对用户的下单操作log），这种业务，只需要在内存cache中放好可秒杀的数量，还可以把数据分布开来放，100商品，10台服务器一台放10个，无需在当时操作任何数据库。可以订单数够后，停止秒杀，然后批量写数据库。而且秒杀的商品不多。火车票这个不是像秒杀那么简单的，春运时间，几乎所有的票都是热门票，而且几乎是全国人民都来了，而且还有转车业务，多条线的库存都要做事务操作，你想想吧，这有多难。（淘宝的双十一也就3百万用户，而火车票瞬时有千万级别甚至是亿级别的）（更新：2014年1月11日：来了淘宝后，对淘宝的系统有了解，淘宝的秒杀活动，本质上是用输验证码并在CDN上把用户直接过滤掉了，比如：1千万个用户过滤了只剩2万个用户，这样数据库就顶得住了）\n\n\n其三，有人拿这个系统和奥运会的票务系统比较。我觉得还是不一样。虽然奥运会的票务系统当年也一上线就废了。但是奥运会用的是抽奖的方式，也就是说不存在先来先得的抢的方式，而且，是事后抽奖，事前只需要收信息，事前不需要保证数据一致性，没有锁，很容易水平扩展。\n\n\n其四，订票系统应该和电子商务的订单系统很相似，都是需要对库存进行：1）占住库存，2）支付（可选），3）扣除库存的操作。这个是需要有一致性的检查的，也就是在并发时需要对数据加锁的。B2C的电商基本上都会把这个事干成异步的，也就是说，你下的订单并不是马上处理的，而是延时处理的，只有成功处理了，系统才会给你一封确认邮件说是订单成功。我相信有很多朋友都收到认单不成功的邮件。这就是说，数据一致性在并发下是一个瓶颈。\n\n …\n 阅读全文 Read More\n\n (110 人打了分，平均分： 4.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "Javascript 面向对象编程",
    "url": "https://coolshell.cn/articles/6441.html",
    "date": "2012-01-09T08:16:27+08:00",
    "description": "\nJavascript是一个类C的语言，他的面向对象的东西相对于C++/Java比较奇怪，但是其的确相当的强大，在 Todd 同学的“对象的消息模型”一文中我们已经可以看到一些端倪了。这两天有个前同事总在问我Javascript面向对象的东西，所以，索性写篇文章让他看去吧，这里这篇文章主要想从一个整体的角度来说明一下Javascript的面向对象的编程。（成文比较仓促，应该有不准确或是有误的地方，请大家批评指正）\n另，这篇文章主要基于 ECMAScript 5， 旨在介绍新技术。关于兼容性的东西，请看最后一节。\n初探\n我们知道Javascript中的变量定义基本如下：\nvar name = 'Chen Hao';;\nvar email = 'haoel(@)hotmail.com';\nvar website = 'https://coolshell.cn';\n如果要用对象来写的话，就是下面这个样子：\nvar chenhao = {\n    name :'Chen Hao',\n    email : 'haoel(@)hotmail.com',\n    website : 'https://coolshell.cn'\n};\n于是，我就可以这样访问：\n\n//以成员的方式\nchenhao.name;\nchenhao.email;\nchenhao.website;\n\n//以hash map的方式\nchenhao[\"name\"];\nchenhao[\"email\"];\nchenhao[\"website\"];\n\n关于函数，我们知道Javascript的函数是这样的：\n …\n 阅读全文 Read More\n\n (31 人打了分，平均分： 4.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "Hash Collision DoS 问题",
    "url": "https://coolshell.cn/articles/6424.html",
    "date": "2012-01-06T08:36:05+08:00",
    "description": "\n最近，除了国内明文密码的安全事件，还有一个事是比较大的，那就是 Hash Collision DoS （Hash碰撞的拒绝式服务攻击），有恶意的人会通过这个安全弱点会让你的服务器运行巨慢无比。这个安全弱点利用了各语言的Hash算法的“非随机性”可以制造出N多的value不一样，但是key一样数据，然后让你的Hash表成为一张单向链表，而导致你的整个网站或是程序的运行性能以级数下降（可以很轻松的让你的CPU升到100%）。目前，这个问题出现于Java, JRuby, PHP, Python, Rubinius, Ruby这些语言中，主要：\n\nJava, 所有版本\nJRuby <= 1.6.5 （目前fix在 1.6.5.1）\nPHP <= 5.3.8, <= 5.4.0RC3 （目前fix在 5.3.9,  5.4.0RC4）\nPython, all versions\nRubinius, all versions\nRuby <= 1.8.7-p356 （目前fix在 1.8.7-p357, 1.9.x）\nApache Geronimo, 所有版本\nApache Tomcat <= 5.5.34, <= 6.0.34, <= 7.0.22 （目前fix在 5.5.35,  6.0.35,  7.0.23）\nOracle Glassfish <= 3.1.1 （目前fix在mainline）\nJetty, 所有版本\nPlone, 所有版本\nRack <= 1.3.5, <= 1.2.4, <= 1.1.2 （目前fix 在 1.4.0, 1.3.6, 1.2.5, 1.1.3）\nV8 JavaScript Engine, 所有版本\nASP.NET 没有打MS11-100补丁\n\n注意，Perl没有这个问题，因为Perl在N年前就fix了这个问题了。关于这个列表的更新，请参看 oCERT的2011-003报告，比较坑爹的是，这个问题早在2003 年就在论文《通过算法复杂性进行拒绝式服务攻击》中被报告了，但是好像没有引起注意，尤其是Java。\n弱点攻击解释\n你可以会觉得这个问题没有什么大不了的，因为黑客是看不到hash算法的，如果你这么认为，那么你就错了，这说明对Web编程的了解还不足够底层。\n …\n 阅读全文 Read More\n\n (32 人打了分，平均分： 3.94 )Loading...\n"
  },
  {
    "content": "",
    "title": "Resin服务器getResource揭秘",
    "url": "https://coolshell.cn/articles/6335.html",
    "date": "2012-01-05T08:28:59+08:00",
    "description": "\n（感谢网友 liuxiaori 继续分享其经历）这样的详细的图文并茂的文章让我很佩服！\n前言\n接上文“由一个问题到Resin ClassLoader的学习”，本文将以this.getClass().getResource(“/”).getPath()和this.getClass().getResourceAsStream(“/a.txt”)为例，一步步解析加载的过程。\n调试环境\n\n下载resin3.0.23的源码(http://www.caucho.com/download/resin-3.0.23-src.zip)。\n部署到myeclipse中，有错误，本人忽略了。Resin可运行。\n将EhCacheTestAnnotation部署到resin3.0.23中。\n调试this.getClass().getResource(“/”).getPath()。\n\n问题来了，无论如何也模拟不出来<compiling-loader>所造成的影响，一直输出：/D:/work_other/project/resin-3.0.23/bin/ 。无奈之下，采用了这种方式：使用两个eclipse，一个使用发布版本的，部署EhCacheTestAnnotation进行调试；另外一个部署resin3.0.23源码，调试到哪里对照看源码。\n开始\n1) this.getClass().getResource(“/”).getPath()\n本次调试涉及的所有类加载器为：\nEnvironmentClassLoader$24156236[web-app:http://localhost:8787/EhCacheTestAnnotation]\nEnvironmentClassLoader$7806641[host:http://localhost:8787]\nEnvironmentClassLoader$22459270[servlet-server:]\n[email protected]\n[email protected]\n首先进入Class的getResource(String name)方法，如下图：\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.46 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员因为女孩而美丽！",
    "url": "https://coolshell.cn/articles/6346.html",
    "date": "2012-01-04T08:29:08+08:00",
    "description": "\n女程序员是程序员里美丽的风景线，我希望这些女程序员的经历能让我们在这个“重男轻女”的社会中可以给女程员有更多平等的机会和条件，以及相应的尊重。因为，她们其中不乏优秀的程序员，而且在心态、态度和努力上还强过很多男性程序员，很多东西都值得我们大家向她们学习。\n这篇文章的来由是因为Eva在“三个事和三个问题”的评论里问我女孩子是否能做技术，她说她的很多师兄都告诉他不要做技术，所以，她有些不坚定了。我的回复是告诉了她我工作经历中的两个技术很牛的女孩，并且我从她们身上学到了多技术。但是，后面有一些人回复说我误导了别人。所以，我在新浪微博和twitter上征集女程序员的故事和想法。我一共收到了19封邮件，其中有17封邮件来自女程序员。其中有一个已经发布了（一个女程序员的故事），其中的一些观点已经在网上传播，并得到了大家的刮目和称赞。但这并不是特例，因为下面的这些故事中，还有很多令人刮目相看的东西。\n说明：先说明一下，这篇文章并不想讨论女孩子是不是适合做技术，这不值得讨论，因为，在“一个女程序员的故事”中我们已经知道，态度和努力才是原因，而不是性别。这里，也只是想告诉那些有“性别歧视”、“看不起女程序员”、“骄傲自大”的男程序员们，那些女程序员不为所知的一面。我把几乎所有的故事都列在这篇文章里了，我觉得我不用再多说什么了，这些故事组成的风景线，可以让你充分地了解女程序员。\nAda Lovelace 世界第一个程序员\n在看到那些故事之前，我们需要了解这样的现实——\n …\n 阅读全文 Read More\n\n (34 人打了分，平均分： 4.21 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个女程序员的故事",
    "url": "https://coolshell.cn/articles/6312.html",
    "date": "2011-12-30T10:25:02+08:00",
    "description": "\n因为有人在酷壳里评论里说我给一个女程序员的建议不靠谱，我不服，因为我的工作经历中的一些女程序员都很不错，比那些男程序员都强，所以，我在新浪微博和twitter上征集女程序员的故事和想法，这两天来，我收到了好几封邮件，让我很感动。其中，有一个故事让我回味很久，在脑海里挥之不去，可能是因为她的经历和我很相似，她的想法和我很有共鸣。\n本来，我想通过收到的这些故事然后编辑成一篇关于女程序员的文章，但是我觉得这个故事已经足够好了，任何的编辑都是对这个故事的不尊重，所以，我原封不动，一字不改地把这个故事转到这里。我把一些我认为精彩的地方加了粗。\n当然，我还是会再写一篇关于女程序员的文章，酷壳2011年底的最后篇文章和2012年的第一篇文章都是给女程序员的，因为，我为你们骄傲！\n从哪里说起呢，我的程序员之路。有些话只是自己心里想的很明白，还从没说过。希望你有耐心看完，因为我的故事不精彩，也算不上奋斗史。我的文笔和叙事能力也很差。\n高中报志愿的时候坚定的报了计算机技术及应用，当时对计算机的认识只是机房里的苹果机，和老师教的用basic 输出一个正方形之类的。 我当时觉得我对计算机一无所知，我想了解他，就选择了这个专业，当然当时程序员的收入也是可观的。 ：）\n大学四年下来，我的成绩不好，基础也不好，没拿过奖学金。大学的课程很多不喜欢，我不知道为什么计算机系还要学高等物理，和马列毛邓。这是题外话。说实在的，很多课上的我一头雾水。毕业后找工作不满意，我直接去读了软件工程（考研的专业课成绩没到线）。两年制，一年上课，一年实习。我想给自己的履历上增加一些至少能给我面试机会的经历。（我仔细思考过我成绩不好的原因，心里因素是主要的，高中在重点中学，我不能接受自己不是尖子生的事实，总在想自己为什么这么差，以至于这样的心情影响了我很多年，一直到工作后的几年）\n …\n 阅读全文 Read More\n\n (72 人打了分，平均分： 4.61 )Loading...\n"
  },
  {
    "content": "",
    "title": "由一个问题到 Resin ClassLoader 的学习",
    "url": "https://coolshell.cn/articles/6112.html",
    "date": "2011-12-28T12:22:55+08:00",
    "description": "\n（感谢网友 liuxiaori 分享其经历）\n\n背景\n某日临近下班，一个同事欲取任何类中获取项目绝对路径，不通过Request方式获取，可是始终获取不到预想的路径。于是晚上回家google了一下，误以为是System.getProperty(“java.class.path”)-未实际进行测试，早上来和同事沟通，提出了使用这个内置方法，结果人家早已验证过，该方法是打印出CLASSPATH环境变量的值。\n于是乎，继续google，找到了Class的getResource与getResourceAsStream两个方法。这两个方法会委托给ClassLoader对应的同名方法。以为这样就可以搞定(实际上确实可以搞定)，但验证过程中却发生了奇怪的事情。\n软件环境：Windows XP、Resin 3、Tomcat6.0、Myeclipse、JDK1.5\n发展\n我的验证思路是这样的：\n\n定义一个Servlet，然后在该Servlet中调用Path类的getPath方法，getPath方法返回工程classpath的绝对路径，显示在jsp中。\n另外在Path类中，通过Class的getResourceAsStream读取当前工程classpath路径中的a.txt文件，写入到getResource路径下的b.txt。\n\n由于时间匆忙，代码没有好好去组织。大致能看出上述两个功能，很简单不做解释。\n …\n 阅读全文 Read More\n\n (21 人打了分，平均分： 3.43 )Loading...\n"
  },
  {
    "content": "",
    "title": "CSDN明文口令泄露的启示",
    "url": "https://coolshell.cn/articles/6193.html",
    "date": "2011-12-22T12:08:27+08:00",
    "description": "\n2011年12月21日晚，某计算机专业的大学生寝室，某同学大叫到：“兄弟们，最新的日本XX女星的AV片已经下好，大家快过来看啊，相当精彩啊~~~”，然而，这个寝室里的其它同学似乎没有听到这哥们的呼喊，于是，这哥们又叫了三次，没有人理他，因为大家都在眉飞色舞地谈论着CSDN的明文密码和用户帐号泄露的事情，并在网上查找着下载CSDN那600万的用户数据……上面这个故事是我编的，只是想描述一下昨晚的情形。\n其实，CSDN明文密码并不是什么稀奇的事情，我是2000年注册CSDN的吧，当时找回口令的机制就是把口令直接传回来了，这一定是明文了。去年去CSDN参加移动互联网沙龙的时候，范凯和蒋涛说过明文密码的事，不过他们说的是很早以前的事了，而且一笔带过了。1年后的今天，事情又暴了，可见，“出来混的，迟早是要还的”这句话是几近真理的。\n我在以前的BLOG里就提到过CSDN的明文密码（在“如何设计用户登录功能”一文）和 帐号泄露（“如何设计自己的口令”） 的事（由此可见，酷壳里的很多文章里的事都应验了，因为我知道“出来混的，迟早是要还的”）\n（可悲吧？还是程序员的网站呢，明文口令和用户信息泄露有悖于一个程序员网站的称号）\n泄露的密码分析\n我昨晚下载了www.csdn.net.sql文件，并分析了一下这个文件，经过各种awk, grep, sort, uniq, sed后，下面是我看到的东西：\n\n有近45万的用户使用 123456789 和 12345678 做口令。\n有近40万的用户使用自己的生日做口令。\n有近15万的用户使用自己的手机号做口令。\n有近25万的用户使用自己的QQ号做口令。\n设置成弱口令的用户占了590万，也就是那种就算你用MD5或是SHA散列的也能很快就被暴力破解出来的口令。\n只有8000多个用户的口令里在8个长度以上，并有大写字母，小写字母，数字，并不在字典表里。\n\n（很好，这回泄露的还不单单只是明文用户密码和用户邮件，还有用户的手机号，生日和QQ号。挺好的）\n下面，我们来看一下top 100的口令是什么？（第一列是采用这个密码个数，第二列是密码，我擦 dearbook是什么啊）简单地看了一下，top 一万的口令都很SB。比如什么woshishui, 123abc, aaa123456，01010101，haohaoxuexi，msconfig 相当的2B，还有[email protected]，q1w2e3r4t5，看似文艺，实际很2的口令…. （可悲吧？还是程序员的网站呢，自己设的口令有悖于一个程序员的称号）\n …\n 阅读全文 Read More\n\n (45 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "三个事和三个问题",
    "url": "https://coolshell.cn/articles/6142.html",
    "date": "2011-12-20T08:39:41+08:00",
    "description": "\n从9月份开始，是很多在校毕业生的择业时期，有很多很多朋友写邮件给我让我帮他们参考如何选择工作（对不起我无法在第一时间回信，因为实在是太多了，我那繁忙工作和生活都没办法让我能即时回复），并且还有一个已经工作了多年的技术很强的朋友因为跳槽没有跳好，也和我说了很多他 的感受。从这个过程中让我有了很多感触和想法想和大家分享，本来这篇文章1个月前就想写的，只是要写下来时不知道如何整理这么多的东西和思绪。今天也不知道，但是一定要写了，不然，我的这些感触和想法就会越来越不新鲜了。\n注：这篇文章里的所有的故事都是真实的，其不可避免地会加上我强烈的个人情怀和个人色彩，叙述的过程可能比较乱，但我能确保这些都是我的肺腑之言。\n第一个事：网友的来信\n第一个故事是一个杭州的学生的故事，其有两个offer，一个是北京的（雅虎研发中心），另一个是杭州的一个做商业智能软件的公司，也是美国的上市公司。他在给我的来信内心纠结地说：\n雅虎其实很想去，虽然这几年雅虎走下坡，但还是大公司，牌子硬，里面牛人也多，有助于自己水平的提升。但感觉北京环境不好，生活不是那么舒坦，也搞不定户口，所以我去的话也只能干个三五年就得考虑跳槽到别的城市安家落户了。这么一跳，在北京积累的各种资源却又带不走 。\n杭州，比北京更适合生活，户口不是问题，朋友多，这个公司也比较宽松，有较多的业余时间跟朋友们一起搞点东西。而且这些年这个公司上升的势头，在国内设研发中心也才4年，规模不大，公司本身规模也还不大，我觉得机会还不错。再加上离家近，对家人大概可以多些照应。\n关于未来换工作，雅虎做的是搜索，广告，移动互联这几个方面的，东西在互联网企业里面都比较通用，以后跳槽的话，面相对比较宽。杭州的那个做商业智能的公司，据了解其他做的比较好的也就几个大公司如SAP，IBM有这方面的业务。\n我和这个同学发了邮件，也打了长途电话，我基本上是这样回复的——\n …\n 阅读全文 Read More\n\n (73 人打了分，平均分： 4.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "Web开发中需要了解的东西",
    "url": "https://coolshell.cn/articles/6043.html",
    "date": "2011-12-07T08:29:49+08:00",
    "description": "\n在StackExchange上有人问了这样一个问题：What should every programmer know about web development?（关于Web开发，什么是所有程序员需要知道的？）里面给出的答案非常不错，所以，我翻译转载过来。 顺便说一下，StackExchange真是非常好，大家可以对同一个答案做贡献和修订，看看这个问题的修订过程你就知道了——专业的问答网站应该怎么去做。这就是我在这篇文章中也说过真正的用户体验是什么样的。\n好了，下面是正文（我对原文做了一些批注，也许不对或有误导，请大家指正）\n下面的这些东西可能对于大多数人并不陌生，但是可能会有些东西你以前并没有看过，或是没有完全搞懂，甚至都没有听说过。（陈皓注：我相信当你看完这个列表后，你会觉得对于我国的Web开发有点弱了，还是那句话，表面上的东西永远是肤浅的）\n接口和用户体验\n\n小心浏览器的实现标准上的不一致，确信让你的网站能够适当地跨浏览器。至少，你的网站需要测试一下下面的浏览器：\n\n\n最新的 Gecko 引擎 (Firefox)，\n一个 Webkit 引擎 (Safari, Chrome, 或是其它的移动设备上的浏览器)\n IE 浏览器 (测试IE的兼容性你可以使用微软IE的 Application Compatibility VPC Images)\n Opera 浏览器。\n\n最后，你可以使用一下这个工具 来看看你的网页在不同的浏览器下是怎么被显示出来的（陈皓注：这个工具就是以前本站介绍过的在不同浏览器和平台上检查你的网站的兼容性）\n\n多考虑一下人们是怎么来访问你的网站而不是那些主流的浏览器：手机，读屏软件和搜索引擎，例如：一些Accessibility的东西： WAI 和  Section508, 移动设备开发：MobiForge.\n\n\n部署Staging：怎么部署网站的更新而不会影响用户的访问。 Ed Lucas的答案 可以让你了解一些（陈皓注：Ed说了一些如版本控制，自动化build，备份，回滚等机制）。\n\n\n千万不要直接给用户显示不友好的错误信息。\n\n …\n 阅读全文 Read More\n\n (52 人打了分，平均分： 4.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些有意思的算法代码",
    "url": "https://coolshell.cn/articles/6010.html",
    "date": "2011-11-29T11:11:07+08:00",
    "description": "\nKeith Schwarz是一个斯坦福大学计算机科学系的讲师。他对编程充满了热情。他的主页上他自己正在实现各种各样的有意思的算法和数据结构，http://www.keithschwarz.com/interesting/， 目前这个网页上有88个（见下面的列表），但这位大哥要干135个，你可以看看他的To-Do List。\n从这个列表上，我们可以看到，他从去年7月份就在自己实现这些东西了，我把他实现的这些算法转过来，\n\n一方面我们可以学习一下这些算法和代码，因为很多东西对我来说都比较新，我以前列举过一些经典的算法，算法和数据结构词典，还有可视化的数据结构和算法， 不过感觉都没有这个全。\n\n\n另一方面我希望这个事可以影响到一些正在学习编程的人。看看别人是怎么学习编程的，希望对你有借鉴作用。\n\n\n\n\nName\nLink\nDate Added\nLanguage\nDescription\n\n\n\n\nBinomial Heap\n(link)\n7‑24‑2010\nC++\nAn implementation of a binomial heap data structure for use as a priority queue.\n\n\nBounded Priority Queue\n(link)\n7‑24‑2010\nC++\nAn implementation of a priority queue with a fixed upper limit to its size..\n\n\nMatrix\n(link)\n7‑24‑2010\nC++\nA collection of classes for manipulating matrices.\n\n\nVList\n(link)\n8‑16‑2010\nJava\nAn implementation of the List abstraction backed by a VList.\n\n\nFunction Wrapper\n(link)\n8‑16‑2010\nC++\nA C++ wrapper class around unary functions.\n\n\nString\n(link)\n8‑17‑2010\nC++\nAn implementation of a string abstraction that uses the small string optimization.\n\n\n\n …\n 阅读全文 Read More\n\n (26 人打了分，平均分： 4.27 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何设计“找回用户帐号”功能",
    "url": "https://coolshell.cn/articles/5987.html",
    "date": "2011-11-28T08:34:30+08:00",
    "description": "\n因为《腾讯帐号申诉的用户体验》一文中好多人觉得腾讯申诉是世界级先进的，并让我拿出一个找回用户的帐号的功能来。本来不想写的，因为大家看看其它系统的就行的，但是，很明显有些人就是很懒，也不会思考，而且不会观察，所以，我就只好写下这篇科普性常识性的文章。\n在行文之前，我得先感谢腾讯公司的至少30名员工在《腾讯帐号申诉的用户体验》一文后的回帖（我STFG（Search The Fucking Google）看到了你们使用的那个固定IP在各个大学论坛上的腾讯的招聘广告），我感谢你们主要有两点：\n\n你们有半数以上的人留下的是gmail而不是QQMail/Foxmail的电子邮件，这点让我感到很欣慰。\n你们在加班到晚上11点的时候都能在本站回复，的确如你们的Andy Pan所说，你们的核心竞争力很强，包括水军方面。\n\n好了，让我正式谈谈这个设计。找回用户帐号通常就用三个事就可以了：邮箱，安全问答，手机。\n邮箱，安全问答，手机\n大多数的系统都会使用邮箱和安全问答，这足够了，很多系统直接用邮箱做帐号名（Apple ID，Facebook，新浪微博 ….），这样一来，就算你的系统口令被盗，帐号的是改不掉的，于是你可以用邮箱找回（注：这些系统都会验证你的邮箱是否正确）。但是，如果用邮箱做帐号，会导致你的邮箱暴露了，这样为成为垃圾邮件的受害者，而且如果你还比较2的把邮箱的口令和帐号的口令设置成一样的，那么就相当坑爹了（你可以看看本站的这篇文章——如何设计你的口令）。所以，但凡是用邮箱用为帐号的系统都不会让人看到你的注册邮箱，比如，大家就不知道我新浪微博帐号注册的邮箱，就算是知道也应该是受信的人知道（新浪微博帐号的邮箱地址的默认可见度是“你关注的人”）。\n …\n 阅读全文 Read More\n\n (40 人打了分，平均分： 3.88 )Loading...\n"
  },
  {
    "content": "",
    "title": "腾讯帐号申诉的用户体验",
    "url": "https://coolshell.cn/articles/5966.html",
    "date": "2011-11-25T08:27:09+08:00",
    "description": "\n前面写过一篇“腾讯，竞争力 和 用户体验”批评了腾讯，于是在我的微博上和博客上收到了一些反对意见，基本上是说腾讯产品的用户体验做得很好，很方便，等等，还列举了N多的例子，以及说过什么用户数量为王的言论，让我感到我应该写一篇博客。当然，如果我们只看某个技术层面的东西的话，我同意，QQ的一些产品还是很易用的。但是我们还是要看得更深一些。Effective C++的作者Scott Meyers 在《More Effective C++》中说过——“美丽的是肤浅的表现”。   我借用一下这句话，认为QQ是好的产品的观点是肤浅的认识。\n网上有大量的文章说QQ扫描硬盘啊，说QQ收集用户信息啊，你可能忘了这些。前段时间的3Q大战的那个“艰难的决定”，你好像也忘了。还有狗日的腾讯，你也忘了。包括QQ可以预防犯罪的新闻，你可能也忘（这本就是一个容易忘事的民族）。你已经被QQ的用户体验迷住你的双眼，觉得QQ无敌于天下，就像这个微博 以及微博里的回复一样在赞叹QQ注重细节一样，那些人在看到QQ的Mac版上向Steve Jobs感谢的字样激动不已。我感到你被一块红布蒙住了双眼也蒙住了天，我问你看见了什么，你说你看见了幸福 ，这个感觉真让你舒服……（对不起，一不小心我就在唱歌了，So So Sorry）\n回到正题，你会说，我们在谈技术，不谈这些非技术的。好吧，我们来看看技术上的东西。我和大家说一下这两天我的真实经历。\n两天前，我的QQ号被“恶意投诉”，封了号。腾讯让我走申诉流程，于是我看到了下面这些步骤：\n\n填入我的真实姓名，身份证号，地址等我的真实信息。 （盗号者也可以填）\n填入我的手机号，并要用这个手机号向腾讯发个短信以收取验证码。（盗号者的手机）\n填入我以前曾经使用过的QQ密码 （盗号者盗到的密码）\n填入我是什么时候，在哪里注册的QQ （盗号者可以填忘记了）\n填入最近3年来，我在哪里使用过QQ （盗号者也可以填忘 记了）\n邀请QQ好友来帮助申诉，越多越好，需要填号好友的QQ号和真实姓名。 （盗号者也可以用自己的小号，这些小号可以加你为好友）\n\n这已经是非同寻常的流程了…… 从这个申请过程中你看到了什么？你是否看到了这些东西：\n …\n 阅读全文 Read More\n\n (63 人打了分，平均分： 4.24 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些文章资源和趣闻",
    "url": "https://coolshell.cn/articles/5537.html",
    "date": "2011-11-24T12:39:04+08:00",
    "description": "\n下面是我这段时间来收集的一些有意思的东西。本站这样的文章还很多，如这个，这个，这个。\nJavascript Garden，这是学习Javascript最好的网站了。http://bonsaiden.github.com/JavaScript-Garden，这个文档由两具StackOverflow的人写成, Ivo Wetzel(Writing) 和 Zhang Yi Jiang (Design)，表示敬意。\n想看看Web开发有哪些技术吗？你得看看这个网站：http://stackparts.com/，他对目前几乎所有Web上用得到的技术都分了个类。下面是个抓图。\n\nMozilla的安全编程规范 https://wiki.mozilla.org/WebAppSec/Secure_Coding_Guidelines Downloads associated to Software development\nPHP,Perl, Ruby, Python语法比较http://hyperpolyglot.org/scripting?utm_source\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.46 )Loading...\n"
  },
  {
    "content": "",
    "title": "腾讯，竞争力 和 用户体验",
    "url": "https://coolshell.cn/articles/5901.html",
    "date": "2011-11-22T08:29:24+08:00",
    "description": "\n自从那篇rant了一堆公司都的文章发布来，得到了大家的关注，有些朋友让我写一下腾讯，在我的微博上（@左耳朵耗子）还有位腾讯的朋友让我也评价一下腾讯。本来不想写的，觉得腾讯没啥好说的，但是因为下面的几个原因，让我有点坐不住了：\n\n这两天知乎上的一个“腾讯的核心竞争力”的贴子在微博上被很多人所推崇。\n还有一个网友发邮件给我说让我别rant了，宁可C2C也比rant有意义。\n我周末的时候去豆瓣和他们交流了一些关于产品和用户体验方面的话题。\n还看到了Jeff Bezos的访谈文章《贝佐斯：亚马逊是科技界唯一一家低利润公司》\n\n于是就有了这篇文章，但不想再rant了，我希望这篇文章更有价值一些，但是我喜欢的调侃的风格依然，因为这是我觉得能让文章有趣味的方式。\n腾讯的“价值”\n首先我想说说腾讯的价值。根据我那篇 rant 的文章来说，我觉得人要活得有价值，事业也要做得有价值。我不太待见那些没有价值的东西。所以，我在那篇文章里让大家都思考了一个问题，我们做这个事的价值在哪里？所以，要评论腾讯，就得想想他的价值。众所周知，腾讯的起家是通过IM软件QQ，当然，他有段时间几乎快不行了。不过挺过来了，造就了这么一个帝国。所以，腾讯的价值应该是即时通讯，让大家的沟通变得更顺畅，这点腾讯的确做得非常强大，视频，音频，涂鸦，抓屏，表情，Q币，共享，群聊，新闻，弹窗，离线文件，远程协助…… 的确做得非常地体贴用户。除了扫描硬盘文件有点那个。\n但是，最近的腾讯变了（当然有人说他也没有变，QQ本来就是抄来的），有什么就抄什么，没有创意，山寨大王，成了腾讯的代名词。马云也说过：“现在腾讯拍拍网最大的问题就是没有创新，所有的东西都是抄来的”。网上还有很多，什么“一直在抄袭，从未超越过”或是“一直在山寨，从没反省过”等等的话，还有“自从有了XXX，腾讯就出了XXX”的文体。\n但是，你们都错了，包括马云，我不同意你们，我觉得这正是腾讯的价值所在。\n …\n 阅读全文 Read More\n\n (76 人打了分，平均分： 4.42 )Loading...\n"
  },
  {
    "content": "",
    "title": "来信， 创业 和 移动互联网",
    "url": "https://coolshell.cn/articles/5815.html",
    "date": "2011-11-15T08:31:21+08:00",
    "description": "\n上一篇博文翻译了Steve Yegge的rant，这两天有一些事让我也想rant一下（所谓rant就是一篇巨长无比的抱怨和说教），不过无论是从见解还是恶搞来说肯定没有SteveY的水平高，所以，这篇博文只是单纯的rant，看标题就知道了，就像“篱笆，女人和狗”一样，乡土味实足。所以，下述的一些观点未必正确，也未必靠谱，也就是我的个人唠叨罢了，我想到哪里说到哪里。（篇幅较长，见谅）\n引子\n我前两天，收到一封邮件，一位快要毕业的的大学生问我，是去百度，还是去创新工场？他在来信中说，从个人道德价值观来说，他想去创新工场，要远离流氓企业，不然会有狼狈为奸、助纣为虐的感觉，对不起自己。但是创新工场那边情况不熟悉， 不知道怎么选择，并问我现在比较热的移动互联网靠不靠谱。\n正好这两天我在微博里看到大家转贴李开复的几个让毕业生创业的微博，比如，这个微博，还有 这个微博。呵呵。\n李开复：有关毕业生高科技创业,我的建议：1）创业需要理解趋势、汇集精英、实践经验,因此大学毕业不要主导创业,只能参加创业公司,2）最好远在毕业前就寻找创业公司实习机会（无偿亦可）,因为也许创业并不适合你或你想象那样,3）毕业时若想学习创业,最好到创业公司。到大公司学习能学技术但不够针对性。\n还有前两天的“移动开发者大会”，然后，又有一个以前的同事和我谈了一下他创业的事以及他的想法，正好又在网上看到罗永浩同学的那个“一个理想者创业的故事”的演讲。还有一些做blog插件的团队希望我能在酷壳上安装一下他们的插件。等等，等等。所以，让我有了这个可以rant的写作情绪。\n …\n 阅读全文 Read More\n\n (102 人打了分，平均分： 4.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "千万别用MongoDB？真的吗？！",
    "url": "https://coolshell.cn/articles/5826.html",
    "date": "2011-11-10T08:28:26+08:00",
    "description": "\n某人发了一篇Don’t use MongoDB的血泪控诉，我把原文翻译如下，你可以看看。不过，我想我们还要去看看10gen CTO的对此事的回复，我们还要去在Reddit上看看大家的说法，10gen CTO的对此事的回复后面也有一堆人在讨论这个事，还有一些程序员开始去读MongoDB的源码了，呵呵。看样子，说MongoDB的这些事并不是真的。\n10gen CTO 对此事的并不完全知道，其在回复，对些文中的每一条都做了回复。我把其回复的大体意思也放在原文中。不过，很有意思的是那些程序员的讨论。建议大家看看。\n正文\n因为各种政治原因，我这段时间没有说什么，但是现在我觉得因为要对社会负责，所以我要阻止大家不要把你们的业务放在MongoDB上。\n我的团队在一个有巨大用户量（一个有千万用户级的大型的公司）系统上使用的MongoDB，这个系统上让MongoDB有非常大的负载。早期，我们以为使用MongoDB会像10gen公司（MongoDB背后的公司）宣扬其在长期性能扩展有很多好处。但是，我们错了，而这个rant(长篇抱怨)就是为了让你不要相信那些所谓的成功经验而和我们一样犯了大错。如果有人能避免你上当，那么就得我写这么多。希望能警醒更多的人。\n注意，对于和10gen打交道的经历来说，他们给予了我们充分了热情和帮助，而且非常地好。但是这并不能成为我不告诉大家他们的产品失败的理由。\n …\n 阅读全文 Read More\n\n (20 人打了分，平均分： 3.70 )Loading...\n"
  },
  {
    "content": "",
    "title": "SteveY对Amazon和Google平台的吐槽",
    "url": "https://coolshell.cn/articles/5701.html",
    "date": "2011-11-03T09:19:12+08:00",
    "description": "\nSteve Yegge， Amazon的前员工，现任Google员工，其本来想在Google+上和Google的员工讨论一些关于平台的东西，结果不小心把圈子设成了Public，结果这篇文章就公开给了全世界，引起了剧烈的反应。发布后很快他就马上把这篇文章删了，不过，互联网上早备份了下来——SteveY’s Google Platforms Rant。后来，Steve在其Google+上作了一些解释，大体是说他喝多了，而且又是在凌晨，所以大脑不清，文章中的观点很主观，极端且不完整，还有Google的PR对他很好，等等，等等 。\n几个星期前看到时就一直都想翻译一下这篇文章，不过因为最近事情太多，文章又很长，所以现在才翻译完成，翻译的不好，还请大家指正。\n导读\n在你阅读正文以前，我想说明几点，希望你注意一下：\n\nSteve这个人非常喜欢写长篇大论的东西。而且比较喜欢辛辣调侃和恶搞的文风，这点大家要注意！\n\n\n文中先“骂”Amazon公司，再通过“骂”Amazon的创始人贝索斯Bezos并烘托出他的的悟性和雄心，最后教育了一下Google。\n\n\n我把文章分成了三个部分，这样方便大家阅读和讨论。第一部分只是个人情绪化的抱怨，第二部分是说Amazon的成长，第三部分是教育Google，我觉得第二部和第三部分是重点。\n\n\n对于我们来说，我们应该获取Steve那些关于平台（Platform）相关的那些有价值的观点。尤其是他说的Amazon如何进化成一个平台性的公司，以及阐述Google应该怎么做的那些观点。\n\n\n关于对Amazon的那些指责，我想说，6年，对于一个世界级的互联网公司，已经很不一样了。\n\n正文\n第一部分\n我曾在Amazon工作了六年半，现在，我在Google的日子也差没不多这么长了。对于这两家公司，有一件事总是萦绕着我——这种感觉一天比一天强烈──那就是，Amazon每件事都做错了，而Google每件事都做对了。当然啦，这是很笼统的话，但却是惊人的准确，相当的疯狂吧。大概有一百甚至两百种不同的地方可以让我们去比较这两个公司，而Google可能在每一项都能胜出，如果我记的没错，除了其中3项以外。因为，我曾用电子表格把这些项都列出来了，只是法务部门不会让我给任何人看，即使人事招募部门很喜欢这个报表。\n …\n 阅读全文 Read More\n\n (59 人打了分，平均分： 4.46 )Loading...\n"
  },
  {
    "content": "",
    "title": "深入理解C语言",
    "url": "https://coolshell.cn/articles/5761.html",
    "date": "2011-11-01T08:26:38+08:00",
    "description": "\nDennis Ritchie  过世了，他发明了C语言，一个影响深远并彻底改变世界的计算机语言。一门经历40多年的到今天还长盛不衰的语言，今天很多语言都受到C的影响，C++，Java，C#，Perl， PHP， Javascript， 等等。但是，你对C了解吗？相信你看过本站的《C语言的谜题》还有《谁说C语言很简单？》，这里，我再写一篇关于深入理解C语言的文章，一方面是缅怀Dennis，另一方面是告诉大家应该如何学好一门语言。（顺便注明一下，下面的一些例子来源于这个slides）\n首先，我们先来看下面这个经典的代码：\nint main()\n{\n    int a = 42;\n    printf(“%d\\n”, a);\n}\n从这段代码里你看到了什么问题？我们都知道，这段程序里少了一个#include <stdio.h> 还少了一个return 0;的返回语句。\n不过，让我们来深入的学习一下，\n\n这段代码在C++下无法编译，因为C++需要明确声明函数\n这段代码在C的编译器下会编译通过，因为在编译期，编译器会生成一个printf的函数定义，并生成.o文件，链接时，会找到标准的链接库，所以能编译通过。\n 但是，你知道这段程序的退出码吗？在ANSI-C下，退出码是一些未定义的垃圾数。但在C89下，退出码是3，因为其取了printf的返回值。为什么printf函数返回3呢？因为其输出了’4′, ‘2’,’\\n’ 三个字符。而在C99下，其会返回0，也就是成功地运行了这段程序。你可以使用gcc的 -std=c89或是-std=c99来编译上面的程序看结果。\n另外，我们还要注意main()，在C标准下，如果一个函数不要参数，应该声明成main(void)，而main()其实相当于main(…)，也就是说其可以有任意多的参数。\n\n我们再来看一段代码：\n …\n 阅读全文 Read More\n\n (58 人打了分，平均分： 4.09 )Loading...\n"
  },
  {
    "content": "",
    "title": "API设计：用流畅接口构造内部DSL",
    "url": "https://coolshell.cn/articles/5709.html",
    "date": "2011-10-31T08:28:47+08:00",
    "description": "\n感谢@weidagang （Todd）向酷壳投递本文。\n程序设计语言的抽象机制包含了两个最基本的方面：一是语言关注的基本元素/语义；另一个是从基本元素/语义到复合元素/语义的构造规则。在C、C++、Java、C#、Python等通用语言中，语言的基本元素/语义往往离问题域较远，通过API库的形式进行层层抽象是降低问题难度最常用的方法。比如，在C语言中最常见的方式是提供函数库来封装复杂逻辑，方便外部调用。\n不过普通的API设计方法存在一种天然的陷阱，那就是不管怎样封装，大过程虽然比小过程抽象层次更高，但本质上还是过程，受到过程语义的制约。也就是说，通过基本元素/语义构造更高级抽象元素/语义的时候，语言的构造规则很大程度上限制了抽象的维度，我们很难跳出这个维度去，甚至可能根本意识不到这个限制。而SQL、HTML、CSS、make等DSL（领域特定语言）的抽象维度是为特定领域量身定做的，从这些抽象角度看问题往往最为简单，所以DSL在解决其特定领域的问题时比通用程序设计语言更加方便。通常，SQL等非通用语言被称为外部DSL（External DSL）；在通用语言中，我们其实也可以在一定程度上突破语言构造规则的抽象维度限制，定义内部DSL（Internal DSL）。\n本文将介绍一种被称为流畅接口（Fluent Interface）的内部DSL设计方法。Wikipedia上Fluent Interface的定义是：\nA fluent interface (as first coined by Eric Evans and Martin Fowler) is an implementation of an object oriented API that aims to provide for more readable code. A fluent interface is normally implemented by using method chaining to relay the instruction context of a subsequent call (but a fluent interface entails more than just method chaining).\n\n下面将分4个部分来逐步说明流畅接口在构造内部DSL中的典型应用。\n\n1. 基本语义抽象\n如果要输出0..4这5个数，我们一般会首先想到类似这样的代码：\n\n//Java\nfor (int i = 0; i < 5; ++i) {\n    system.out.println(i);\n}\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 2.74 )Loading...\n"
  },
  {
    "content": "",
    "title": "多些时间能少写些代码",
    "url": "https://coolshell.cn/articles/5686.html",
    "date": "2011-10-25T08:24:44+08:00",
    "description": "\n我在我的微博上说过这样一段话，我想在这里把我的这个观点阐述地更完整一些。\n@左耳朵耗子：聪明的程序员使用50%-70%的时间用来思考，尝试和权衡各种设计和实现，而用30% – 50%的时间是在忙碌着编码，调试和测试。聪明的老板也会让团队这样做。而傻逼的老板，苦逼的程序员会拿出来100%-150%的时间来忙着赶进度，返工，重构，fix 大量的bug… 所以， 越差的团队一般会越忙，而且还忙不完。\n在现在这个浮躁的时期，再加上敏捷咨询师们念的歪经，他们让人感觉上就像是软件产品是可以在很短的时间内高质量的完成的，这令那些管理者们很兴奋，就像巴甫洛夫的条件反射实验中的狗看到了肉就会流口水那样兴奋。他们使用TDD，快速迭代，不断重构，持续集成直至持续部署的方法在进行软件开发。\n软件开发真是这样的吗？难道不需要花时间去思考吗？对此，有些观点在Todd的《“品质在于构建过程”吗？》以及《Bob大叔和Jim Coplien对TDD的论战》中谈到过了。我只想想表达下面的观点：\n\n软件的精髓在于设计，设计是一件很费大脑的事件。对于软件来说，设计没有完美的，它总是一件需要取舍需要权衡的事，比如：时间换空间，空间换时间，TCP或UDP，同步还是异步，数据冗余还不冗余等等。那怕是一个小小的observers模式是pull方式还是push方式 都需要仔细讨论。这些的东西需要时间和做前期尝试。\n\n\nTDD、快速原型和迭代可能会对软件和团队产生负面影响。在一开始，你需要花很大的精力来让你的软件从无到有（做过软件的人都知道，从零开始写代码是很痛苦的事），但是因为你没有想好，先做再说，所以，后期你会面临更多的质量问题而让你需要花更多的时间精力。当然，那些咨询师会让你用持续集成和持续部署这样的方法。但我想告诉你，这并不解决你软件设计的缺陷。举个例子——TDD、迭代、原型只关注功能性需求，其不会关注非功能性需求，比如性能问题，高可用性问题，系统维护问题（模块的耦合问题），等等。而这些问题往往都可以让你的软件设计重新来过。\n\n\n重构是恶梦，重构应该越少越好。当你维护一个复杂的系统时你会知道重构是一件多么恐怖的事情（参看《重构代码的7个阶段》）。如果一开始没有想好，你要面临的不单单是re-design, re-architect，还要面对时间和人力成本的增加，最难的是你还要面对的是团队士气因为不断的rework而逐渐低落并产生厌倦和懈怠情绪。\n\n …\n 阅读全文 Read More\n\n (28 人打了分，平均分： 3.82 )Loading...\n"
  },
  {
    "content": "",
    "title": "Stay Hungry, Stay Foolish ！！",
    "url": "https://coolshell.cn/articles/5651.html",
    "date": "2011-10-20T08:26:50+08:00",
    "description": "\n在整个社会都在关注乔帮主的时候，我想在这里和大家分享一个真实的就在我们程序员身边的故事。和我在《如果你看不见你还能编吗？》一文里介绍的那些盲人程序员一样，同样是Stay Hungry， Stay Foolish。但我个人更认为我今天想要给大家讲述的这个故事对于我们这些普通人更有意义一些。我真心的希望大家认真看完这个“从刷厕所到程序员”故事后，我们能从中感悟到点什么。\n因为朋友的原因，我和一个创业团队经常有些往来，通过这个团队，我认识了这个故事的主人翁——王平（@wpingsuper）。其实，很早前他在Google Reader和Buzz里follow了我，但我从没和他交流过。而他的经历我却是在上周末去看望这个创业团队的时候才听说。我问他们要了王平的电话，联系了王平，详细地了解了王平的经历，并征得他的同意，在这里给大家分享他的故事。\n王平是一个贵州人，03年大学毕业，体育专业，没有任何家庭背景，只能在贵州的山区里的一个中学里当体育老师，月薪150元。可能和大多数心怀梦想的年轻人一样，他并不甘心，从03年到05年间，他有好多次到北京，他觉得在大城市里有他的梦想。于是，他在04年底，05年初，他正式来到了北京，因为大学专业的问题，他无法找像大学生一样找到不错的工作，那时的他只能在北京一家很小的餐馆当清洁工，他在餐馆里洗盘子，扫地，刷厕所，一个月400元钱。\n因为他的学历是这个小餐馆里学历最高的，所以，餐馆里出了什么事都会让他对去搞，所以，财务使用的电脑有了故障也让他去修，当时的他根本对电脑完全不知道是怎么一回事，但是自从接触了电脑以后他就迷上了电脑。他和我说，他这个人就是好奇心强，好动，什么都想弄一弄，所以，时间长了，弄得多了，也能为餐饮解决一些没有懂的问题，维护财务电脑就是其中之一。日子一长，虽然还是刷厕所，但是薪水也涨到了800元一个月，就连餐馆的大厨也对他说，他不属于这里，他将来一定会有前途的。当时的他还觉得不可能，笑了笑就过了。\n …\n 阅读全文 Read More\n\n (80 人打了分，平均分： 4.73 )Loading...\n"
  },
  {
    "content": "",
    "title": "Test-Driven Development？别逗了",
    "url": "https://coolshell.cn/articles/5531.html",
    "date": "2011-10-17T08:38:15+08:00",
    "description": "\n这篇文章来源于Peter Sergeant在Write More Test 博客上的《Test-Driven Development? Give me a break…》，在原文和Reddit 上有很大反响。这篇文章里的很多观点在《TDD并不是看上去的那么美》和《再谈敏捷和TW咨询师》里都出现过（我个人觉得我的观点比其更全面一些）。就像我转的《Scrum为什么不行》 和《Bob大叔和Jim Coplien对TDD的论战》一样，从这些贴子我们可以看到——这是一个全世界的问题，并不是只有在中国才有的问题。\n很多敏粉都在说我在是喷敏捷，黑敏捷，向敏捷泼脏水，我只想对这些人说——你们这样的见解很肤浅也很敏感，你们根本就没有认识到——争论，反思和不同观点的意义，你也就无法了解你们所信仰的敏捷！你们只是在肤浅和盲目地信仰和教条敏捷中的许多名词、方法和标准答案罢了。\n——————————————正文开始——————————————\n对于程序员来说有些事有非常危险的信号（red flag）。当我听到有人开始信仰Test-Driven Development 是 One True Programming Methodology（唯一正确的编程方法论），这就是危险信号（red flag），我开始假设你是一个劣等、没有经验的程序员，或是某些敏捷咨询师。\n测试只是一个工具来帮助你，而不是用来证明谁比谁更虔诚，或是我的屌比你的要大，等这种愚蠢的行为。测试是用来让程序员得到有帮助的、更快的反馈，从而找到正确的路径，如果你搞坏一些事，其还可以用来给后人一些警告。这根本就不是一个神秘的有魔力的方法其可以让你的代码变得更好……\n整个Test-Driven Development的概念是麻痹和信奉，从而让其成为你的人生观。相反的：Developer-Driven Testing，它给你和你的同事一些有用的工具来解决问题，来支持你自己，而不是那种以工具或方法为中心的让你假设其应该是那样的测试。\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 3.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "“品质在于构建过程”吗？",
    "url": "https://coolshell.cn/articles/5625.html",
    "date": "2011-10-16T13:16:55+08:00",
    "description": "\n感谢@weidagang （Todd）向酷壳投递的这篇精彩的文章。原文\n今天在微博上看到几位敏捷爱好者探讨敏捷测试和质量保证问题，我忍不住也加入了讨论：\nZ先生原帖：我刚才看到一个大会演讲稿，谈到敏捷测试六大指导原则：1.仅靠测试人员不可能获得高质量的软件，质量是整个研发团队的责任；2. 场景是不可穷举的，测试活动必须是风险驱动的，关注于高风险的场景；3.分层自动化测试是唯一出路;4.在正确的位置进行恰当的测试是自动化的关键；【待续】\nS先生回复：品质在于构建过程。检验贯穿构建过程，提供及时反馈。\n我回复：什么样的构建过程才能出Unix这样的品质呢？迭代？快速反馈？TDD?\nS先生回复：据说stroustrup听到重构时的反应是，我们从七十年代就这样做了。推荐《UNIX编程环境》，了解大师的编程方式。\n我回复：您偷换了概念。不能说大师用了重构，C++和UNIX的品质就是靠重构或某种构建过程得来的。厨师做菜用到了勺子，不等于菜好吃是因为勺子。\nS先生回复：我没有概念。我们看到一个果，就问因是什么。其实是泛因果，无因果，一切是机缘凑巧。\n我回复：“品质在于构建过程”难道不是一个明白的因果描述吗？\nS先生回复：品质在于构建的人。我说话时没因果，你看到了因果。\n我回复：欢迎敏捷爱好者围观！\n很高兴几个回合讨论下来S先生修正了先前“品质在于构建过程”的观点。什么重构、TDD、迭代、快速反馈等等构建过程都不是Unix品质的核心要素。我不但不认同“品质在于构建过程”、“测试是最好的设计方法”这类机械式的观点，而且也不满意把软件优劣归结于“人是根本”的简单回答。我们需要探索一个既非机械式，也非简单地归结为某种理念的答案。\n …\n 阅读全文 Read More\n\n (29 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "那些曾伴我走过编程之路的软件",
    "url": "https://coolshell.cn/articles/5576.html",
    "date": "2011-10-14T13:58:40+08:00",
    "description": "\n收家的时候发现了一张VC++6.0的光盘，实然引发了我的怀旧情结。于是在微博上感叹了一下，看到一些朋友的回应，还有朋友提到了Turbo C 2.0，于是更回放大了我的怀旧情绪，让我回想了很多N年前伴我走过编程之路的软件。现在看下来，有些感叹，又有些可笑。感叹的是技术发展的变迁，可笑的是当时的一些想法。（Unix/Linux是在大四和毕业的时候接触的，虽然这是我的强项，但是这下面的编程这么多年来没什么变化，所以就不提了）注：图片较多，请稍等。\n还记得第一次接触编程是在高中的时候，用中华学习机学Basic程序，后来到了大学，虽然学校的课程没有教Basic语言，但是DOS下有一个叫Quick Baisc的东西让我把高中时的知识又捡了回了。\n\n大学里学的第一门语言是Pascal，所以，用的编程软件也就是Turbo Pascal，还记编译起来巨快无比，尤其是那个只有软盘和640K的基本内存的时代。\n …\n 阅读全文 Read More\n\n (34 人打了分，平均分： 4.53 )Loading...\n"
  },
  {
    "content": "",
    "title": "如果你看不见你还能编程吗？",
    "url": "https://coolshell.cn/articles/5514.html",
    "date": "2011-09-21T08:26:58+08:00",
    "description": "\n这是个StackOverflow上的问题 How can you program if you’re blind? 。在看到这个问题的时候，我感到应该不可能，但是我错了，这个问题的前两个答案让我深深地震憾了。\n第一个答案的回复人是Jared（其在StackOverflow上的积分有将近14K），但是你能想得到他是一个盲人吗？他回复到——\n我是一个完全失明的大学学生，我做过一些程序员的实习工作，所以我的回复基于我的这些经历。我使用Windows XP 和  Jaws 来为了读出屏幕上的内容。\n对于Java 编程，我使用eclipse这个强大的IDE。我使用SWT开发GUI。对于.NET编程，其使用Visual Studio 2005，使用Jaws可以非常容易地操作VS2005，而且其还有一些很不错的脚本来可容易地用来做表单设计。\n对于C/C++，我使用cygwin + gcc 也使用emacs 和 vim 做出编辑器（使用Emacspeak虽然有时候有点迟钝）。在实习过程中，我做了很多和Z/OS相关的编程工作。我使用rlogin通过cygwin登录大型机的USS系统，并使用C3270作为其3270仿真器来访问大型机的ISPF部分。\n我依赖于合成语音系统，也需要 Braille display， 我发现使用合成语音系统很快，但是使用 Braille display有时候有些问题。比如程序有太多的嵌套括号。\n关于Braille display，又叫盲文显示机，是能以盲文进行输出的电子机械式设备。一般来说，该设备通过在平坦表面上打孔来实现点阵的表现。有了该设备的帮助，无法使用一般的显示设备的失明用户也能够阅读文字。如下所示。\n …\n 阅读全文 Read More\n\n (62 人打了分，平均分： 4.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些文章和各种资源",
    "url": "https://coolshell.cn/articles/5224.html",
    "date": "2011-09-20T08:32:52+08:00",
    "description": "\n下面是近期收录的一些文章和资源，希望对你有用。\n系统方面\n\n印度的电子商务网站flipkart的性能扩展（PPT） http://www.slideshare.net/sids/how-flipkart-scales-php，都是一些最基本的东西，对于初学者来说很不错。PPT做的也不错。\n\n\nTagged.com的扩展之路 – 1亿用户，1000台服务器，50亿的PV http://highscalability.com/blog/2011/8/8/tagged-architecture-scaling-to-100-million-users-1000-server.html 还是PHP的WEB站点。另外，highscalability.com这个网站上有很多和高性能有关的文章，很不错。比如最新的：Stuff The Internet Says On Scalability For September 16, 2011\n\n\n\n浏览器是怎么工作的？ http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/ 相当不错的一个教程，告诉你浏览器里面是怎么搞的，很不错。如果图片看不到，可以看这里。如果你英文不是太好，你可以看看中译版，译得并不是太好。\n\nMozilla's Gecko rendering engine main flow\n\n怎么使用epoll的示例 https://banu.com/blog/2/how-to-use-epoll-a-complete-example-in-c/\n\n\nIntel C/C++ 64位程序开发教程 http://software.intel.com/en-us/articles/lessons-on-development-of-64-bit-cc-applications/ 本站以前也介绍过一个关于64位C/C++的编程注意事项。\n\n …\n 阅读全文 Read More\n\n (22 人打了分，平均分： 4.27 )Loading...\n"
  },
  {
    "content": "",
    "title": "给程序员的VIM速查卡",
    "url": "https://coolshell.cn/articles/5479.html",
    "date": "2011-09-16T09:07:05+08:00",
    "description": "\n前几天酷壳发布过“vim简明攻略”，不知道大家练得怎么样了。如果你练了一下，那么这里这个速查卡就会对你有帮助了。以前本站也有过一个（vim速查卡），不过其太简单了。我觉得这个很不错，很全，很直观。这个速查卡来自这里。其用颜色标注了级别：\n\n  Green   = 存活级\n  Yellow   = 感觉良好\n  Orange   / Blue = 高级\n  Red   = 专家级\n\n下面的图片点击可以看大图：\n给程序员的VIM速查卡（点击看大图）\n你还可以下载PDF版的和Excel版的，如果你是色盲的话，还有蓝色版PDF的。如果你不是很喜欢的话，这里还有几个：\n …\n 阅读全文 Read More\n\n (34 人打了分，平均分： 4.15 )Loading...\n"
  },
  {
    "content": "",
    "title": "千万不要把 bool 设计成函数参数",
    "url": "https://coolshell.cn/articles/5444.html",
    "date": "2011-09-08T15:35:18+08:00",
    "description": "\n我们有很多Coding Style 或 代码规范。但这一条可能会经常被我们所遗忘，就是我们经常会在函数的参数里使用bool参数，这会大大地降低代码的可读性。不信？我们先来看看下面的代码。\n当你读到下面的代码，你会觉得这个代码是什么意思？\nwidget->repaint(false);\n是不要repaint吗？还是别的什么意思？看了文档后，我们才知道这个参数是immediate， 也就是说，false代表不立即重画，true代码立即重画。\nWindows API中也有这样一个函数：InvalidateRect，当你看到下面的代码，你会觉得是什么意思？\nInvalidateRect(hwnd, lpRect,  false);\n我们先不说InvalidateRect这个函数名取得有多糟糕，我们先说一下那个false参数？invalidate意为“让XXX无效”，false是什么意思？双重否定？是肯定的意思？如果你看到这样的代码，你会相当的费解的。于是，你要去看一下文档，或是InvalidateRect的函数定义，你会看到那个参数是 BOOL bErase，意思是，是否要重画背景。\n这样的事情有很多，再看下面的代码，想把str中的”%USER%”替换成真实的用户名：\nstr.replace(\"%USER%\", user, false); // Qt 3\nTNND，那个false是什么意思？不替换吗？还是别的什么意思，看了文档才知道，false代码大小写不敏感的替换。\n其实，如果你使用枚举变量/常量，而不是bool变量，你会让你的代码更易读，如：\n …\n 阅读全文 Read More\n\n (31 人打了分，平均分： 3.87 )Loading...\n"
  },
  {
    "content": "",
    "title": "简明 Vim 练级攻略",
    "url": "https://coolshell.cn/articles/5426.html",
    "date": "2011-09-07T08:27:26+08:00",
    "description": "\nvim的学习曲线相当的大（参看各种文本编辑器的学习曲线），所以，如果你一开始看到的是一大堆VIM的命令分类，你一定会对这个编辑器失去兴趣的。下面的文章翻译自《Learn Vim Progressively》，我觉得这是给新手最好的VIM的升级教程了，没有列举所有的命令，只是列举了那些最有用的命令。非常不错。\n——————————正文开始——————————\n你想以最快的速度学习人类史上最好的文本编辑器VIM吗？你先得懂得如何在VIM幸存下来，然后一点一点地学习各种戏法。\nVim the Six Billion Dollar editor\nBetter, Stronger, Faster.\n学习 vim 并且其会成为你最后一个使用的文本编辑器。没有比这个更好的文本编辑器了，非常地难学，但是却不可思议地好用。\n我建议下面这四个步骤：\n\n存活\n感觉良好\n觉得更好，更强，更快\n使用VIM的超能力\n\n当你走完这篇文章，你会成为一个vim的 superstar。\n在开始学习以前，我需要给你一些警告：\n\n学习vim在开始时是痛苦的。\n需要时间\n需要不断地练习，就像你学习一个乐器一样。\n不要期望你能在3天内把vim练得比别的编辑器更有效率。\n事实上，你需要2周时间的苦练，而不是3天。\n\n …\n 阅读全文 Read More\n\n (183 人打了分，平均分： 4.68 )Loading...\n"
  },
  {
    "content": "",
    "title": "C语言中史上最愚蠢的Bug",
    "url": "https://coolshell.cn/articles/5388.html",
    "date": "2011-08-26T10:17:48+08:00",
    "description": "\n本文来自“The most stupid C bug ever”，很有意思，分享给大家。我相信这样的bug，就算你是高手你也会犯的。你来看看作者犯的这个Bug吧。。\n首先，作者想用一段程序来创建一个文件，如果有文件名的话，就创建真正的文件，如果没有的话，就调用?tmpfile()?创建临时文件。他这段程序就是HTTP下载的C程序。code==200就是HTTP的返回码。\n\nelse if (code == 200) {     // Downloading whole file\n    /* Write new file (plus allow reading once we finish) */\n    g = fname ? fopen(fname, \"w+\") : tmpfile();\n}\n但是这个程序，只能在Unix/Linux下工作，因为 Microsoft 的?tmpfile()的实现?居然选择了 C:\\ 作为临时文件的存放目录，这对于那些没有管理员权限的人来说就出大问题了，在Windows 7下，就算你有管理员权限也会有问题。所以，上面的程序在Windows平台下需要用不同的方式来处理，不能直接使用Windows的tmpfile()函数。\n于是作者就先把这个问题记下来，在注释中写下了FIXME：\n\nelse if (code == 200) {     // Downloading whole file\n    /* Write new file (plus allow reading once we finish) */\n\n    // FIXME Win32 native version fails here because\n    //   Microsoft's version of tmpfile() creates the file in C:\\\n    g = fname ? fopen(fname, \"w+\") : tmpfile();\n}\n然后，作者觉得需要写一个跨平台的编译：\nFILE * tmpfile ( void ) {\n#ifndef _WIN32\n    return tmpfile();\n#else\n    //code for Windows;\n#endif\n}\n然后，作者觉得这样实现很不好，会发现名字冲突，因为这样一来这个函数太难看了。于是他重构了一下他的代码——写一个自己实现的tmpfile() – w32_tmpfile，然后，在Windows 下用宏定义来重命名这个函数为tmpfile()。（陈皓注：这种用法是比较标准的跨平台代码的写法）\n …\n 阅读全文 Read More\n\n (43 人打了分，平均分： 4.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "你会做Web上的用户登录功能吗？",
    "url": "https://coolshell.cn/articles/5353.html",
    "date": "2011-08-25T08:48:48+08:00",
    "description": "\nWeb上的用户登录功能应该是最基本的功能了，可是在我看过一些站点的用户登录功能后，我觉得很有必要写一篇文章教大家怎么来做用户登录功能。下面的文章告诉大家这个功能可能并没有你所想像的那么简单，这是一个关系到用户安全的功能，希望大家能从下面的文章中能知道什么样的方法才是一个好的用户登录功能。以下内容，转载时请保持原文一致，并请注明作者和出处。\n用户名和口令\n首先，我们先来说说用户名和口令的事。这并不是本站第一次谈论这个事了。如何管理自己的口令让你知道怎么管理自己的口令，破解你的口令让你知道在现代这样速度的计算速度下，用穷举法破解你的口令可能会是一件很轻松的事。在这里我想告诉从开发者的角度上来做设计这个用户名和口令的事。下面一几件规则：\n\n限制用户输入一些非常容易被破解的口令。如什么qwert，123456, password之类，就像twitter限制用户的口令一样做一个口令的黑名单。另外，你可以限制用户口令的长度，是否有大小写，是否有数字，你可以用你的程序做一下校验。当然，这可能会让用户感到很不爽，所以，现在很多网站都提供了UX让用户知道他的口令强度是什么样的（比如这个有趣的UX），这样可以让用户有一个选择，目的就是告诉用户——要想安全，先把口令设得好一点。\n\n\n千万不要明文保存用户的口令。正如如何管理自己的口令所说的一样，很多时候，用户都会用相同的ID相同的口令来登录很多网站。所以，如果你的网站明文保存的话，那么，如果你的数据被你的不良员工流传出去那对用户是灾难性的。所以，用户的口令一定要加密保存，最好是用不可逆的加密，如MD5或是SHA1之类的有hash算法的不可逆的加密算法。CSDN曾明文保存过用户的口令。（另，对于国内公司的品行以及有关部门的管理方式，我不敢保证国内网站以加密的方式保存你的口令。我觉得，做为一个有良知的人，我们应该加密保存用户的口令）\n\n …\n 阅读全文 Read More\n\n (50 人打了分，平均分： 4.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "弱爆程序员的特征值",
    "url": "https://coolshell.cn/articles/5292.html",
    "date": "2011-08-23T10:04:06+08:00",
    "description": "\n【感谢网友sumtec投递此文，很欢乐也有意思，与大家共勉】\n首先说明：\n1、以下特征是真实遇到过的，同事犯过的，乃至我自己也犯过的；\n2、为了剧情需要，某些例子进行了一些夸张修饰等演绎创作，如无雷同，请勿生气；\n3、如果你出现过以下症状之一，并不代表你就是弱爆了，但是如果你一直出现，乃至一说到这个大家就能联想到你，那么你就得小心了；\n4、如果你是集这几个的大乘者，恭喜你，你已经找到了离开这个行业的充足理由了。\n好了，搞定！\n“那个Bug解决了吗？”\n“好了，搞定！”\n“这么快？”\n正当你非常欣喜的时候，就传来了噩耗：刚才还能编译成功的，就失败了。（好吧，我们的集成编译尚未成功配置上，理论上这种事情应该会被退回。）又或者能编译成功，但是呢，原来明明能起作用的一个下拉框，突然发神经的不起作用了。最隐蔽的莫过于，一切正常，但是当你看到代码的时候，你就晕厥过去了。比如我们曾经发现了一个Bug，简单说就是每次用户点击某个东西，就会执行下面的这段C#代码：\ncontrolPropertyPanel.PropertyChanged += this.UpdatePropertyOnChanged;\n这个Bug很明显会导致速度越来越慢，因为同一个更新操作会被更新N次，并且这个N会越来越大。其实这个Bug已经够弱了，但是后来居然被修改为：\n …\n 阅读全文 Read More\n\n (26 人打了分，平均分： 3.77 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++11 中值得关注的几大变化（详解）",
    "url": "https://coolshell.cn/articles/5265.html",
    "date": "2011-08-19T08:43:59+08:00",
    "description": "\n源文章来自前C++标准委员会的 Danny Kalev 的 The Biggest Changes in C++11 (and Why You Should Care)，赖勇浩做了一个中文翻译在这里。所以，我就不翻译了，我在这里仅对文中提到的这些变化“追问为什么要引入这些变化”的一个探讨，只有知道为了什么，用在什么地方，我们才能真正学到这个知识。而以此你可以更深入地了解这些变化。所以，本文不是翻译。因为写得有些仓促，所以难免有问题，还请大家指正。\nLambda 表达式\nLambda表达式来源于函数式编程，说白就了就是在使用的地方定义函数，有的语言叫“闭包”，如果 lambda 函数没有传回值(例如 void )，其回返类型可被完全忽略。 定义在与 lambda 函数相同作用域的变量参考也可以被使用。这种的变量集合一般被称作 closure（闭包）。我在这里就不再讲这个事了。表达式的简单语法如下，\n[capture](parameters)->return_type {body}\n原文的作者给出了下面的例子：\nint main()\n{\n   char s[]=\"Hello World!\";\n   int Uppercase = 0; //modified by the lambda\n   for_each(s, s+sizeof(s), [&Uppercase] (char c) {\n    if (isupper(c))\n     Uppercase++;\n    });\n cout << Uppercase << \" uppercase letters in: \" << s <<endl;\n}\n在传统的STL中for_each() 这个玩意最后那个参数需要一个“函数对象”，所谓函数对象，其实是一个class，这个class重载了operator()，于是这个对象可以像函数的式样的使用。实现一个函数对象并不容易，需要使用template，比如下面这个例子就是函数对象的简单例子（实际的实现远比这个复杂）：\n …\n 阅读全文 Read More\n\n (26 人打了分，平均分： 4.04 )Loading...\n"
  },
  {
    "content": "",
    "title": "国内微博和Twitter的最大不同",
    "url": "https://coolshell.cn/articles/5247.html",
    "date": "2011-08-17T08:34:04+08:00",
    "description": "\n霍炬近两个月前写过一篇《microblogging和微博信息架构产品差距和影响》分析了国内微博和Twitter的差距，重点就是因为信息的平等性。我也一直在观察新浪微博，以及新浪和Twitter的一些功能上的差别。发现了一些东西，想在这里和大家分享一下。我的见解达不到像霍炬那样的层次，作为一个技术人员，我只能在产品功能上做些分析。欢迎大家指正。\n现实状况\n国内的微博就是新浪，Sohu微博，腾讯微博，以及饭否。我们不难发现：\n\n搜狐的和腾讯的就是Copy新浪的。在Following和Followed上大家都有自己所谓的“创新”\n饭否是在Copy Twitter，这点太明显了，不过，抄在了表面，而且相当的怪。\n\n国内所有的这些以Twitter为蓝本干出来的这些东西，其和Twitter在核心功能上有这些差别：\n\nTwitter的Retweet一点信息都加不上，国内的微博的转发需要加上自己的评论，也就形自己的信息。\nTwitter的Reply只会有一个@原来的人，国内的Reply也很相似，只是勾上转发后就会把Reply的东西以“//@XXX”的方式成为自己的信息。\n饭否的做法比较怪，转发加原文（想做成新浪的样子），回复不加原文，只有@（Twitter）的样子，可见饭否的分裂。\n\nSNS中的上下文\n这段时间，我一直在想，新浪为什么要做成这样，为什么不做成Twitter那样，或者，为什么Twitter做成那样而不是新浪这样？从表面上看上去，新浪的“回复+转发”会带被回的信息，而Twitter的回复不带上下文，Twitter上一些我fo的人的话题完全看不懂，不像新浪的还能看到上文。\n老实说，在一开始，我还觉得新浪微博这种用法和技术上要比 Twitter 要强大，现在看来是我当时对Twitter并不熟悉。经过这段时间的观察。我恰恰发现新浪在转发和回复上都要带上原文其实是一件很没有技术含量的事。要说清这个事，请让我说一下评论和回复的事。\n …\n 阅读全文 Read More\n\n (35 人打了分，平均分： 3.94 )Loading...\n"
  },
  {
    "content": "",
    "title": "重构代码的7个阶段",
    "url": "https://coolshell.cn/articles/5201.html",
    "date": "2011-08-16T08:42:35+08:00",
    "description": "\n你曾去想重构一个很老的模块，但是你只看了一眼你就恶心极了。文档，奇怪的函数和类的命名，等等，整个模块就像一个带着脚镣的衣衫褴褛的人，虽然能走，但是其已经让人感到很不舒服。面对这种情况，真正的程序员会是不会认输的，他们会接受挑战认真分析，那怕重写也在所不惜。最终那个模块会被他们重构，就像以前和大家介绍过的那些令人销魂的编程方式中的屠宰式编程一样。下面是重构代码的几个阶段，文章来自：The 7 stages of refactoring，下面的翻译只是意译。\n第一阶段 – 绝望\n在你开始去查看你想要重构的模块的，你会觉得好像很简单，这里需要改一个类，那里需要改两到三个函数，重写几个函数，看上去没什么大不了的，一两天就搞定了。于是你着手开始重构，然后当你调整重构了一些代码，比如改了一些命名，修理了一些逻辑，渐渐地，你会发现这个怪物原来体型这么大，你会看到与代码不符甚至含糊不清的注释，完全摸不着头脑的数据结构，还有一些看似不需要方法被调了几次，你还会发现无法搞清一个函数调用链上的逻辑。你感到这个事可能一周都搞不定，你开始绝望了。\n第二阶段 – 找最简单的做\n你承认你要重构的这个模块就是一个可怕的怪物，不是一两下就可以搞定的，于是你开始着干一些简单的事，比如重新命名一下几个函数，移除一些代码的阻碍，产生几个常量来消除magic number，等等，你知道这样做至少不会让代码变得更糟糕。\n第三阶段 – 再次绝望\n但是接下来的事会让你再次撞墙。你会发现那些代码的瑕疵是些不痛不痒的事，改正这些事完全于事无补，你应该要做的事就是重写所有的东西。但是你却没有时间这么干，而这些代码剪不乱理还乱，耦合得太多，让你再一次绝望。所以，你只能部分重写那些不会花太多时间的部分，这样至少可以让这些老的代码能被更多的重用。虽然不完美，但是至少可以试试。\n …\n 阅读全文 Read More\n\n (32 人打了分，平均分： 4.31 )Loading...\n"
  },
  {
    "content": "",
    "title": "对象的消息模型",
    "url": "https://coolshell.cn/articles/5202.html",
    "date": "2011-08-15T10:37:13+08:00",
    "description": "\n[ ———— 感谢 Todd 同学 投递本文，原文链接 ———— ]\nC++对象模型\n话题从下面这段C++程序说起，你认为它可以顺利执行吗？\n//C++\nclass A {\n    public:\n        void Hello(const std::string& name) {\n           std::cout << \"hello \" << name;\n         }\n};\nint main(int argc, char** argv)\n{\n    A* pa = NULL; //!!\n    pa->Hello(\"world\");\n    return 0;\n}\n试试的确可以顺利运行输出hello world，奇怪吗？其实并不奇怪，根据C++对象模型，类的非虚方法并不会存在于对象内存布局中，实际上编译器是把Hello方法转化成了类似这样的全局函数：\nvoid A_Hello_xxx(A * const this, const std::string& name) {\n    std::cout << “hello “ << name;\n}\n对象指针其实是作为第一个参数被隐式传递的，pa->Hello(“world”)实际上是调用的A_Hello_xxx(pa, “world”)，而恰好A_Hello_xxx内部没有使用pa，所以这段代码得以顺利运行。\n对象的消息模型\n如果是研究C++对象模型，上面的讨论可以到此为止，不过这里我想从另一个层面来继续探讨这个问题。OOP的先驱人物Alan Kay在总结Smalltalk的OO特征时强调：\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.92 )Loading...\n"
  },
  {
    "content": "",
    "title": "CSS图形",
    "url": "https://coolshell.cn/articles/5164.html",
    "date": "2011-08-15T08:21:50+08:00",
    "description": "\n下面的示例展示了使用纯CSS制作的各种图形，你可以自由地修改文中的CSS代码。这个收集的原文在这里。\n 经测试，IE9, Chrome, FF, Safari都可以正常显示。\n\n.shape {\n    padding: 20px;\n}\n.shape > style {\n    display: block;\n    white-space: pre;\n    background: #333;\n    color: white;\n    font: 12px Monaco;\n    padding: 0 15px;\n}\n.shape > div {\n    margin: 20px ;\n}\n.shape > h5 {\n    border-style:none none double none;\n    /*padding: 10px;\n    text-indent: 60px;\n    margin: 50px 0 0 -70px;*/\n    position: relative;\n    font: bold italic 20px \"atrament-web-1\",\"atrament-web-2\", Georgia, Serif;\n    color:#333;\n}\n.shape > h5 > a {\n    position: absolute;\n    right: 20px;\n    bottom: 10px;\n    font-size: 20px;\n}\n\n\n正方形\n\n \n#square {\n\twidth: 100px;\n\theight: 100px;\n\tbackground: #f66;\n}\n            \n\n\n长方形\n\n \n#rectangle {\n\twidth: 200px;\n\theight: 100px;\n\tbackground: #f66;\n}\n            \n\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.77 )Loading...\n"
  },
  {
    "content": "",
    "title": "PHP分页技术的代码和示例",
    "url": "https://coolshell.cn/articles/5160.html",
    "date": "2011-08-14T14:49:22+08:00",
    "description": "\n本文来自：10 Helpful PHP Pagination Scripts For Web Developers\n分页是目前在显示大量结果时所采用的最好的方式。有了下面这些代码的帮助，开发人员可以在多个页面中显示大量的数据。在互联网上，分​页是一般用于搜索结果或是浏览全部信息（比如：一个论坛主题）。几乎在每一个Web应用程序都需要划分返回的数据，并按页显示。下面的这个列表给出的代码可以让你的开发很有帮助。学习这些代码，对于初学者也很有帮助。\n1) 使用Ajax分页\n \n \n下面这个示例使用了jQuery + PHP。 Demo link\n\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.93 )Loading...\n"
  },
  {
    "content": "",
    "title": "在新浪微博上关于敏捷的一些讨论",
    "url": "https://coolshell.cn/articles/5143.html",
    "date": "2011-08-12T08:22:58+08:00",
    "description": "\n自从我发布了“Scrum为什么不行”，并被CSDN推成首页头条后，我在我的新浪微博上就经常被敏粉们@去讨论他们的一些话题。他们似乎想要从我这里听到一些不同的声音，我很喜欢他们的这种态度，在这里先赞他们一个。既然，让我来评论他们的东西，我就不客气了，板砖自然是少不了的。 我觉得我在微博上的观点比较散，所以在这里做一个汇总。我在所有批评敏捷的文章里都重复说过我的立场，这里还要再说一遍，因为那群人很敏感——“我承认敏捷中有一些东西我是认可的，但对敏捷社区的推广和思维方式我持否定态度”。\n敏捷词汇表\n我被@吴穹adam邀请进入了一个敏捷词汇表的微群，这个群就是想明确的定义一下敏捷的各种词汇，比如，他们想把TDD定义成就是UT。呵呵。我对这个群仅保持了30分钟的热度，我在里面发了一个“你们不想讨论技术吗？”的帖子，就再也不想关注了。因为我的观点如下：\n\n我不知道干这件事有什么意义。标准化还是洗脑？One World, One Agile?  – horse shit!\n你能定义地好吗？定义好了大家都能干好了？ – 幼稚！\n理解不同又有什么关系？价值观不同又能怎么样？为什么不能正视并接受世界的不同呢？ –  固执！\n\n敏捷宣言\n我看到很多人又把《敏捷宣言》拿出来说事，就好象他们把敏捷宣言是软件开发的普世的价值观一样。我对此的评论是—— …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 3.31 )Loading...\n"
  },
  {
    "content": "",
    "title": "疯狂的 Web 应用开源项目",
    "url": "https://coolshell.cn/articles/5132.html",
    "date": "2011-08-11T08:40:12+08:00",
    "description": "\n下面是一个Web应用的开源列表。没什么可说的，太疯狂了。尤其是Web 2.0那一堆。我不知道你怎么想，有些开源项目的源码写得挺不好的，尤其是性能方面。或许你会以为改一改他们就可以成为为自己所用，不过，改这些开源的项目还真不容易。玩玩还可以。\n数字媒体\n\n相册（Flickr, Picasa）\n\n\nGallery，基于PHP + MySQL的Web相册。非常易于使用，包括一个配置向导，对于相片的操作包括自动生成缩略图、相片的大小改变、选择、排序等。\nPiwigo，基于PHP + MySQL。配备了强大的功能，发布和管理您的照片，可扩展性和智能浏览功能，如类别，标签，或年表。这是网络和照片的标准要求。扩展使Piwigo更可扩展性和可定制的。\nUberGallery，一个简单易用的相册。PHP。不需要数据库。\nZenphoto，一个简单的web相册程序,它能够简单的展示你的图片，并含有你所需要的所有功能和特点。可以和Wordpress集成。\n\n\n视频（YouTube）\n\n\nFlowplayer，一个用Flash开发的在Web上的视频播放器，可以很容易将它集成在任何的网页上。支持HTTP以及流媒体传输。\nPlumi，一个建立在Plone 内容管理系统上的视频分享系统，可帮助你轻松建立视频分享网站。\n\n …\n 阅读全文 Read More\n\n (39 人打了分，平均分： 4.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "10大经典错误",
    "url": "https://coolshell.cn/articles/5107.html",
    "date": "2011-08-08T08:37:36+08:00",
    "description": "\n下面是10、11个经典的错误，升序排名。希望大家补充！\n10、DOS的Abort，Retry, Fail？错误\n85年以后出生的人可能不知道DOS是什么了，只有那老家伙还知道这是什么。我还记得当时的我对于Abort和Fail这两个选择还是比较清楚的，不过，今天完全忘记了Abort和Fail的差别是什么？这个出是DOS下的经常出现，也相当的经典，以至于在Wikepedia上都有专门的业面 Abort, Retry, Fail?。简称为ARF。当然，ARI – Abort, Retry, Ignore?\n\n9、Windows Vista 的红屏错误\n红屏错误（RSoD – Red Screen of Death）不单单只是Windows Vista引入的（也许是蓝屏太有名了，突然变成红屏，大家觉得这个是比蓝屏更NB的错，所以也就引人关注了），PlayStation的也喜欢使用红屏。\nWindows Vista 的 RSoD\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.41 )Loading...\n"
  },
  {
    "content": "",
    "title": "10个必需的iOS开发工具和资源",
    "url": "https://coolshell.cn/articles/5089.html",
    "date": "2011-08-02T08:40:11+08:00",
    "description": "\n界面总不是一件很容易事，尤其是iPhone/iPad的界面，做过iOS开发的程序员，一定会感到开发iPhone/iPad的界面是一件多么不容易的事。下面的文章来自10 Essential iOS Developer Tools & Resources，这个文章介绍了十个iOS开发的基础性工具和资源，其一定会很有效地帮你做iOS的开发。（在这里，我再闲扯一句，虽然Android的开发好像整整XML文件界面就出来了，其明显比iOS的开发要容易很多，但是我还是觉得iOS的生命力要强过Android，看看Android今天的应用就知道，有时候入门门槛低不是一些好事，大多数的程序员搞出来的Android代码和软件简直令人作呕，就像不是每个人都能烧得手好菜一样。（“食客与大厨”，也许偏激，但值得你我思考），又把蛋扯远了）\n1. Omnigraffle + Ultimate iPhone Stencil\n\nOmnigraffle 是一个很强大的像Microsoft Viso的一个软件，其只能于运行在Mac OS X和iPad平台之上。它曾获得2002年的苹果设计奖。在这里，你可以下载 Ultimate iPhone Stencil ，然后使用Omnigraffle 来非常快地制作你的iPhone应用的演示界面。（查看了一下Omnigraffle 的iPad版，真贵，$49.99。作者居然推荐买，TNND，一看就是托）。\nOmnigraffle Link, Ultimate iPhone Stencil Link\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.18 )Loading...\n"
  },
  {
    "content": "",
    "title": "你确信你了解时间吗？",
    "url": "https://coolshell.cn/articles/5075.html",
    "date": "2011-08-01T08:25:59+08:00",
    "description": "\n你还记得“软件真的好难做”中的那个有意思的例子吗？那个例子告诉我们软件开发中假设可能会是致命的事。今天，我又在StackOverflow上看到一个关于时间的问题——为什么1927年12月31日的午夜时间这么奇怪？提问题的这个人给了下面的一段java代码（我做一些修改，保证让你可以copy过去就可以编译运行）\n我在其中高亮了几行，这个程序就是想比较一下“1927-12-31 23:54:07”  和  “1927-12-31 23:54:08” 差几秒，很明显，是差一秒。但是程序的输出却不是这样的。\nimport java.text.SimpleDateFormat;\nimport java.text.ParseException;\nimport java.util.Date;\nimport java.util.TimeZone;\nclass time{\n    public static void main(String[] args) throws ParseException {\n        SimpleDateFormat sf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        sf.setTimeZone(TimeZone.getTimeZone(\"Asia/Shanghai\"));\n        String str3 = \"1927-12-31 23:54:07\";\n        String str4 = \"1927-12-31 23:54:08\";\n        Date sDt3 = sf.parse(str3);\n        Date sDt4 = sf.parse(str4);\n        long ld3 = sDt3.getTime() /1000;\n        long ld4 = sDt4.getTime() /1000;\n        System.out.println(ld3);\n        System.out.println(ld4);\n        System.out.println(ld4-ld3);\n    }\n}\n \n …\n 阅读全文 Read More\n\n (33 人打了分，平均分： 4.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "面向对象的Shell脚本",
    "url": "https://coolshell.cn/articles/5035.html",
    "date": "2011-07-21T12:39:11+08:00",
    "description": "\n还记得以前那个用算素数的正则表达式吗？编程这个世界太有趣了，总是能看到一些即别出心裁的东西。你有没有想过在写Shell脚本的时候可以把你的变量和函数放到一个类中？不要以为这不可能，这不，我在网上又看到了一个把Shell脚本整成面向对象的东西。Shell本来是不支持的，需要自己做点东西，能搞出这个事事的人真的是hacker啊。\n当然，这里并不是真正的面向对象，因为其只是封装罢了，还没有支持继承和多态。最变态的是他居然还支持typeid，靠！\n下面让我们看看他是怎么来做的。下面的脚本可能会有点费解。本想解释一下，后来想想，还是大家自己专研一下吧，其实看懂也不难，给大家提几个点吧。\n\n我们可以看到，下面的这个脚本定义了class,  func, var, new 等函数，其实这些就是所谓的关键字。\nclass是一个函数，主要是记录类名。\nfunc和var实际上是把成员函数名和成员变量记成有相同前缀的各种变量。\nnew方法主要是记录实例。大家重点看看new函数里的那个for循环，最核心的就在那里了。\n\n脚本如下所示：\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "为什么Scrum不行？",
    "url": "https://coolshell.cn/articles/5044.html",
    "date": "2011-07-21T08:37:03+08:00",
    "description": "\n这篇文章的原文在这里（原文链接）（下文不是全译，也不是部分译，我只是把其总结，有我自己的发挥，但是原意大致不变），这篇文章完全是在调侃Scrum的，作者第一段就是一个免费声明，其说他是Scrum和其它敏捷方法的big fan， 他也认为Scrum 100% 对 软件开发可行。作者使用Scrum 5年了，也公开作过几次敏捷的分享会。他觉得写这篇文章只是为了好玩，因为他们戴上Edward de Bono 的 black hat （黑礼帽 – 是6个思考之帽中的一种——负面思考，思考事物的负面因素，这样才知道：它会起作用吗？缺点是什么？它有什么问题？为什么不能做。）\n因为本人经常站在Agile的风口浪尖，所以我有必要也来一个“免责声明”。Shit！其实我想来的是“不免责声明” ——下文中的九大原因是对中国的各种Agile实践者咨询师不注重实际只重方法论的批判，本人必然要和那种只以流程方法论为中心的软件开发斗争到底。其实我没有那么嚣张，我只是想说，下面的这些东西相当的现实。希望各种Scrum的实践者们认识到这些问题，从而可以让你们明白软件开发中的人的重要性。\nReason 1:  Scrum 的基石是相信人。创造一个安全的环境，这样每个人都能相互学习，相互直言。但是，这是不行的，这世上有很多人并不关心这些，而且政治和竞争到处都是，办公室里无小事，你和别人交心，你相信他们，最终受伤的你自己。你真的以为那里有空间让你可以去犯错，去冒险吗？别天真了！你啊，too young, too simple, sometimes naive!\nReason 2: Scrum 认为只要给员工足够多的自由员工就能做得最好。这该死是理论是基于什么玩意？不可能，人的天性是懒惰的，他们才不会把事做好的，他们只会做相应报酬的工作量，还可能基本还达不到其相应的报酬，大多数人都在混日子啊。尤其是和经理比起来，谁不想能尽快地成为经理或Team leader啊，因为那样他们就可以即不干活，又挣得多。另外，你给他们自由，你就会发现，他们会只会做他们感兴趣的事，要么聊QQ，要么打游戏，看闲书，反正不干正事。直到你催了，他们才动一动。\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 4.16 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员技术练级攻略",
    "url": "https://coolshell.cn/articles/4990.html",
    "date": "2011-07-18T10:31:22+08:00",
    "description": "\n注：该文最新的版本在这里《程序员技术练级攻略（2018版）》（需要付费阅读）\n月光博客6月12日发表了《写给新手程序员的一封信》，翻译自《An open letter to those who want to start programming》，我的朋友（他在本站的id是Mailper）告诉我，他希望在酷壳上看到一篇更具操作性的文章。因为他也是喜欢编程和技术的家伙，于是，我让他把他的一些学习Python和Web编程的一些点滴总结一下。于是他给我发来了一些他的心得和经历，我在把他的心得做了不多的增改，并根据我的经历增加了“进阶”一节。这是一篇由新手和我这个老家伙根据我们的经历完成的文章。\n我的这个朋友把这篇文章取名叫Build Your Programming Technical Skills，我实在不知道用中文怎么翻译，但我在写的过程中，我觉得这很像一个打网游做任务升级的一个过程，所以取名叫“技术练级攻略”，题目有点大，呵呵，这个标题纯粹是为了好玩。这里仅仅是在分享Mailper和我个人的学习经历。（注：省去了我作为一个初学者曾经学习过的一些技术(今天明显过时了)，如：Delphi/Power builder，也省去了我学过的一些我觉得没意思的技术Lotus Notes/ActiveX/COM/ADO/ATL/.NET ……）\n前言\n你是否觉得自己从学校毕业的时候只做过小玩具一样的程序？走入职场后哪怕没有什么经验也可以把以下这些课外练习走一遍（朋友的抱怨：学校课程总是从理论出发，作业项目都看不出有什么实际作用，不如从工作中的需求出发）\n建议：\n\n不要乱买书，不要乱追新技术新名词，基础的东西经过很长时间积累而且还会在未来至少10年通用。\n回顾一下历史，看看历史上时间线上技术的发展，你才能明白明天会是什么样。\n一定要动手，例子不管多么简单，建议至少自己手敲一遍看看是否理解了里头的细枝末节。\n一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。\n\n注：你也许会很奇怪为什么下面的东西很偏Unix/Linux，这是因为我觉得Windows下的编程可能会在未来很没有前途，原因如下：\n …\n 阅读全文 Read More\n\n (317 人打了分，平均分： 4.74 )Loading...\n"
  },
  {
    "content": "",
    "title": "给程序员新手的一些建议",
    "url": "https://coolshell.cn/articles/4976.html",
    "date": "2011-07-12T08:37:49+08:00",
    "description": "\n前段时间因为实习生计划花了很多时间做了实习生招聘的工作，产生的一些想法，写在这里。\n这次招聘过程中，我发现我们在校的学生有下面的这些特点：\n1）NB的项目。当说到自己做过的项目时， 我发现他们做的事都是很NB。要么是研究Linux的底层内核，要么是图像识别处理，要么是推荐算法，要么做高性能计算，要么做数据挖掘，要么是移动方面的协议，还有一些很高深的课题我听不太懂的项目。这让我想起当年我在学校里的实习，对比起我用Java Applet 和 HTML做操作系统的教学课件，或是在公司里用Delphi/PowerBuilder做的那些MIS系统。让我觉得有些汗颜。\n2）OK的解决问题能力。当问到算法题时，我发现他们的问题解决能力还OK。我一般问1到2个中低难度的算法题和1个基本的面向对象设计的题，都不难。我相信只要在学校里好好学习的人都应该答得出来。无非就是一些基本的算法和基本数据结构操作的问题，和比较基础的面向对象设计的题，说白了就是作业题。可惜的是，只有5%不到的同学能够在不给提示的情况下答出来，70%的人可以在给一定的提示下答出来，15%左右的同学需要提示到几乎给出答案才能答出来，还有10%的同学怎么给提示都答不出来。\n3）WTF的编码能力。老实说，对于解算法题，我还是比较可以接受的，因为80%左右的同学在给予提示后都能描述出解题的算法，于是，我让他们把这个算法用他们最熟悉的语言写出来。但结果让我出乎意料，一段在解法很清楚的情况下只需要不到30行代码的小算法题，只有一个人能在10分钟几写完，其它的人基本所有的需要30分钟左右（甚至40分钟），有2、3个人居然写不出来。有一个比较极端的case是——有个同学花了十分钟都写不出从一个整型数组中找到最小的正数的代码。这个事让我觉得很惊讶，难道大家在做项目的时候不编程吗？\n对于这种情况，我想给大家以下后一些建议：\n …\n 阅读全文 Read More\n\n (62 人打了分，平均分： 4.48 )Loading...\n"
  },
  {
    "content": "",
    "title": "软件公司的两种管理方式",
    "url": "https://coolshell.cn/articles/4951.html",
    "date": "2011-07-06T08:36:43+08:00",
    "description": "\n这篇文章是我的一个外国的同事Gareth推荐给我的，我和他一起工作过一段时间。他之所以觉得非常不错，是因为这篇文章让他身有体会，他觉得我也一定会有体会，并让我考虑一下翻译到我的blog上来。我看完后觉得很有代表性，而且觉得说得太对了，所以翻译过来，希望大家都读一读，最好转给你的公司老板。\n这篇文章来源于 StakeExchange上的一个问题——“为什么BA和PM的薪水要比程序员要高？”，顶在一楼的回复分析了这个原因，并指出了两种管理文化。\n———————————————————正文开始————————————————————\n一个简单的回答应该是——“因为在我们的社会里，我们总是会认为薪水和会和职位的层次绑在一起”。但是，这个答案同时也折射出一个事实——我们的薪资是基于我们的所理解的价值，但这并没有解释\n\n为什么PM（Project Manager）和BA（Business Analysts）在很多软件公司里在组织的上层？\n为什么软件项目团队总是在最底层？\n\n这两个问题真是非常地值得我们去问，去思考。\n总体来说，这个世界上存在两种不同的软件公司的组织结构。我把他们叫做 Widget Factory（小商品工厂） 和 Film Crews（电影工作组）.\nWidget Factories 想要去解决 怎么去激发被X理论所影响的人 。X理论由 McGregor提出，这个理论是说，一般人的本性是懒惰的，工作越少越好，可能的话会逃避工作，大部分人对集体（公司，机构，单位或组织等）的目标不关心，因此管理者需要以强迫，威胁处罚，指导，金钱利益等诱因激发人们的工作源动力。于是，经理总是要去做他下属的工作。于是，基于这种前提下所思考出来的管理方式，很自然的就是——整个团队能够容易地被经理一个人所取代，这种团队中的每一个人都很容易被别人取代，在这种团队里，经理的工作能力不断地被加强。因些，这种公司一般使用树形层级的组织结构，而不是水平式的工作角色。\n …\n 阅读全文 Read More\n\n (56 人打了分，平均分： 4.64 )Loading...\n"
  },
  {
    "content": "",
    "title": "Quora使用到的技术",
    "url": "https://coolshell.cn/articles/4939.html",
    "date": "2011-07-04T08:35:37+08:00",
    "description": "\n以前向大家介绍过Stack Exchange的系统架构和Facebook的系统架构，今天和大家说说Quora的。本文主要参考了Phil Whelan的这篇文章《Quora’s Technology Examined》。关于Quora是个什么网站我就不多说了，国内对他的C2C网站叫“知乎”。呵呵。我们还是来看看Quora的技术吧。\nSearch-Box\nQuora只能搜索问题，主题标签，用户名，和主题标题。没有全文搜索，所以，你无法搜索问题和答案的内容。而搜索中使用前缀搜索方式，比如你输入mi，则Microsoft会马上出来。其搜索还会有一些非常简单的模糊匹配的算法。另外，如果有重复的问题，其中一个问题会自动跳转到另一个问题，但是在搜索中还是会出现。搜索中没有拼写检查。\n一开始，他们使用的是一个开源的搜索服务器，叫Sphinx。其支持上述的那些功能。现在他们不用这个技术了，因为受到了一些限制。他们做了一个比较新的解决方案，这个算法由Python实现。\n参看：What libraries does Quora use for search?\n实时查询\nQuora的查询是非常高速的，其查询请求是通过AJAX的GET请求发送的，结果返回用的是JSON数据格式，但他们解析JSON是在服务器端，而不是通过浏览器的javascript。这么做的原因可能是他们想高亮搜索关键词，似乎使用Client端的Javascript非常不好做。\nQuora的即时搜索好像比较暴力，如果你输入Microsoft（一共9个字符），你会看到其会像后端发送9次查询——每按一个键一次，无论你敲这个单词的速底有多快，每输入一个字符都会发一个请求给后台。对于这样的看上去没有效率的对后台的请求，后台的服务器端会来控制相关的前台请求，所以，就算是前台这样做，也不会增加服务器端的负载，因为后台会做相关的处理。\nQuora的搜索使用HTTP长连接，当你开始敲查询的时候，连接就建立了，这个连接会持续在那里，你下次搜索的时候会继续使用这个连接，除非你60秒没有动作了。\n参看：Is Quora going to implement full-text search?\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 4.08 )Loading...\n"
  },
  {
    "content": "",
    "title": "语言的数据亲和力",
    "url": "https://coolshell.cn/articles/4905.html",
    "date": "2011-06-29T08:10:44+08:00",
    "description": "\n[ 感谢 Todd 同学投递本文 ]\n目前，程序设计语言似乎进入了一个蓬勃发展的时期，Javascript、Perl、Python、Ruby、Groovy等一批较新的语言正越来越多地被熟悉和使用，而C++、C#、Java等主流语言也在不断地融入函数式和动态性特征。程序员的百宝箱中可供选择的宝贝是越来多了，而社区中关于语言间的比较和争论也更为热烈，我们常常见到关于“面向过程和面向对象的比较”、“动态语言和静态语言的比较”、“命令式和函数式范式的比较”等比较。我注意到这类讨论的关注点多集中于设计相关话题，如“动态语言的Duck typing多态和静态语言的继承多态的比较”，“Prototype based和Class based的比较”等。但我认为还有一个十分重要的方面值得关注，这就是数据处理。\n数据处理之所以重要是因为不论是本地信息存储还是系统间信息交换都需要建立在一定的数据格式基础上。另外，不管语言属于那种范式，设计上采用什么模式，在微观层次上程序很大一部分工作都是在做数据处理。所以，从数据处理角度比较和理解语言间的差异有重要的现实意义。虽然数据通常是平台和语言无关的，但不同的语言在处理某种格式的数据时会表现出不同的难度，甚至某些数据格式只能采用特定的语言才能实现，这就是数据亲和力的不同。\n语言的数据亲和力(Data Affinity)指的是语言的数据模型与某种数据格式之间的匹配程度。语言对某种数据格式亲和力越强，则操作某类数据越容易。\n \n二进制字节块格式\n \n \n在偏底层的操作系统、嵌入式和通信系统中，二进制的字节块是最常见的一种数据格式。二进制数据布局紧凑和接近机器的特点使得它常常作为系统间通信或系统文件的数据格式，但一般高级语言都不方便直接和0101打交道，而是基于记录、结构体和类等结构化表示操作数据，这就存在着在底层的二进制字节块和高层的结构化数据直接的转换问题。\n …\n 阅读全文 Read More\n\n (22 人打了分，平均分： 4.45 )Loading...\n"
  },
  {
    "content": "",
    "title": "新浪微博的XSS攻击",
    "url": "https://coolshell.cn/articles/4914.html",
    "date": "2011-06-28T23:10:18+08:00",
    "description": "\n今天晚上（2011年6月28日），新浪微博出现了一次比较大的XSS攻击事件。大量用户自动发送诸如：“郭美美事件的一些未注意到的细节”，“建党大业中穿帮的地方”，“让女人心动的100句诗歌”，“3D肉团团高清普通话版种子”，“这是传说中的神仙眷侣啊”，“惊爆!范冰冰艳照真流出了”等等微博和私信，并自动关注一位名为hellosamy的用户。\n事件的经过线索如下：\n\n20:14，开始有大量带V的认证用户中招转发蠕虫\n20:30，2kt.cn中的病毒页面无法访问\n20:32，新浪微博中hellosamy用户无法访问\n21:02，新浪漏洞修补完毕\n\n \n新浪微博XSS事件\n \n在这里，想和大家介绍一下XSS攻击，XSS攻击又叫跨站脚本式攻击，你Google一下可以搜到很多很多的文章。我在这里就简单地说一下。\n …\n 阅读全文 Read More\n\n (28 人打了分，平均分： 4.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "在函数外存取局部变量的一个比喻",
    "url": "https://coolshell.cn/articles/4907.html",
    "date": "2011-06-28T11:35:52+08:00",
    "description": "\n在StackOverflow上一这样一个关于C/C++的问题，问问题的人给了一个代码如下：\nint * foo()\n{\n    int a = 5;\n    return &a;\n}\n\nint main()\n{\n    int* p = foo();\n    cout << *p;\n    *p = 8;\n    cout << *p;\n}\n你可以编译并运行这个代码（编译时会有一个Warning），结果是：5 8。看上去你可以存取一个函数内的局部变量。但这和我们理解的不一样——函数内的变量在函数退出时就被释放了，不应该在外部还可以被引用。当然，对于C/C++熟悉的人都知道其实并不是真正的释放，你依然还可以通过内存地址去进行操作，这是C/C++的内存管理的不安全性——指针可以用来乱指。\n这个问题的解答是比较简单的，但是这个问题有一个答案中的比喻非常精彩。这个比喻是这样的——\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 4.19 )Loading...\n"
  },
  {
    "content": "",
    "title": "Bob大叔和Jim Coplien对TDD的论战",
    "url": "https://coolshell.cn/articles/4891.html",
    "date": "2011-06-27T08:41:23+08:00",
    "description": "\n今年春节时，我写了一篇《TDD并不是看上去的那么美》，在这篇文章中我列举了一些关于使用TDD的一些难点和对TDD的质疑，后来出现了一些争论（可参见那篇文章的评论），以及Todd同学的《TDD到底美不美》，还有infoQ中文上的那个几乎没有营养离线讨论。今天，有网友给我推来一个英文版infoQ的视频——“Coplien and Martin Debate TDD, CDD and Professionalism”，这是2008年2月18日的视频，视频的主角两个人争论TDD好还是不好，一个是敏捷社区的教主级的人物——Robert Martin（大家称之为“Bob大叔”），另一个是C++，OO，多范式编程的大师Jim Coplien（大家都叫他Cope）。这两个人对TDD的见解有分歧。Coplien的很多观点和我之前的不谋而合，而他自己称他是坚决强烈地站在TDD的对立面上。下面是Jim的原话：\nI have adopted a very strong position against what particularly the XP community is calling test driven development.\nInfoQ的视频很多时候相当的不给力，就像有前列腺的患者撒尿一样，半天都挤不出一滴。不过，好在那里有这两个人对话的摘录。在这里，我给大家摘要一下：\n——————————————————正文分割线————————————————————\nCoplien首先让Uncle Bob定义了一下TDD，Uncle Bob说明了他的三个法则：（敏捷的同学一定不陌生）\n\n一个测试驱动的程序员，其不会在写出一个测试失败的Unit Test前，去写一句可用在生产线上的代码。（没有测试之前不要写任何功能代码）\n在编写用于生产线上代码之前，不写过多的测试失败的Unit Test。（只编写刚好能体现一个失败情况的测试代码）\n在现有代码通过Unit Test前，不写更多的用于生产线上的代码。（只编写恰好能通过测试的功能代码）\n\nCoplien说他有意见的不是这三个法则，而是因为这个三个法则是孤立说出来的。Coplien说他和一些咨询师或是Scrum Master参与过很多的项目，他们发现这些项目都有两个问题：\n\n他们使用TDD的时候，软件没有一个架构或是framework。当然，Kent Beck说——TDD可以驱使你去做架构。但是，TDD和Unit Test 是一回事吗？Unit Test是一个伟大的事，尤其是当你去写API和类库的时候。今天XP所说的TDD和UT很不一样。如果你使用TDD来驱动你的软件系统架构，那么，基本上来说，三个迭代以后，你开发的软件就会crash掉，而且无法再往前开发。 因为什么？因为连软件团队自己都受不了这三个迭代出来的架构，而且你还会发现，你根本没去去重构。\n第二个问题是，TDD这种方法破坏了GUI（图形界面），就算是Kent也说：“你永远不可以在一个漂亮的界面后面隐藏一个糟糕的架构”，Coplien强烈地相信软件的架构是通过界面来发出其光芒。他觉得如果没有一个好的软件架构，这个会影响用户的操作。\n\nCoplien接着说，如果我们使用Uncle Bob的三条法则，我们也许没有什么问题，但Coplien想告诉大家另一个非常重要的事，那就是软件架构。并说：“我根本不接受TDD是软件专业化实践的论点”。\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "排序算法 Sleep Sort",
    "url": "https://coolshell.cn/articles/4883.html",
    "date": "2011-06-23T08:43:18+08:00",
    "description": "\n排序算法好像是程序员学习编程最多的算法，也可能是算法研究者们最喜欢研究的算法了。排序有很多很多的算法，比如，冒泡，插入，选择，堆，快速，归并等等（你可以看看本站以前的那些文章：可视化的排序，排序算法比较，显示排序过程的python）这里向大家介绍一个“巨NB”的排序算法——Sleep Sort。\n闲言少说，请看下面的代码（用Shell脚本写的）\n#!/bin/bash\nfunction f() {\n    sleep \"$1\"\n    echo \"$1\"\n}\nwhile [ -n \"$1\" ]\ndo\n    f \"$1\" &\n    shift\ndone\nwait\n用法如下：\n./sleepsort.bash 5 3 6 3 6 3 1 4 7\n相信你可以会去试一下这个脚本，也相你你试完后你一定会说——“我擦，真TMD排序了！”，我还是不要解释这段代码了，过多的解释会不如代码那么直接，而且解释会影响你对这个排序算法的NB性。只想说——这是正二八经的多线程、多进程排序啊。我们的Bogo排序也黯然失色啊。\n下面我们需要对这个算法做一些分析——\n …\n 阅读全文 Read More\n\n (23 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个空格引发的惨剧",
    "url": "https://coolshell.cn/articles/4875.html",
    "date": "2011-06-20T08:26:34+08:00",
    "description": "\n你是否相信如果你的程序里没有检查一个变量会导致怎么系统瘫痪？无论你相不相信，这是我一个亲身经历过的案例，你可以在本站的程序员那些悲催的事儿中找到很多这样的事。这样的事昨天在发生，今天同样在发生。Unix40多年了，在这40年里，程序员发生过各种各样的的惨剧，但是大多数的事情一而再再而三的重演。\n今天的你，可能在开发者各种各样NB的系统，你会相信你的一个空格也能导致系统瘫痪吗？也许你可能很难相信这个事。不过，再下面这个事将告诉你这个血淋淋的事实 —— 一个空格产生的bug可以让你的系统瘫痪。\nbumblebee是一个开源项目，这个名字也就是变形金刚里的大黄蜂，这个项目是这样介绍自己的——\nbumblebee is Optimus support for Linux, with real offloading, and not switchable graphics.. More important.. it works on Optimus Laptops without a graphical multiplexer..\nOptimus 是NVIDIA的“优驰”技术，其可以将您的笔记本电脑PC提升到绝佳状态，提供出色的图形性能，并在需要时延长电池续航时间。这个项目是把这个技术移到Linux上来。\n这个项目本来不出名，不过，程序在其安装脚本install.sh里的一个bug让这个项目一下子成了全世界最瞩目的项目，这个bug的fix如下：\n@@ -348,7 +348,7 @@ case \"$DISTRO\" in\n-  rm -rf /usr /lib/nvidia-current/xorg/xorg\n+  rm -rf /usr/lib/nvidia-current/xorg/xorg\n看明白了吗？空格。这个空格会导致什么样的问题呢？呵呵。你有没有感到菊花一紧？这个bug绝对的霸气外露！真是验证了“如何写出无法维护代码”的那句话——“测试你的程序是一种懦夫的行为”。\n不过，最精彩还不是这个bug，而是全世界程序员的对这个bug 的 code review comments，真的相当的欢乐。请强势围望！\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "“另类” 设计模式",
    "url": "https://coolshell.cn/articles/4844.html",
    "date": "2011-06-16T08:46:28+08:00",
    "description": "\n下面这篇文章来自这里：http://www.lsd.ic.unicamp.br/~oliva/fun/prog/resign-patterns，这篇文章有点意思了，山寨了我们著名的Design Pattern。这篇文章并不是很容易翻译，也许我翻译的不好，大家多指正。另外，这篇文章将失去原有的趣味在于其使用了经典设计模式的单词很相似的单词，一走眼你还以为是正二八经的设计模式。呵呵。所以，我在下文中，我会保留原有的英文单词，并把真正的23个经典设计模式的英文名放在旁边（灰色）。这篇文章和之前的如何写出无法维护的代码有异曲同工，个人感觉都是比较欢乐的。\n \n辞职模式\nResign Patterns\nDesign Patterns\n不合式的非面向项目软件开发病症\nAilments of Unsuitable Project-Disoriented Software\nElements of Reusable Object-Oriented Software\n作者：Michael Duell\n概要\n任何一个熟悉那本由四个人写的经典的设计模式书的朋友，应该知道那本书里的模式都是非常优雅和划时代的。然而，不幸的是，从那些老代码中无法提练出这些模式，因为，在出现这些模式前，大家都不会使用模式。因此，这项工作是从大量的代码中提练出一个模式的目录。这些模式都有充足和永恒的示例。希望你能享受阅读这些模式，但千万不要模仿并使用他们！\n1. Cremational Patterns 火葬模式 | Creational patterns 创建模式\n下面是五个 cremational patterns.\n1.1 Abject Poverty  一贫如洗 | Abstract Factory 抽象工厂\nAbject Poverty 模式能让你的软件相当难测试和维护， 并且需要巨大的财政支出，预算已经完全赤字。\n1.2 Blinder 眼罩模式 | Builder 建造模式\nBlinder 模式是一个应急有效的解决方案，其不需要考虑需求在未来的变化。目前，我们还不太清楚我们为什么叫Blinder模式，一种说法是他们会在写代码的时候被设计人员戴上眼罩，另一种说法是他们希望在维护代码的时候挖出双眼。\n1.3 Fallacy Method 错误方法 | Factory method 工厂方法\nFallacy方法主要是在于处理一些不明显的案例。代码逻辑看上去是正确的，当只要某想要去测试一下，或是某个不明显的案例发生了，那些代码中的错误也就出现了。\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "GNU/Linux下有多少是GNU的？",
    "url": "https://coolshell.cn/articles/4826.html",
    "date": "2011-06-13T08:25:42+08:00",
    "description": "\n一个葡萄牙的学生写了一篇文章 《How much GNU is there in GNU/Linux?》 – GNU/Linux下有多少是GNU的。他的这篇文章主要分布了今年4月份的Ubuntu Natty的Linux分发包。其主要是用代码行来做的分析，其给了两个饼图。\n第一个饼图如下，其指明了各种主流的开源项目组的分布情况。可见GNU只占了8%，当然，GNome也是GNU的，加起来也只有13%，只占整个分发包很少的比重。\n\n第二个图，作者把GNU的部分拿了出来，再进行了分析：\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.53 )Loading...\n"
  },
  {
    "content": "",
    "title": "软件真的好难做啊",
    "url": "https://coolshell.cn/articles/4811.html",
    "date": "2011-06-10T08:45:17+08:00",
    "description": "\n还记得以前本站的那一篇“编程好难啊”吗，那是一篇众程序员调侃程序新手的文章，有恶搞的成分在里面。今天要和大家说的这个事没有一些恶搞和调侃的意思，是比较严肃的话题，你一定可以从中收获一些东西。这个话题来自StackOverflow上的一个问题——Cycle in Family Tree Software，这个程序员问了下面这个问题：\n我是一个写家族族谱软件的程序员（我用的是C++和Qt），这个软件基本上没有什么问题，直到有一天有个用户报告了一个bug。这个问题是这样的——我这个用户和他女儿生了两个孩子。\n于是，我程序员的一些断言和硬性条件导致程序报错，因为我的程序在处理这个关系的时候，其发现X即是Y的爸爸，又是Y的爷爷，所以只能报错。\n请问，在不需要移除我的断言和数据验证的情况下，我怎么才能解决这个问题？\n看到这里，请重点阅读一下下面的两点：\n\n如果你看到这里开始兴奋了，请你为你阴暗的心理去面壁反省10分钟，因为这是一个很技术的问题。\n如果你开始陷入了深深的思考如何解决这个问题，那么你绝对是一个合格的程序员，因为你已陷入技术已经很深了，有点呆了。\n\n我在前面说过，“这个是一个严肃的话题，你可以从中收获一些东西”，当然，我并不希望你来收获乱伦的知识和心得，酷壳是一个技术博客，应该是收获技术方面的东西。\n …\n 阅读全文 Read More\n\n (29 人打了分，平均分： 4.38 )Loading...\n"
  },
  {
    "content": "",
    "title": "开源中最好的Web开发的资源",
    "url": "https://coolshell.cn/articles/4795.html",
    "date": "2011-06-08T08:28:52+08:00",
    "description": "\n文章来源：Best “must know” open sources to build the new Web。个人感觉这个收集贴收集成相当的全。\n学习HTML 5编程和设计\n\n\n★ HTML5 Rocks : Major Feature Groups  的学习 HTML5 的资源 (HTML5 演示, 教程 ). 源码\n很不错的 HTML5 Dashboard – Mozilla，效果很炫。\nWhatWG Developers, 一个清楚的 HTML5 技术规格说明书。\n★ StackOverflow : 大名鼎鼎的技术问答式论坛。\n★ Addyosmani, jQuery 和 JavaScript 文章教程\nSohtanaka, jQuery 和 JavaScript 文章和教程\n★ Nettuts+ 是一个面对Web开发人员和设计人员的网站，提供各种技术教程和文章，覆盖 HTML, CSS, Javascript, CMS’s, PHP 和 Ruby on Rails.\nCodrops, 教程和 web 资源\nWebAppers, 最好的开源资源\nTutorialzine – PHP MySQL jQuery CSS 教程, 资源和赠品\nMozilla JavaScript guide\n codes snippets, 作者自己收集的一些代码片段\n\n …\n 阅读全文 Read More\n\n (35 人打了分，平均分： 4.31 )Loading...\n"
  },
  {
    "content": "",
    "title": "HTTP幂等性概念和应用",
    "url": "https://coolshell.cn/articles/4787.html",
    "date": "2011-06-07T08:49:01+08:00",
    "description": "\n[ 感谢 Todd 同学投递本文 ]\n基于HTTP协议的Web API是时下最为流行的一种分布式服务提供方式。无论是在大型互联网应用还是企业级架构中，我们都见到了越来越多的SOA或RESTful的Web API。为什么Web API如此流行呢？我认为很大程度上应归功于简单有效的HTTP协议。HTTP协议是一种分布式的面向资源的网络应用层协议，无论是服务器端提供Web服务，还是客户端消费Web服务都非常简单。再加上浏览器、Javascript、AJAX、JSON以及HTML5等技术和工具的发展，互联网应用架构设计表现出了从传统的PHP、JSP、ASP.NET等服务器端动态网页向Web API + RIA（富互联网应用）过渡的趋势。Web API专注于提供业务服务，RIA专注于用户界面和交互设计，从此两个领域的分工更加明晰。在这种趋势下，Web API设计将成为服务器端程序员的必修课。然而，正如简单的Java语言并不意味着高质量的Java程序，简单的HTTP协议也不意味着高质量的Web API。要想设计出高质量的Web API，还需要深入理解分布式系统及HTTP协议的特性。\n \n \n幂等性定义\n本文所要探讨的正是HTTP协议涉及到的一种重要性质：幂等性(Idempotence)。在HTTP/1.1规范中幂等性的定义是：\nMethods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N > 0 identical requests is the same as for a single request.\n从定义上看，HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。幂等性属于语义范畴，正如编译器只能帮助检查语法错误一样，HTTP规范也没有办法通过消息格式等语法手段来定义它，这可能是它不太受到重视的原因之一。但实际上，幂等性是分布式系统设计中十分重要的概念，而HTTP的分布式本质也决定了它在HTTP中具有重要地位。\n …\n 阅读全文 Read More\n\n (21 人打了分，平均分： 3.38 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何写出无法维护的代码",
    "url": "https://coolshell.cn/articles/4758.html",
    "date": "2011-06-03T08:52:42+08:00",
    "description": "\n酷壳里有很多我觉得很不错的文章，但是访问量最大的却是那篇《6个变态的Hello World》，和它能在本站右边栏“全站热门”中出现的还有“如何加密源代码”，以及编程真难啊等这样的文章。可见本站的读者们的偏好，我也相信你们都是“身怀绝技”的程序员。所以，今天给大家推荐这篇文章，相信一定能触动大家的兴奋点。\n这篇文章的原文在这里（http://mindprod.com/jgloss/unmain.html），我看完后我想说——\n\n什么叫“创造力”，创造力就是——就算是要干一件烂事都能干得那么漂亮那么有创意的能力。\n什么叫“抓狂”，抓狂就是——以一种沉着老练的不屈不挠的一本正经的精神一点一点把你推向崩溃的边缘。\n\n我把文章节选了一些，也并没有完全翻译，简译一下，也加入了一些自己的调侃。对于有下面这些编程习惯的朋友，请大家对号入座。另外，维护程序的朋友们，你们死定了！！\nIf builders built buildings the way programmers write programs, then the first woodpecker that came along would destroy civilization. （如果建筑师盖房子就像程序员写程序一样，那么，第一只到来的啄木鸟就能毁掉我们的文明）\n~ Gerald Weinberg (born: 1933-10-27 age: 77) Weinberg’s Second Law\n程序命名\n\n容易输入的名字。比如：Fred，asdf\n单字母的变量名。比如：a,b,c, x,y,z（陈皓注：如果不够用，可以考虑a1,a2,a3,a4,….）\n有创意地拼写错误。比如：SetPintleOpening， SetPintalClosing。这样可以让人很难搜索代码。\n抽象。比如：ProcessData, DoIt, GetData… 抽象到就跟什么都没说一样。\n缩写。比如：WTF，RTFSC …… （陈皓注：使用拼音缩写也同样给力，比如： BT，TMD，TJJTDS）\n随机大写字母。比如：gEtnuMbER..\n重用命名。在内嵌的语句块中使用相同的变量名有奇效。\n使用重音字母。比如：int  ínt（注：第二个 ínt不是int）\n使用下划线。比如：_, __, ___。\n使用不同的语言。比如混用英语，德语，或是中文拼音。\n使用字符命名。比如：slash, asterix, comma…\n使用无关的单词。比如：god, superman, iloveu….\n混淆l和1。字母l和数字1有时候是看不出来的。\n\n …\n 阅读全文 Read More\n\n (67 人打了分，平均分： 4.42 )Loading...\n"
  },
  {
    "content": "",
    "title": "在Web上运行Linux",
    "url": "https://coolshell.cn/articles/4722.html",
    "date": "2011-05-19T08:35:08+08:00",
    "description": "\n一个叫Fabrice Bellard的程序员写了一段Javascript在Web浏览器中启动Linux（原网页，我把这个网页iframe在了下面），目前，你只能使用Firefox 4和Chrome 11运行这个Linux。这不是什么假的模仿Linux的东西，这是实实在在的运行一个Linux。这一举动还引起了很多很牛人的关注，包括Javascript的创建者Brendan Eich。\n清除启动开始启动\n\n …\n 阅读全文 Read More\n\n (54 人打了分，平均分： 4.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "Python 和 PyGame 的一些示例",
    "url": "https://coolshell.cn/articles/4710.html",
    "date": "2011-05-18T08:43:58+08:00",
    "description": "\n看到一个网页收集了很多使用Python和PyGame写游戏的示例，分享给大家。（注：我不知道用Python/PyGame写游戏其性能会怎么样，但是一些小游戏应该是没有问题的）\n这个网页同时给了一本介绍Python和PyGame的电子书（PDF），下面的这些例子就是这本书的示例。所有的这些示例可以打包下载。\n基础 Python 示例\n\nif_statement_examples.py – if 语句的一个简单示例\nfor_loop_examples.py – for 语句的一个简单示例.\nwhile_loop_examples.py – while 语句的一个简单示例\n\nPygame 图形示例\n\n\n\npygame_base_template.py – 开启一个黑的 pygame 窗口。当你要写一个新的代码时，你可以使用这个示例的代码初始化你的程序。\n\n\n\nsimple_graphics_demo.py – 作图，画一些简单的图形。\n\n\n\n\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "可视化的数据结构和算法",
    "url": "https://coolshell.cn/articles/4671.html",
    "date": "2011-05-04T14:26:46+08:00",
    "description": "\n还记得之前发布过的那个关于可视化排序的文章吗？在网上又看到了一个旧金山大学David Galles做的各种可视化的数据结构和基本算法的主页，网址在这里，大家可以看看。我把这个页面的目录列在下面并翻译了一下，大家可以直接点击了。\n不知道国内的教育有没有相关的教学课件，至少在我大学的时候是没有的。\n基础\n\nStack栈: 数组实现\nStack栈: 链表实现\nQueues队列: 数组实现\nQueues队列: 链表实现\nLists列表: 数组实现 ( java 版演示)\nLists列表: 链表实现 ( java 版演示)\n\n索引\n\nBinary Search Trees 二叉检索树\nAVL Trees (平衡二叉检索树)\nRed-Black Trees 红黑树 ( flash 版本演示)\nOpen Hash Tables 开放哈希表(Closed Addressing 链地址法)\nClosed Hash Tables  闭合哈希表 (Open Addressing 开放定址法)\nClosed Hash Tables, using buckets 使用桶\nB Trees B树\nB+ Trees B+树\n\n …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 4.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "狗日的开源软件许可证",
    "url": "https://coolshell.cn/articles/4657.html",
    "date": "2011-05-04T08:25:17+08:00",
    "description": "\n你知道这个世上有多少种开源软件的许可证吗？GPL，BSD，MIT，Apache？GNU上有个网页，上面记录了几乎所有的开源软件的许可证，真TMD的多，有开源的，有商用的，有软件的，有文档的，多得你都不想看了，天杀的，程序员们还真能鼓捣啊。不过，主流的也就几种——GPL、BSD、MIT、Mozilla、Apache等等。\n那么，你知道怎么区别他们吧？怎么选择他们吗？这里有一张比较复杂的图，在调侃这些纷繁的许可证（我不翻译了，这个图属于是发泄不满）\n\n下面是另一个图，这个图来自这里，这个图并不恶搞，但其非常简单地说明了如何选择一个开源的许可证：\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 3.94 )Loading...\n"
  },
  {
    "content": "",
    "title": "读书笔记：对线程模型的批评",
    "url": "https://coolshell.cn/articles/4626.html",
    "date": "2011-05-03T10:23:27+08:00",
    "description": "\n——感谢Ian.Sian投递本文——\n多线程模型是主流的并发编程模型。在过去几十年来，多线程模型一直是开发并发程序的有力工具。然而，它的历史并非总那么美好。1997年，NASA 的“火星探路者”号在执行任务的途中遭遇了严重的时序异常（参见 “What really happend on Mars“，注目 follow-up 中的现身说法），无法发回探测数据。如果不是 NASA 远程刷新了程序，它的结局就只能是报废在火星上。这一切都是由程序中潜藏的一个优先级反转 bug 造成的。更早的例子还有80年代的一系列 Therac-25 型医用粒子加速器事故。在这些加速器释放出的过量辐射照射之下，数位病人死亡。事后调查显示，至少有一次发生事故的原因，是加速器的控制软件中，存在一个只能由特定操作序列引发的竞争条件 bug。你也许认为这些只是陈年往事，但是直到现在，即便是世界500强公司们高价买来的信息系统，也同样避免不了这些问题。这导致许多程序员认为线程是个潘多拉魔盒，对它采取能躲就躲的态度。然而近来计算机的发展使得躲猫猫的空间越来越小：随便从市场上淘一个CPU，它里面也有不止一个核心。未来的程序员只会有越来越多的机会接触到并发编程，而无法再独善其身了。\n加州大学伯克利分校教授，爱德华 A. 李在2006年做了一次题为《线程的麻烦 (The Problem with Threads)》的学术报告。在报告中他提到：看上去，多线程只是对核心语言的小小扩展，甚至可以以第三方库的形式存在。但实质上，多线程程序和原有的核心语言编写的程序已经完全不同了。其原因在于，由于多线程程序可能以任意的次序交错执行，程序再也无法像顺序执行时那样产生确定的结果。多线程程序容易编写(因为写的是顺序程序)，但是难分析，难调试，更容易出错。\n在我的想法中，产生问题的根源，是多线程模型作为对并发问题的一个抽象，是很不完善的。 …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 3.92 )Loading...\n"
  },
  {
    "content": "",
    "title": "Amazon的书为什么卖到了$2000万",
    "url": "https://coolshell.cn/articles/4605.html",
    "date": "2011-04-28T12:41:41+08:00",
    "description": "\n最近，Amazon的新闻比较多，除了Amazon的云平台宕机外，还有一个被热炒的新闻是在Amazon的书店里，有一本书要买$23,698,655.93美元，相当于1亿5千万人民币（如下图所示），这个事情是由UC Berkeley的生物学家Michael Eisen发现的，然后他在他的博客上写了一篇文章来说明这个事情。\n这本书是1992年，现在绝版了，生物学家决定上Amazon找一下，结果看到了有两本新书，还有一些二手的，二手书价比较正常，但是那两个新书的价都上了百万。这个生物学家还写了邮件给原作者和原作者开了玩笑。呵呵。\n\n一般人可能就把这个事当成个笑话了，不过，教授就是教授，它还认真的研究了一下为什么会这样。\n …\n 阅读全文 Read More\n\n (20 人打了分，平均分： 4.20 )Loading...\n"
  },
  {
    "content": "",
    "title": "关于Amazon云宕机的网贴收集",
    "url": "https://coolshell.cn/articles/4601.html",
    "date": "2011-04-27T22:49:07+08:00",
    "description": "\n最近，互联网上最大的事可能是Amazon的AWS宕机了，而且好几天都没有完全恢复。整个Internet都在讨论这个事，Internet很不高兴，后果可能很严重。可能是因为这个事件对中国没有影响，所以中文这边相关的文章不多，大家可以参考一下和讯网的这篇《伤不起！亚马逊史前最大宕机事件的启示》。\n国外有人把所有和这个事件相关的贴子都收集了起来，都是一些相当不错的贴子和文章，尤其是一些经验教训的贴子，很受教，转给大家看看。这个贴子的来源在这里。\n个别公司的经历，有好有坏\n\nHow Heroku Survived the Amazon Outage on the Heroku status page\nHow SimpleGeo Stayed Up During the AWS Downtime by Mike Malone\nHow SmugMug survived the Amazonpocalypse by Don MacAskill  (Hacker News discussion)\nHow Bizo survived the Great AWS Outage of 2011 relatively unscathed… by Someone at Bizo\nJoe Stump’s explanation of how SimpleGeo survived\nHow Netflix Survived the Outage\nWhy Twilio Wasn’t Affected by Today’s AWS Issues on Twilio Engineering’s Blog (Hacker News thread)\nOn reddit’s outage\nWhat caused the Quora problems/outage in April 2011?\nRecovering from Amazon cloud outage by Drew Engelson of PBS.\n\nPBS was affected for a while primarily because we do use EBS-backed RDS databases. Despite being spread across multiple availability-zones, we weren’t easily able to launch new resources ANYWHERE in the East region since everyone else was trying to do the same. I ended up pushing the RDS stuff out West for the time being.  From Comment\n\n\n\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux 2.6.39-rc3的一个插曲",
    "url": "https://coolshell.cn/articles/4576.html",
    "date": "2011-04-27T08:39:26+08:00",
    "description": "\n2011年4月12日，Linux 2.6.39-rc3发布了，Linus Torvalds写了一个发布邮件，其中包含了一个长长的为这个版本做过贡献的人员名单，这个名单中有很多看上去应该是中国人的名字，我挺为他们感到骄傲的（不知道你是否还记得以前本站的”Linux是由谁写的“）。\n不过，没过一会，发现了一个bug，经过大家的调查（2.6.38版没有发现这个问题），很快，找到了原因，是因为一个内存地址的问题，一个叫Yinghai Lu的人（看其名字应该是中国人，其邮件是@kernel.org）找到了原因—— radeon card使用了一个不正确的内存地址[0xa0000000 – 0xc000000]。Joerg Roedel跟贴说，这个地址超出了4GB的内存，然后他和Alex Deucher聊了一会，觉得不应该是这个问题，因为这个地址应该是GPU的，而不是系统内存的。\n好像，Yinghai Lu没有理会他们说的不应该是这个问题，给出了个fix：\n\ndiff --git a/arch/x86/kernel/aperture_64.c b/arch/x86/kernel/aperture_64.c\nindex 86d1ad4..3b6a9d5 100644\n--- a/arch/x86/kernel/aperture_64.c\n+++ b/arch/x86/kernel/aperture_64.c\n@@ -83,7 +83,7 @@ static u32 __init allocate_aperture(void)\n \t * so don't use 512M below as gart iommu, leave the space for kernel\n \t * code for safe\n \t */\n-\taddr = memblock_find_in_range(0, 1ULL<<32, aper_size, 512ULL<<20);\n+\taddr = memblock_find_in_range(0, 1ULL<<32, aper_size, 512ULL<<21);\n  \tif (addr == MEMBLOCK_ERROR || addr + aper_size > 0xffffffff) {\n \t\tprintk(KERN_ERR\n \t\t\t\"Cannot allocate aperture memory hole (%lx,%uK)\\n\",\n\n看到这个fix，Linus Torvalds不高兴了，他回贴问道：\n\n为什么全都是Magic Numbers？\n为什么0x80000000就那么特殊？\n为什么我们这样改就行？\n\n还说了这样一句话——\n …\n 阅读全文 Read More\n\n (30 人打了分，平均分： 4.27 )Loading...\n"
  },
  {
    "content": "",
    "title": "对程序员职业的一些建议",
    "url": "https://coolshell.cn/articles/4561.html",
    "date": "2011-04-26T13:29:44+08:00",
    "description": "\n自从四年前被CSDN采访后（“职业规化就像软件工程”），经常会有网友（尤其是刚毕业的）写邮件来问我一些程序员职业生涯的一些问题，至到今天。比如，国企还是外企的选择，一直编程有没有前途等等问题。面对这样的邮件，我感到有很大的压力，因为如果我的回复很有可能会误人一生，但我另一方面又很想帮助这些人。所以，我基本上还是会尝试回一下这样的邮件。昨天，我又回了一封。但是我心里还是有点忐忑不安。害怕说错了什么。\n今天，我想把我的一些思路和建议写在这里，一方面供大家参考，另一方面也想听听大家对我的评判，这样不但对更多的人有帮助，同时对我自己也是一个帮助。\n下面是某网友前天给我发来的邮件：\n我是一个刚刚毕业的大学生，我觉得自己对于程序员这个行业感到很迷惘，所以发邮件打扰您一下，麻烦了。\n我今年正在找工作，我现在有几家国企的offer，百度的offer还在等待，我觉得第一份工作对我来说很重要，因为第一份基本决定了近几年或者一辈子你在哪个行业发展。家里人都是希望我签国企，但是我自己对技术很感兴趣，一直希望能在技术上面走下去，签国企虽然很轻松但是我总觉得在技术上学不到什么有用的东西，所以我个人倾向是去百度。\n我现在很迷惘的是，如果我一直在程序员这个行业上走下去，以后的出路应该是什么呢？还是一直到高级工程师，还是项目管理这种程度吗？\n我现在听很多人在说程序员必需要转行，因为一辈子在编写代码，没有什么好的出路，对于这点，您有什么看法吗？我现在才刚刚从学校毕业，对IT这个行业也不是非常了解，但是我觉得自己自学能力很强，而且确实很想学些东西，你对于一个刚刚毕业的计算机学生有什么建议吗？\n信件的内容我没有改变，我相信很多人都有相似的问题。我昨天给这们朋友回复了邮件，下面是我回复内容的一个整理。欢迎大家讨论。\n首先，我想说的是，这些东西只是我根据我的经历给出的建议，仅仅供大家去参考，你的路你的人生要你自己决定，不要轻易的让人帮你决定，那怕是你的家人。\n如果我们把所的问题一起谈，那怎么说也说不清楚，所以，请允许我“关键点分离原则”来分开说说。\n …\n 阅读全文 Read More\n\n (70 人打了分，平均分： 4.69 )Loading...\n"
  },
  {
    "content": "",
    "title": "Facebook 的系统架构",
    "url": "https://coolshell.cn/articles/4549.html",
    "date": "2011-04-25T13:39:26+08:00",
    "description": "\n来源：http://www.quora.com/What-is-Facebooks-architecture （由Micha?l Figuière回答）\n根据我现有的阅读和谈话，我所理解的今天Facebook的架构如下：\n\nWeb 前端是由 PHP 写的。Facebook 的 HipHop [1] 会把PHP转成 C++ 并用 g++编译，这样就可以为模板和Web逻贺业务层提供高的性能。\n\n\n业务逻辑以Service的形式存在，其使用Thrift [2]。这些Service根据需求的不同由PHP，C++或Java实现（也可以用到了其它的一些语言……）\n\n\n用Java写的Services没有用到任何一个企业级的应用服务器，但用到了Facebook自己的定制的应用服务器。看上去好像是重新发明轮子，但是这些Services只被暴露给Thrift使用（绝大所数是这样），Tomcat太重量级了，即使是Jetty也可能太过了点，其附加值对Facebook所需要的没有意义。\n\n\n持久化由MySQL, Memcached [3], Facebook 的 Cassandra [4], Hadoop 的 HBase [5] 完成。Memcached 使用了MySQL的内存Cache。Facebook 工程师承认他们的Cassandra 使用正在减少，因为他们更喜欢HBase，因为它的更简单的一致性模型，以到其MapReduce能力。\n\n\n离线处理使用Hadoop 和 Hive。\n\n\n日志，点击，feeds数据使用Scribe [6]，把其聚合并存在 HDFS，其使用Scribe-HDFS [7]，因而允许使用MapReduce进行扩展分析。\n\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些软件设计的原则",
    "url": "https://coolshell.cn/articles/4535.html",
    "date": "2011-04-25T08:24:18+08:00",
    "description": "\n以前本站向大家介绍过一些软件开发的原则，比如优质代码的十诫和Unix传奇(下篇)中所以说的UNIX的设计原则。相信大家从中能够从中学了解到一些设计原理方面的知识，正如我在《再谈“我是怎么招聘程序”》中所说的，一个好的程序员通常由其操作技能、知识水平，经验层力和能力四个方面组成。在这里想和大家说说设计中的一些原则，我认为这些东西属于长期经验总结出来的知识。这些原则，每一个程序员都应该了解。但是请不要教条主义，在使用的时候还是要多多考虑实际情况。其实，下面这些原则，不单单只是软件开发，可以推广到其它生产活动中，甚至我们的生活中。\nDon’t Repeat Yourself (DRY)\nDRY 是一个最简单的法则，也是最容易被理解的。但它也可能是最难被应用的（因为要做到这样，我们需要在泛型设计上做相当的努力，这并不是一件容易的事）。它意味着，当我们在两个或多个地方的时候发现一些相似的代码的时候，我们需要把他们的共性抽象出来形一个唯一的新方法，并且改变现有的地方的代码让他们以一些合适的参数调用这个新的方法。\n参考：http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\nKeep It Simple, Stupid (KISS)\nKISS原则在设计上可能最被推崇的，在家装设计，界面设计 ，操作设计上，复杂的东西越来越被众人所BS了，而简单的东西越来越被人所认可，比如这些UI的设计和我们中国网页（尤其是新浪的网页）者是负面的例子。“宜家”（IKEA）简约、效率的家居设计、生产思路；“微软”（Microsoft）“所见即所得”的理念；“谷歌”（Google)简约、直接的商业风格，无一例外的遵循了“kiss”原则，也正是“kiss”原则，成就了这些看似神奇的商业经典。而苹果公司的iPhone/iPad将这个原则实践到了极至。\n …\n 阅读全文 Read More\n\n (33 人打了分，平均分： 4.39 )Loading...\n"
  },
  {
    "content": "",
    "title": "再谈“我是怎么招聘程序员的”（上）",
    "url": "https://coolshell.cn/articles/4506.html",
    "date": "2011-04-20T08:36:55+08:00",
    "description": "\n我以前写过一篇“我是怎么招聘程序员的”的文章（在CSDN那里有很多人进行了回复）。今天，我想再谈谈关于招聘和面试这方面的东西，主要是以下这些原因：\n\n近半年来我在进行了大量的招聘工作，对面试有一些新的体会。\n酷壳最近发布了几篇趣味面试题（面试题一，面试题二，面试题三），从回复中让我有一些思考。\n我有一个同事最近面试了一家公司，他和我分享了一个博士专家对他的面试，也让我思考了一些。\n在豆瓣上看到“知乎上某人写面试豆瓣产品经理的经历，很欢乐”(亮点是面试官现身知乎亲自作答)\n\n所以，我很想把自己的这些新的想法再次写下来的。还是和以前一样，这篇文章同样是献给面试官的。我认为，面试的好坏完全在面试官而不是面试的人。下面是我对“我是怎么招聘程序员的”一文中的一些加强性的观点。（关于一些点评，请参看本文下篇）\n为了让我的文章有连续性，请允许我重申一下前文的几个重要观点。\n\n只有应聘者真实和自然的表现，才能了解到最真实的东西\n重要的不是知识，重要的是其查找知识的能力\n重要的不是那个解题的答案，而是解题的思路和方法\n\n操作，知识，经验，能力\n我们有很多的面试官似乎分不清，什么是操作能力，什么是知识，什么是经验，什么是能力，这导致了我们的面试官经常错误地对面试者下结论，我认为分不清这些事的人是没有资格做面试官的。所以，我有必要在这里把这个问题先讲清楚。\n …\n 阅读全文 Read More\n\n (43 人打了分，平均分： 4.49 )Loading...\n"
  },
  {
    "content": "",
    "title": "再谈“我是怎么招聘程序员的”（下）",
    "url": "https://coolshell.cn/articles/4490.html",
    "date": "2011-04-20T08:35:07+08:00",
    "description": "\n<<<再谈“我是怎么招聘程序员的”（上）\n在上篇中，我们说到了一些认识人的方法（操作，知识，经验，能力），还有一些面试的方法（算法题，实际生产活动中的挑战），下面我们来说说，面试的风格，还有一些点评。\n\n把应聘者当成你的同事\n有些公司的面试官，在面试过程中问你一个算法题，然后等着你解答了，如果你给出一个答案，然后就会问你有没有更好的答案，如果你给出了正确的答案，他们就会问你一个更难的问题，如此循环下去。他们基本上很少给你提示，甚至不停地质问你，挑战你，搞得应聘者很紧张。\n另外，有很多问题是没有标准答案的，或者说是，同一个答案的描述方法有多种，很多面试官会觉得你没有回答到他想要的答案，因此表现得有对你不屑，并表现出你不行的样子，并觉得你的能力有问题。真是可笑了。比如我一个朋友在回答什么是异步的问题时，举例说明了异步调用就是不能处理完就返回，并且需要传递一个回调函数给调用方以便完成后回调通知结果。这样的回答并没有错，但是这并不符合面试官心里想要的答案，面试官对此并不满意，进而认为我这个朋友还需要去多读读书。\n我相信大多数面试官都会这样干的。我想问问这样的面试官，你们有没有用面试的方式对过你的同事？在你的工作场景中，你会不会用面试的风格和你的同事进行交流和说话？不妨让我们来问我们自己下面几个问题：\n\n你在工作当中遇到难题时你是怎么解决的？你会和人讨论吗？你只用15分钟就能得出最优解吗？\n你在工作当中解决难题时是否会有一个人在旁边质问你并给你压力吗？\n你在工作当中会为难你的同事吗？会让你的同事紧张吗？你觉得在紧张的状态下能做好工作吗？\n你在工作中觉得同事的回答并不是你想要的答案，不是符合你的答案，你会认为你的同事不行吗？\n你的成长过程是什么样的？在是压力和天天被人质问的情况下成长的吗？\n大家都知道学校里应试教育的弊端，你觉得你的面试是不是一种应试呢？\n（看看这么多的应聘者们都在做各种各样的算法题，这不就是一种应试吗？）\n\n想一想你的日常工作，问自己一下上面这些问题，想一想你自己的成长过程，想一想你和你的同事是怎么相处的，想一想你的日常工作中是什么样的，相信你自己也能得出结论的。\n如果你把应聘者当成自己未来的同事，那么你的面试会有下面的收获：\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.37 )Loading...\n"
  },
  {
    "content": "",
    "title": "BT雷人的程序语言（大全）",
    "url": "https://coolshell.cn/articles/4458.html",
    "date": "2011-04-13T08:34:50+08:00",
    "description": "\n还记得以前本站的BT雷人的程序语言吗？除了那几个Brainfuck，LOLCODE和WhiteSpace，我以为这些是比较BT的语言，但是自从这两天我在网上看到一些（见文章最后的参考一节），我发现我错了，这个世界上，只有更变态，没有最变态。不相，你看看下面这些，简直变态到了极致啊。（下面的语言变态不分排名）\nBefunge\n第一个变态语言Befunge。维基上面说——这门语言由Chris Pressey在1993年创造，本意为设计一种为难编译器的语言……结果马上出现了一批编译器。Befunge的代码是二维的。它用 < > v ^ 这四个符号来控制一个指针在代码中移动，指针经过一个字符或数字则把它压入一个栈，四则运算符号的功能就是弹出栈顶两个元素进行计算后把结果压回去。用 _ 和 | 来表示有条件的方向选择：当栈顶元素为0时向右（上）走，否则向左（下）走。& 和 ~ 分别用于读入数字或字符并压入栈，句号和逗号分别表示将栈顶元素作为整数或字符输出。最后以一个@符号表示程序结束。Befunge代码的注释不需要任何符号标明，你可以把注释写在程序的任何地方，只要运行时指针不会经过它就行了。\n下面这段Hello World代码：\n>              v\nv  ,,,,,\"Hello\"<\n>48*,          v\nv,,,,,,\"World!\"<\n>25*,@\n下面一个是算圆周率的代码，非常的壮观：\n …\n 阅读全文 Read More\n\n (29 人打了分，平均分： 4.45 )Loading...\n"
  },
  {
    "content": "",
    "title": "面试题：火车运煤问题",
    "url": "https://coolshell.cn/articles/4429.html",
    "date": "2011-04-11T09:01:31+08:00",
    "description": "\n这个可能是一个比较经典的智力题了，和以前的那个《赛马问题》很相似，其题目如下：\n你是山西的一个煤老板，你在矿区开采了有3000吨煤需要运送到市场上去卖，从你的矿区到市场有1000公里，你手里有一列烧煤的火车，这个火车最多只能装1000吨煤，且其能耗比较大——每一公里需要耗一吨煤。请问，作为一个懂编程的煤老板的你，你会怎么运送才能运最多的煤到集市？\n这道题一开始看上去好像是无解的，因为你的火车每一公里就要消耗一吨煤，而到目的地有1000公里，而火车最多只能装1000吨媒。如果你的火车可以全部装下，到目的地也会被全部烧光，一丁点也不剩。所以，很多人的第一反应都是觉得这个不太可能。\n如果你一开始就觉得不太可能的话，这是很正常的。不过我不知道你还会不会继续思考下去，如果你不想思考下去了，那么我很为你担忧，因为你可能并不是一个不善于思考的人，而是一个畏难的人，还有可能是一个容易放弃的人。这对于你做好 一个需要大量思考的工作的程序员来说可能并不适合。\n我一开始也觉得不可能，后来想了一想，想到一个解法可以最多运送500吨煤到市场，方法如下：（希望你先自己想一想再查看这个答案）\n…\n 阅读全文 Read More\n\n (50 人打了分，平均分： 4.52 )Loading...\n"
  },
  {
    "content": "",
    "title": "Eclipse开发Android应用程序入门:重装上阵",
    "url": "https://coolshell.cn/articles/4334.html",
    "date": "2011-04-08T08:30:09+08:00",
    "description": "\n翻译:赵锟\n原文：http://www.smashingmagazine.com/2011/03/28/get-started-developing-for-android-with-eclipse-reloaded/\n在我们教程系列的第一部分中，我们使用Android和Eclipse开发了一个简单的饮茶计时器的应用程序。在第二部分，我们将继续开发这个程序，并给它增加一些其他的额外的功能。在开发的过程中，我们将给你介绍更多重要而强大的Android SDK特性，包括持久化数据存储，Activity和Intent，和共享用户首选项（译者注：类似于windows 的注册表的一种机制）。\n跟着本教程，你需要上一篇教程中的代码，如果你想直接使用代码，你可以使用如下的指令从GitHub上check out出tutorial_par_1标记的代码：\n\n[code]\n$ git clone git://github.com/cblunt/BrewClock.git\n$ cd BrewClock\n$ git checkout tutorial_part_1\n[/code]\n在GitHub中检出了代码后，你需要将代码倒入到Eclipse中的项目中：\n\n运行 Eclipse 选择 File → Import…\n在导入窗口, 选择 “Existing Projects into Workspace”并点击 “Next.”\n在下一屏，点击 “Browse,”选择你从GitHub上clone出的代码目录。\n点击“Finish” 将项目导入到Eclipse中。\n\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.17 )Loading...\n"
  },
  {
    "content": "",
    "title": "Eclipse开发Android应用程序入门",
    "url": "https://coolshell.cn/articles/4270.html",
    "date": "2011-04-07T16:40:36+08:00",
    "description": "\nBy Chris Blunt\n翻译：赵锟\n原文出处：http://www.smashingmagazine.com/2010/10/25/get-started-developing-for-android-with-eclipse/\n如今的移动设备应用程序开发充满着让人振奋的东西。功能强大的硬件支持，平板电脑，多样的软件平台（塞班 OS，iOS，WebOS，Windows Phone 7…)，移动设备开发者前景充满了机会和挑战。\n当你想要开始开发你的移动设备程序时，如此多的选择可能让你产生困扰。究竟应该选择神马平台？我应该学习神马语言？为你计划的项目选择神马工具？在本教程中，你将学会如何在Google公司的开源移动设备操作系统Android下开发应用程序。\n为神马选Android\nAndroid是一个基于Linux内核的开源平台， 并且被安装在来自于不同厂商的上千种设备中。Android将各种移动设备的硬件如 电子罗盘，摄像头，GPS，方向感应，等等暴露给你的应用程序。\n…\n 阅读全文 Read More\n\n (18 人打了分，平均分： 3.44 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员的谎谬之言还是至理名言？",
    "url": "https://coolshell.cn/articles/4235.html",
    "date": "2011-04-07T10:08:59+08:00",
    "description": "\n有朋友（网友never）在酷壳Coolshell.cn的留言版上问我，为什么关注了这很多的东西，我想我可以用下文来回答这位网友，因为我和作者的观点几乎一致。这篇文章由 ALAN SKORKIN写的 “The Greatest Developer Fallacy Or The Wisest Words You’ll Ever Hear?” ，我把其全文翻译如下，我很喜欢这篇文章，希望你也喜欢。（翻译的也许不好，欢迎指正）\n—————————————————正文分隔线——————————————————\n\n“I will learn it when I need it – 我会在我需要的时候再学“！我听到这句已经很多年了。这对于一个高速变化的软件行业环境来说，这似乎是一个非常实用的态度。 在某些方面这的确很实用主义，不过在其它的方面，我为这句话感到很不爽。这句话变成了整个软件行业的福音，但却没有让我们的软件行业变得更好。其问题在于，这句话伪装在于其听上去像是一个智慧的有经验的开发者说的，但是人们只是以此为借口而随波逐流。实在是有太多的东西需要我们去了解，我们也的确需要在工作当中来学习这些东西。但是， “在工作中学习”和“根据遇到的问题捡知识”这两者有着巨大的不同。\n\n另外，目前整个软件行业越来越需要一堆多面手，也许现在已经是这样了，只是我还没有注意到。当然，我也不喜欢这种情。现在，好像没有人愿意花更多的时间来把某一个东西学好学深学扎实，比如 计算机科学的基础知识，或是最新的你正在使用的技术，甚至你在最近几年内每天都在使用其编码的程序语言（参考：Java is passed by value）（译注：我在如何学好C++一文的回复中已经看到一些这样的人）。何苦呢？你会在你的学习路途中看到这些东西被更新，被废弃，并可能变得小众化。我和很多不同的人讨论过很多次，但是好像没有人意识到这是一个问题。 “哥们，做个实用主义的人吧”。\n\n\n与此同时，我们所有的人都在相互地克隆和模仿（译注：参看中国的C2C）。你需要一个Java程序员，我是一个Java程序员，你也是一个Java程序员，我的邻居也是一个Java程序员。我们之间有什么差别？其实，基本没有差别。好吧，我有一些jQuery的经历，太好，所以，你知道怎么来做一个折叠式的菜单？当然，我可以Google一下，然后剽窃别人最好的代码给你 :)（译注：参看“十条不错的编程观点”中的”Googling it” is okay）。\n\n …\n 阅读全文 Read More\n\n (124 人打了分，平均分： 4.77 )Loading...\n"
  },
  {
    "content": "",
    "title": "JavaMail使用",
    "url": "https://coolshell.cn/articles/4261.html",
    "date": "2011-04-06T23:05:39+08:00",
    "description": "\n（本文由网友jjzhx_1211投递，感谢!）\n使用JavaMail需要两个包：activation-1.1.jar和mail-1.4.2.jar（当然现在最新的版本已经不止了），也可以直接包含Java SE 6的j2ee.jar，自带了前面的两个包。我把邮件功能写成了一个服务，发送邮件的数据都通过Map<String, String>类型的参数封装了起来。代码见文章最后。\nSession\nSession 定义了一个基本的邮件会话，任何工作都是基于这个Session的。Session 对象需要一个 java.util.Properties 对象来得到类似 邮件服务器，用户名，密码这样的信息。Session 的构造函数是私有的，可以通过 getDefaultInstance() 方法来取得一个单一的可以被共享的默认session 如：\nProperties props = new Properties();\nSession session = Session.getDefaultInstance(props,null);\n或者，可以使用 getInstance() 方法来创建一个唯一的 session如：\nProperties props = new Properties();\nSession session = Session.getInstance(props,null);\n在这两种方法中 其中的 null 参数是一个 Authenticator 对象，在这里没有被使用的，所以就是null。在大多数案例中，使用一个共享session 已经做够了。\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 2.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些有意思的文章和资源",
    "url": "https://coolshell.cn/articles/4220.html",
    "date": "2011-04-06T08:47:40+08:00",
    "description": "\n又到了向大家介绍一些最近我在网上发现的有价值的东西的时候了。（下面的链接中很多都被墙）\n\n以前向大家介绍过《一些重要的算法》和《算法和数据结构词典》，不过，你知道有些什么样比较奇怪的数据结构吗？wikipedia上的这个词条可以让你看看各种不同的数据结构。比如：Skip lists， Bloom filters，或是什么Dancing links。你也许会像一个以“如何学好C++”中的朋友们所说的，不削于这种所谓的“奇技淫巧”，甚至觉得这太根本不实用。其实，这些东西还是有用的，至少对你开阔思路，活动编程思维能力很有意义。\n\n\n本站的关于排序的文章有很多，对于排序算法来说，其受到要排序的个数和数据的杂乱程度的影响，我们知道比较稳定的排序算法是快速排序和归并排序，归并排序对于大量的数据排序效果是非常好的，尤其是我们可以进行并行的排序。这里有一个并行归并排序的算法的源代码，你可以参考一下 – “Parallel Merge Sort”。\n\n\n说到“奇技淫巧”和算法，这里有一个文章向你展示了C语言中使用位操作可能完成的各种算法，很有意思。请参看 – “The Aggregate Magic Algorithms”\n\n\n这里有篇文章教你如何取得一个在线的哈佛大学的硕士学位，文章中说了一些相关的事宜，包括一些收费情况，并且展示了一张文凭。这里有一个网页说明了哈佛软件工程学位（Software Engineering）的所需要学习的科目，比如：Java和分布式计算，分布式/企业级计算，设计模式和Java，通讯协议，高级数据网络，Web开发，计算理论，Perl实践，Unix系统编程……我不知道我们的国家各个大学的硕士在学什么，因为我没有读过硕士，但好像现在的计算机研究生只是导师用来挣钱的免费资源，而且，实在不知道研究生在校研究什么。不管怎么样，从这看来，我们的大学好像并没有教给学生计算机的技术。比如在“如何学好C语言”和“如何学好C++语言”中我提到的那些书，那些才是大学里应该学的。我国的教育还真不是一般的落后，不过你不妨试试哈佛的在线学位。\n\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 3.59 )Loading...\n"
  },
  {
    "content": "",
    "title": "我有一个Hello World的C++程序编译不过",
    "url": "https://coolshell.cn/articles/4170.html",
    "date": "2011-04-02T14:33:57+08:00",
    "description": "\n在StackOverflow上有这样一个贴子，楼主说，我有下面这样的一个C++程序，为什么编译不通过啊。其让我想起了以前的这两个帖子《编程真难啊》和《给我一个序列号》。仅以此篇文章祝大家假期快乐吧。\nhello world 程序\n楼主还给出了相关的编译出错的信息（相信你一看就明白问题在哪里了，你应该还会发出一声“靠”！！！）\n先是用Visual C++ 2010编译\nc:\\dev>cl /nologo helloworld.png\ncl : Command line warning D9024 : unrecognized source file type 'helloworld.png', object file assumed\nhelloworld.png : fatal error LNK1107: invalid or corrupt file: cannot read at 0x5172\n再用G++ 4.5.2编译\n …\n 阅读全文 Read More\n\n (23 人打了分，平均分： 4.13 )Loading...\n"
  },
  {
    "content": "",
    "title": "又一个有趣的面试题",
    "url": "https://coolshell.cn/articles/4162.html",
    "date": "2011-04-02T11:22:03+08:00",
    "description": "\n大家还记得前些天的那个火柴棍式的面试题吗？很有趣吧。下面是我今天在StackExchange上看到的一个有趣的面试题。大家不妨一起来思考一下。问题如下——\n有两个相同功能代码如下，请在在A，B，C是什么的情况下，请给出三个原因case 1比case 2快，还有三个原因case 2会比case 1要执行的快。（不考虑编译器优化）\n\nfor (i=0; i<N; ++i){\n    A;\n    B;\n    C;\n}\n\nfor (i=0; i<N; ++i){\n    A;\n}\nfor (i=0; i<N; ++i){\n    B;\n}\nfor (i=0; i<N; ++i){\n    C;\n}\n我的第一个反应是——\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 3.82 )Loading...\n"
  },
  {
    "content": "",
    "title": "WSDL 1.1 中文规范",
    "url": "https://coolshell.cn/articles/4131.html",
    "date": "2011-04-01T08:30:21+08:00",
    "description": "\nWSDL规范目前最新的版本是2.0 ，但是目前大部分还是按1.1的版本进行使用，而且1.1的内容看上去比2.0也简单些，所以我就翻译了这个版本。\n作为一种《炒作过度的技术和概念》的一类，WEB Service的确是太过重量级，对于小型的应用，还是因该避免去使用xml和SOAP这些技术。但是在企业级的应用，WEB Service已经开始成为了一种常态，所以对其有一定了解或多或少都是有一些好处的。\n当然，通过读规范来学习一门技术的方法，从来都不是一种好的学习方法，规范只是配合你学习的参考。而且WSDL1.1规范中笔误太多，笔者就发现了两处，都一一做了修正。\n原文的地址在：http://www.w3.org/TR/wsdl ，学习WSDL，需要有一定XML，XML Schema XSD，SOAP的相关知识，请在阅读时特别注意。\n另外WSDL1.1是一个宽泛的规范，所有的语法都以非正式的形式出现，而且为了满足WEB Service 扩展性的需求，也不可能定义出详尽的语法，请在阅读时特别注意。\n我的翻译版本以word形式提供，请要转载的同学们别把酷壳logo去掉的，转载请注明出处。\n由于个人水平有限，翻译难免出现错误。还请读者海涵。\n下载：WSDL 中文规范1.1\n (9 人打了分，平均分： 2.78 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何学好C++语言",
    "url": "https://coolshell.cn/articles/4119.html",
    "date": "2011-03-30T08:50:17+08:00",
    "description": "\n昨天写了一篇如何学好C语言，就有人回复问我如何学好C++，所以，我把我个人的一些学习经验写在这里，希望对大家有用。首先，因为如何学好C语言中谈到了算法和系统，所以这里就只谈C++语言。\n\nC++是最难的语言。这个世界上最难的编程语言可能非C++莫属了。你千万不要以为几天就可以学好C++，C++的学习曲线是相当BT的，你可以看看这篇文章。C++是一门很自由的语言，自由到了有点BT和恐怖的地步。我甚至认为C++并不是一门成熟的编程语言，因为太容易犯错了。所以，你一定要在一开始就要有很小心谨慎的态度，并把C++当成一种难以训服的猛兽来看待。\n\n\n多问“为什么要这样”的问题。学习C++一定要多问几个“为什么是这样”，“凭什么要这样”的问题。比如：很多人知道C++有拷贝构造函数和初始化列表，但你真的知道为什么要有拷贝构造函数？为什么要有初始化列表吗？为什么要有template，为什么要有RTTI，为什么不是别的呢？难道就是为了让一门语言变得Cool一些吗？完全不是这样的，C++中的任何一个feature都有些实实在在的原因，你一定要去了解为什么要把C++设计成这样的原因，你才能学好C++。有空看看《C++演化和设计》一书。\n\n …\n 阅读全文 Read More\n\n (51 人打了分，平均分： 4.43 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何学好C语言",
    "url": "https://coolshell.cn/articles/4102.html",
    "date": "2011-03-29T10:25:20+08:00",
    "description": "\n有人在酷壳的留言版上询问下面的问题\nkeep_walker :\n今天晚上我看到这篇文章。\nhttp://programmers.stackexchange.com/questions/62502/small-c-projects\n我也遇到了和提问的老外一样的问题。。能给像遇到这样烦恼的程序员一点建议嘛？谢谢！\n我相信，这可能是很多朋友的问题，我以前也有这样的感觉，编程编到一定的时候，发现能力到了瓶颈，既不深，也不扎实，半吊子。比如：你长期地使用Java和.NET ，这些有虚拟机的语言对于开发便利是便利，但是对于程序员来说可能并不太好，原因有两个：\n\n虚拟机屏蔽了操作系统的系统调用，以及很多底层机制。\n大量的封装好的类库也屏蔽了很多实现细节。\n\n一段时间后，你会发现你知其然，不知所以然。。我以前在CSDN上写过一篇《Java NIO类库Selector机制解析（上，下，续）》，在那篇文章中我说提到过（有讥讽的语气）Java的程序员不懂底层实现，所以很难把技术学得更扎实。此时，一部分程序员会不自然地想学学底层的技术，很自然的，C语言就被提了上来。\n下面是我给这位朋友的一些建议：\n …\n 阅读全文 Read More\n\n (152 人打了分，平均分： 4.70 )Loading...\n"
  },
  {
    "content": "",
    "title": "纯文本配置还是注册表",
    "url": "https://coolshell.cn/articles/4077.html",
    "date": "2011-03-28T08:42:10+08:00",
    "description": "\n我们知道Unix/Linux下的程序配置文件从来都是纯文本的，你可以自由地修改和查看，他们也没有什么什么XML之类的玩意（参看XML的这两篇文章：一，二），这个最重要的Unix文化（参看Unix传奇下篇）40多年来就这么沿续下来了。我很佩服Microsoft的创新能力，一会儿用INI，一会儿用注册表，一会又是用XML，这就是Windows的编程中那“强大”的创新。在网上又看到有人在争论为什么用注册表而不是纯文本，所以，写下这篇文章。\n引入注册表所谓的原因\n首先，让我们来看一下为什么微软觉得要使用注册表而不是ini文件，下面是一些其列出来的ini方面的毛病：\n\nini文件不支持Unicode\nini文件的安全权限不够\nini文件在多进程下存取会有问题\n如果一个进程锁上了这个文件，另一个进程就无法获得，只能出错。\nini文件只能包含字符串，无法使用二进制\n解析ini文件相对来说性能比较慢，第一次读写都需要把整个文件读入内存，然后再写回去。\nini文件最大只有32K\nini文件的默认目录在Windows系统目录下，只能这个目录只能Windows管理员才能访问\nini只能包含了两层，对于多层不支持。\n把ini文件放在中央服务器上管理很困难。\n\n而微软说，注册表可以完美地解决这些问题。居然微软只说到了ini文件，但我觉得不单单是ini，所有的以纯文本方式保存配置文件的方法都会出现上述这样的问题。\n我的观点\n那么，当你在看到这些言论时，你是怎么想的？你有没有经过自己的独立思考？还是你觉得注册表完美地解决了所有的一切？下面是我的一些观点：\n …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 3.68 )Loading...\n"
  },
  {
    "content": "",
    "title": "Fix Bug的五个阶段",
    "url": "https://coolshell.cn/articles/4045.html",
    "date": "2011-03-24T08:34:43+08:00",
    "description": "\n下面的文章和《各种流行的编程方式》有异曲同工，请你不要理解错了。本文来源，翻译如下：\n——————————————————\n一个非常严重和困难的bug，能够成就一个饱经沧桑深受压力的有经验的专业程序员的职业生涯。经受这种考验的创伤程度，相当你受到了一次严重的身体伤害，离婚，或是家庭成为的离世。\n研究人员在研究了计算机编程心理学后，得出了一个程序员们在解决一个困难的bug时的心路里程。这些不同的境界，很像为大众所知的Kübler-Ross Stages of Grief（这个模型描述了人对待哀伤与灾难过程中的5个独立阶段（否认，愤怒，耍赖，抑郁，接受）。绝症患者被认为会经历这些阶段），而且原因都很相似。就好像死亡所伴随的悲伤一样，fix一个bug是一个过程其初始化了一个事件，一开始是拒绝相信，其造就了你苦闷的情绪并开始逐步影响你的心智。这种苦闷的情结果会让你纠结要努力忍受，最终会你会找到一个满意的结果。\n了解下面这几个bug-fixing的阶段，会让我们更好的生存下来，并持之以恒，最终带来……关闭我们所有的bug的结果。\n第一阶段：抵触\n本阶段的状态: 多疑 Skeptical. 生气 Offended. 易怒 Petulant.\n1. 不理睬\n也许这个bug会安静地离开。\n2. 标记上“不是bug”\n也许这是用户的错，或是本地配置有问题。是的，我确信就是那样，一会就会好的。\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 3.94 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员那些悲催的事儿",
    "url": "https://coolshell.cn/articles/3980.html",
    "date": "2011-03-22T08:55:30+08:00",
    "description": "\n在StakeOverflow上有这样一个贴子叫“Confessions of your worst WTF moment”（WTF就是What the fuck的缩写），挺有意思的，我摘几个小故事过来，希望大家在笑过之后能从中学到什么——所有的经验都是从错误中来的（我在其中加了一些点评）\n我们公司的软件是给警察局用的，那是一个对用来处理被逮捕的人的系统，此系统还需要收集脸部特征和指纹信息，并且，这个系统和会向FBI的系统提交这些信息。当我们在测试这个系统的时候，我们一般都是用我们自己的指纹，当然，数据库联着的是我们的测试数据库。不过，有一次，在我们测试完后，我们忘了把系统切换回生产库，于是我们的测试数据库就联上了生产环境，于是我们的指纹信息和照片就散布到了其它系统中……清除我们警察局这边的还好办，但是，你需要波士顿警察局警司去法院签字才能从FBI的数据库中清除我们的信息。\n点评：测试环境和生产环境的数据不要混在一起。\n有一次，我需要向新系统中导入一堆数据，因为数据量太大，需要5个小时，只能在夜里来干，在系统需要正式使用前2个小时，数据导完了，此时是凌晨4点。随后，我需要删除一些数据，于是我在SQL命令地上输入了“DELETE from important_table; where id=4”。是的，我没有看到哪里还有个分号，天啊。\n点评：这就是加班工作的恶果。另，在delete之前最好先做一次select。\n我把我的管理员口令提交到了一个开源软件的源码里。\n点评：1）版本管理器里的东西是删不掉的。2）一些用户和口令要hard code在代码里，所以，不要混用代码使用的权限和管理员的权限，小心管理程序的运行权限，为其注册专门的用户。\n …\n 阅读全文 Read More\n\n (53 人打了分，平均分： 4.62 )Loading...\n"
  },
  {
    "content": "",
    "title": "“火柴棍式”程序员面试题",
    "url": "https://coolshell.cn/articles/3961.html",
    "date": "2011-03-21T08:28:31+08:00",
    "description": "\n有时候，有些面试题是很是无厘头，这不，又有一个，还记得小时候玩的的“火柴棍游戏”吗，就是移动一根火柴棍改变一个图或字的游戏。程序面试居然也可以这么玩，看看下面这个火柴棍式的程序面试题吧。\n下面是一个C程序，其想要输出20个减号，不过，粗心的程序员把代码写错了，你需要把下面的代码修改正确，不过，你只能增加或是修改其中的一个字符，请你给出三种答案。\nint n = 20;\n\nfor(int i = 0; i < n; i--){\n    printf(\"-\");\n}\n不要以为这题不是很难，我相信你并不那么容易能找到3种方法。我觉得，如果你能在10分钟内找出这三种方法，说明你真的很聪明，而且反应很快。当然，15分钟内也不赖。不过，你要是30分钟内找不到三种方法，当然，不说明你笨了，最多就是你的反应还不够快。嘿嘿。就当是玩玩吧。\n下面是我的答案：\n\n//第一种解法：在for循环中给n加一个负号\nfor(int i = 0; i < -n; i--)\n\n//第二种解法：把 n 初始化成 -20\nint n = -20;\n\n//第三种解法：把for循环中的 i 初始化成40\nfor(int i = 40; i < n; i--)\n\n不过，我要告诉你，以上这些答案都不对（我就知道你会偷看答案的），不过，顺着这些思路走很接近了。呵呵。\n下面是正确答案——\n …\n 阅读全文 Read More\n\n (51 人打了分，平均分： 4.57 )Loading...\n"
  },
  {
    "content": "",
    "title": "可视化的排序过程",
    "url": "https://coolshell.cn/articles/3933.html",
    "date": "2011-03-18T08:42:56+08:00",
    "description": "\n下面是一个日本程序员制做的一个可视化的排序过程，包括了各种经典的排序算法，你可以调整速度和需要排序的个数。酷壳以前也介绍过几篇相关的文章 一个排序算法比较的网站，一个显示排序过程的Python脚本 关于各种排序算法的运行复杂度比较，请参看Wikipedia的排序算法比较。\n\n\n (67 人打了分，平均分： 4.76 )Loading...\n"
  },
  {
    "content": "",
    "title": "计算机专业学生的大学生活",
    "url": "https://coolshell.cn/articles/3928.html",
    "date": "2011-03-17T17:55:38+08:00",
    "description": "\n下面看到某国外的同学描述的自己的大学生活，呵呵。做一下解释，\n\n正常的生活是，10点到17点上课，17点到22点是放松和work（chill相当于relax），22点到凌晨1点是社交活动，然后睡8小时。\n计算机专业的学生的生活是，只要你脑子还在转就work，脑子不转了，就睡2小时。（原来，国外的计算机大学的同学们在大学时就已在疯狂工作了，课都不上）（work是在校的学术作业项目（谢谢网友rho指正））\n\n计算机专业学生的大学生活\n不过，看了一下上面的代码，我发现了两个问题：\n\nsleep(2)，在posix下是秒，在windows下是毫秒。\n(hour >= 22  &&  hour < 1) 这个表达式永假。正确的是(hour >= 22 || hour < 1)\n\n当然，我们并不能下结论——该同学的在学校里并没有学好编程。因为，你不知道Sleep 和 && 有没有被重载了。（你要把&&在某些情况下重载成||的行为也不是不可能 。注：在c++中，你无法重载内建类型的操作符）\n——————\n最后说明一下，最近事太多（一个项目要上线，另一个项目需求分析和设计、招聘、酷壳服务器迁移、带孩子、申请签证、给人做培训），所以没有更新，大家见谅。\n (13 人打了分，平均分： 3.54 )Loading...\n"
  },
  {
    "content": "",
    "title": "中国仍是IE6的重灾区",
    "url": "https://coolshell.cn/articles/3921.html",
    "date": "2011-03-10T08:41:05+08:00",
    "description": "\n“IE6于10年前诞生，现在应该是我们同IE6告别的时候了。”微软公司日前推出IE6倒计时网站（the Internet Explorer 6 Countdown，网址为www.ie6countdown.com），旨在尽早淘汰IE6，让用户升级到新版IE浏览器。\n值得注意一点的是，在这张百分比图上所显示的目前仍在使用IE6浏览器上网的百分比第一的是中国——34.5%，这个符合我国国情——什么都要争第一。我国人口世界第一占全世界1/4，网民也是世界第一，还在使用IE6的网民占全世界的1/3，可以我国网民的严重落后。根据CNNIC今年的报告，我国现有4.5亿网民，34%也就是1.5亿用户，也就是说你身边每三个人中就有一个在用IE6。而中国的IE6网民占全世界使用IE6网民的一半。\n另外，我发现亚洲是重灾区啊，包括中日韩台印都很猛啊，看来微软在亚洲的营销的确不错。\n\n我查看了一下Coolshell.cn的2011年到今天为止访问统计，排名第一是的Chrome(41.5%)，第二位的是Firefox(23.22%)，第三位的是IE8(10.7%)，第四位的是IE6(4.8%)。IE6的IP数有6400+。\n看来，在我国程序员这个人群中，越来越多的人使用Chrome+Firefox，挺喜人的，但是IE6还有4.8%，还不如土耳其，马来西亚，印尼等国家。\n (12 人打了分，平均分： 3.58 )Loading...\n"
  },
  {
    "content": "",
    "title": "Google图片搜索下的的C String",
    "url": "https://coolshell.cn/articles/3806.html",
    "date": "2011-03-04T12:40:40+08:00",
    "description": "\n周五了，来轻松一下。如果你在Google的图片搜索里搜索“C String”，你会看到很多相当Sexy的图片，C String真是很性感，丁字裤（T String）已经算不了什么了，看了一下图片，才发现原来还有男士了，太猛了。\n\n如果C String是这个样子，那么，其尾部应该有null终止符，而且最危险的是缓冲区溢出（Buffer Overflow）。哈哈。\n (22 人打了分，平均分： 4.18 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些有意思的贴子和工具",
    "url": "https://coolshell.cn/articles/3903.html",
    "date": "2011-03-04T08:25:39+08:00",
    "description": "\n又到了介绍各种杂项的时候了，正如以前的这三篇（这篇，这篇，和这篇）文章一样，本篇文章也给你介绍一些最近出现的一些有趣的东西。希望你能喜欢。\n先说找工作吧，电影《该页无法显示》里的那个facebook主页上的招聘网页上是列了一堆问题，你可以去看看，你可以使用c/c++，Erlang，Haskell，Java，Perl，Python，PHP，Ruby来解题，不过只接受Unix/Linux下的版本， 不接受Windows的版本。无独有偶，DropBox的招聘网页上也是些算法题，大家可以过去看看，不过需要翻墙。（现在，对于美国互联网企业来说，如果你没有被C2C，说明你根本不存在，如果你没有被墙，说明你还不算成功）\n接下来给大家介绍一些文档和教程吧，都是英文的。\n\nJava和C#的完整比较。这是一个相当完整的比较Java和C#语言的网页。很有意思，有助于你了解Java和C#的各种特性和不同。\n\n\nSQL 性能调优。这个文档覆盖了IBM DB2, MySQL, Oracle,PostgreSQL 和 Microsoft SQL Server。不过这个电子书还没有写完，你可以使用其RSS, twitter 或 Facebook 来跟踪其进度。\n\n\nClever Algorithms。这个电子书也是免费的。其主要面向一些AI和面向自然的算法，一共45个。其包括概率随机算法，迭代进化算法，物理算法，可能性算法，蚂蚁蜜蜂式算法，免疫算法，神经算法等。里面大量的高等数学公式对我来说我已经看不懂了。不过，我相信这个电子书非常适合搞理论研究的人，或是需要抄袭一篇论文以顺利毕业的人使用。\n\n\nHTML5 Audio & Video 处理。这是一组在线的幻灯片，请使用键盘光标键翻页。这是一组带着各种演示的幻灯片，对于你要学习HTML5的声音和视频相关的知识很有帮助。\n\n\nC 语言的宏。你想知道C语的宏有哪些有些意思的用法吗？这篇文档不会让你失望的。其由浅入深地向你介绍了宏的各种用法。\n\n\n各种语言的排序算法。你想知道各种语言其默认的排序算法用的是哪种排序算法吗？看看这篇文章吧。\n\n\n物理模拟F#教程。相信你一定玩过那种游戏，画一个任意形状的石头，其会从天上落下以砸下面的一个东西，这个教程用.NET的F#向大家说明了这种东西怎么去做。（演示程序）\n\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 4.16 )Loading...\n"
  },
  {
    "content": "",
    "title": "另类UX让你输入强口令",
    "url": "https://coolshell.cn/articles/3877.html",
    "date": "2011-03-03T09:26:41+08:00",
    "description": "\n \n  \t$(document).ready(function() { \t     $(\"input:password\").nakedPassword({path: \"http://www.nakedpassword.com/np_images/\"}); \t\t});\n昨天和大家说了一下关于口令破解的一些东西，那篇文章告诉我们需要设置一个比较强的不易破解的口令。\n今天在网上看到一个强大的jQuery插件，叫NakedPassword，其通过“强大的用户体验”让你输入一个比较强且不易被破解的口令。虽然有点另类，但是我个人相当欣赏这个UX，因为UX实在是太到位了——只有你输入的口令比较强，图片中的女人才会脱光衣服。\n下面是演示：\n请输入你的口令（输入时出现效果）\n\n\n这个例子和以前的那个例子一样，告诉你UX设计是重要性。\n（全文完）\n (35 人打了分，平均分： 3.97 )Loading...\n"
  },
  {
    "content": "",
    "title": "微软用新浪来当反面教材",
    "url": "https://coolshell.cn/articles/3872.html",
    "date": "2011-03-03T08:30:49+08:00",
    "description": "\n微软的IE的Blog发布了这样一篇文章，以此来展示IE9是如何过滤广告和ActiveX控件的功能。其使用了“新浪”来做为反面案例，新浪并不是第一次成为反面案例了，之前就有人用新浪等网站来表明中国的网站的设计是怎么个烂法。呵呵。伟大的新浪。\n下面是新浪的在IE9下没有开启过滤的样子，我们要吧看到满天飞的flash，广告，还有视频……\n\n\n\n新浪网站没有使用IE9的过滤功能\n\n\n下面是开启了过滤功能后的新浪网页（个人感觉还是那么乱，没办法底子太差了）\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.77 )Loading...\n"
  },
  {
    "content": "",
    "title": "中国的C2C模式",
    "url": "https://coolshell.cn/articles/3820.html",
    "date": "2011-03-02T08:58:17+08:00",
    "description": "\nC2C不是电了商务里的C2C，而是Copy to China的缩写，以前，我们以Made in China著称，现在我们会以C2C著称。toxicat制作了下面这个图片(源图)，大家慢慢欣赏，我相信，如果要把所有的C2C都列上去的话，那么，可能会上很长的一个图片。还记得那篇为什么中国的网页设计那么烂？吗？呵呵。何止是互联网，其它东西不也是C2C吗？\n\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 4.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "破解你的口令",
    "url": "https://coolshell.cn/articles/3801.html",
    "date": "2011-03-02T08:35:48+08:00",
    "description": "\n在网上看到一张口令破解的表格，如下所示（第一列是口令长度，第二列是全小写的口令，第三列是有大写字母的口令，第四列是又加上了数字和其它字符的口令）\n\n如果你想知道自己的口令花多少时间可以被破确，你可以访问下面这个网站：（更新2011/3/2晚10点15）\nhttp://howsecureismypassword.net/\n这里先说一个这里说的口令破解。一般来说用户的口令都是以MD5编码加密放在数据库里的，MD5是不可逆的，所以，当你拿到你一串被MD5后的字串，你可以使用暴力破解——穷举所有的可能口令的MD5字串，然后和数据库里的对比，比对了你就知道口令了。当然，你一定要清楚，在某些审查很严重的地方，互联网内容提供商不一定会把你的口令以MD5加密，甚至就是明文（Plain Text）保存，所以你还需要小心，关于如何设计你的口令，请参看这篇文章。\n从上面这表格我们可以看到，你的口令最好是在8个长度以上，而且一定要有在小写和数字，最好再加上其它字符，这样你的口令被破解的时候最需要463年，这样就比较安全了。当然，如果你的口令使用了一些常用的单词，那就另说了，现在破解口令一般都不会使用暴力破解，都是用一个尝用口令字典表来尝试——比如这篇文章所说的字典表。\n但我提醒一下，这张表里中的时间忽略了一个问题，那就是并行，可以使用多台电脑多个进程并行破解口令，这样一来，上表中的时间就可大打折扣了。你只需要愿意花2000美刀，你就能够找到一个地方，1秒种计算7亿个口令，因为MD5，SHA这类的算法性能太好了。所以，你可能需要使用新的算法来加密你的口令，这种算法最好加上时间，也就是在算法的计算时间加长。呵呵，慢也有慢的好处。可能你需要考虑一下bcrypt算法，你可以查看本站的这篇文章。\n (13 人打了分，平均分： 3.23 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何调试makefile变量",
    "url": "https://coolshell.cn/articles/3790.html",
    "date": "2011-03-01T08:34:38+08:00",
    "description": "\n六、七年前写过一篇《跟我一起写Makefile》，直到今天，还有一些朋友问我一些Makefile的问题，老实说，我有一段时间没有用Makefile了，生疏了。回顾，这几年来大家问题我的问题，其实很多时候是makefile的调试问题。所以，就像我在之前的那篇关于GDB的技巧的文章中做的一样，在这里向大家介绍一个小小的调试变量的技巧。相信一定对你有用。\n对于Makefile中的各种变量，可能是我们比较头痛的事了。我们要查看他们并不是很方便，需要修改makefile加入echo命令。这有时候很不方便。其实我们可以制作下面一个专门用来输出变量的makefile（假设名字叫：vars.mk）\n\n%:\n        @echo '$*=$($*)'\n\nd-%:\n        @echo '$*=$($*)'\n        @echo '  origin = $(origin $*)'\n        @echo '   value = $(value  $*)'\n        @echo '  flavor = $(flavor $*)'\n\n这样一来，我们可以使用make命令的-f参数来查看makefile中的相关变量（包括make的内建变量，比如：COMPILE.c或MAKE_VERSION之类的）。注意：第二个以“d-”为前缀的目标可以用来打印关于这个变量更为详细的东西（后面有详细说明）\n…\n 阅读全文 Read More\n\n (20 人打了分，平均分： 3.90 )Loading...\n"
  },
  {
    "content": "",
    "title": "打印质数的各种算法",
    "url": "https://coolshell.cn/articles/3738.html",
    "date": "2011-02-28T09:14:10+08:00",
    "description": "\n打印质数的算法应该是学习计算机编程的一个经典的问题，在这里想给大家展示一些方法，相信这些方法会对你的编程有一定的启发作用。请你注意几点，\n\n实际应用和教学应用有很大的差别。\n最后的那个使用编译时而不是运行时的方法大家可以重点看看。\n\n教科书的示例\n首先，先给一个教科书的示例。下面这个示例应该是教科书（至少是我上大学时的教科学）中算法复杂度最好的例子了。其想法很简单，先写一个判断是否是质数的函数isPrime()，然后从1到n分别调用isPrime()函数来检查。检查是否是质数的算法是核心，其简单的使用从2到n的开根的数作为除数。这样的算法复杂度几乎是O(n*log(n))，看上去不错，但其实很不经济。\n\n#include <iostream>\nusing namespace std;\n\nbool isPrime(int nr)\n{\n    for (int d = 2; (d * d) < (nr + 1); ++d){\n        if (!(nr % d)){\n            return false;\n        }\n     }\n    return true;\n}\n\nint main (int argc, char * const argv[])\n{\n    for (int i = 0; i < 50; ++i){\n        if (isPrime(i)){\n            cout << i << endl;\n        }\n    }\n}\n\n …\n 阅读全文 Read More\n\n (14 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "（麻省理工免费课程）计算机科学和编程导论",
    "url": "https://coolshell.cn/articles/3723.html",
    "date": "2011-02-28T08:25:07+08:00",
    "description": "\n以前本站推荐过麻省理工的C/C++的课程，今天在他们的网站看到上有一组关于计算机科学和编程导论的免费公开课（视频是Youtube的），我看了几个课程，我觉得讲得很系统啊，而且有一点一通百通的感觉。虽然是理论课，但是可以感到我国的教育还是有很大差距的。这个组课程推荐给大家（需要翻墙），视频都有字幕，计算机科学系毕业的同学应该会很容易听懂。强烈推荐。（网友Aslan指出已经有人搬运到优酷上了，链接在这里，遗憾的是没有字幕，另外，不知道为什么会说是Python学习）\n\n\n\n \n\n\n1: Introduction and Goals; Data Types, Operators, and Variables\nYoutube（英文字幕）\n优酷（无字幕）\n\n\n\n\n\n\n \n\n\n2: Branching, Conditionals, and Iteration\nYoutube（英文字幕）\n优酷（无字幕）\n\n\n\n\n\n\n \n\n\n3: Common Code Patterns: Iterative Programs\nYoutube（英文字幕）\n优酷（无字幕）\n\n\n\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "敏捷水管工",
    "url": "https://coolshell.cn/articles/3778.html",
    "date": "2011-02-25T08:39:44+08:00",
    "description": "\n本文来自Terazen Technology Inc的创始人+CTO的 David Ing的《Agile Plumbers》（这也墙？），我的其文中的这个帮事翻译过来（和前些天发的SOAP的S是Simple异曲同工）。\n也许你会觉得这个比喻不恰当。但我想告诉你的是，这个故事告诉我们，教条主义和以方法论为中心的危险。十条不错的编程观点中第一条—— The only “best practice” you should be using all the time is “Use Your Brain”.\n————————————————————\n(门铃响……)\n事主：啊, Agile 水管工吗？ 请进，感谢谢你们这么快就来了——这的确很紧急，我这真是很乱。\n水管工1: 先生，没问题，我们就是敏捷的。在我给你做Presentation前，我先给你介绍一下我的两个同事。\n事主：Presentation？啊，我们有时间吗？这的水已经流得到处都是了……\n水管工1：……先生，我们必需坚持这个。我们只是想保证你能成为动态搜寻解决方法的一份子。你是我们的 champion sponsor，也就是我们团队内的 consultant！你可以提供一个白板给我们使用吗？\n事主：我没听懂，你们不觉得这变复杂了吗？我觉得我应该告诉你们这水是从房子哪儿流出来的，就是那……\n水管工2：你这有让我脱衣服的地儿吗？\n事主：什么？\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 3.53 )Loading...\n"
  },
  {
    "content": "",
    "title": "再谈敏捷和ThoughtWorks中国咨询师",
    "url": "https://coolshell.cn/articles/3745.html",
    "date": "2011-02-24T18:23:26+08:00",
    "description": "\n前言说明\n之所以用了“再”，是因为之前的两篇文章——\n\n我在《那些炒作过度的技术和概念》中批评了ThoughtWorks中国咨询师的咨询方法是以一种接近于教条、炒作、洗脑和电视购物的方法（虽然我心底觉得有时候有时候更像传销），当然，批评是没有意义的，所以我也给了中国ThoughtWorks那些年轻的咨询师们一些我认为有建设性的建议。\n\n\n我在《TDD并不是看上去的那么美》一文中列举了一些在实际中使用TDD可能会出现的问题和难题，以此来告诉大家在使用TDD时需要注意的东西。就像是在《结对编程的利与弊》说的一样，只有真正知道一件事情的利弊，你才能用好它。\n\n当然，这两篇文章都不可避免得招来了ThoughtWorks咨询师和Agile信仰者们的很多回复，我也有开始沉不住气回复了很多，当然，有一半以上的不是学术上的讨论，而是对我个人的攻击。甚至，在这两篇文章发布后，酷壳（CoolShell.cn）受到持续性的黑客攻击。\n本来已经过去的事，今天却又发现这两篇文章的访问量和评论又上来了，才发现原来是InfoQ的这篇文章——《虚拟座谈会：TDD有多美？》，加上很多我在评论中的观点，以及ThoughtWorks和InfoQ之前给我的来信中谈到的一些观点。我很不自然地想把我的一些观点总结并罗列在这里。主要分成四块—— 1）我对整个事情的基本观点，2）对于方法论的观点，3）对于TW中国咨询师的观点，4）还有和TW和InfoQ住来信件中的观点。\n————————————————\n基本观点\n首先，我想说明一下我的基本观点。\n …\n 阅读全文 Read More\n\n (51 人打了分，平均分： 4.47 )Loading...\n"
  },
  {
    "content": "",
    "title": "[转]TDD到底美还是不美？",
    "url": "https://coolshell.cn/articles/3766.html",
    "date": "2011-02-24T15:41:24+08:00",
    "description": "\n\n \n下面的文章转自Todd Wei 的《TDD到底美还是不美？》，对于这篇文章，我个人能过透过作者的观点感受到他的项目中使用TDD的难点，同样可以感受到作者内心的纠结。不管怎么样，我能够感到作者Todd Wei在独立思考，独立思考总是好的，因为那是走向成熟的必要条件。(另，大家可以移步过去看看相关的评论，挺有意思的)\n————————————————————————————————————\n最近CoolShell上的一篇《TDD并不是看上去的那么美》引起了敏捷社区的高度关注和激励辩论。今天，InfoQ甚至专门举行了一个“虚拟座谈会”《TDD有多美？》，几位国内敏捷社区的名人专门就此问题展开了深入地讨论。不论结果如何，这个纯技术的探讨精神还是非常值得赞赏的。事件实际上可以简单地归纳为“一个有一定影响力的开发人员质疑TDD，一群敏捷社区名人对TDD进行解释和辩护”。现在，就让我坚定地站在CoolShell一边，为对TDD的质疑和批判添砖加瓦吧！\n\nTDD的核心理念是什么呢？第一是Specification by Example，即把测试用例作为表达需求的一种方式。传统的需求表达方式包括文档，Use Case等，而TDD强调通过测试用例来表达需求。另外，TDD的测试用例是黑盒的基于外部接口的，所以，它实际上又是对外部接口的设计。如何看待测试用例是TDD与传统测试的一个重要区别。“不把测试用例单纯地视为测试，而从需求和设计的角度来看测试用例”的理念本身是好的。另外，TDD的第二个理念是Test First，强调测试对于实现的驱动作用，先写测试用例，再实现和重构。在Specification by Example的理念下，Test First的实质是“先理解清楚需求，并做好外部接口设计，把它转化为测试用例，然后再来实现和重构”。 \n我认为，Specification by Example是不错的，因为测试用例作具有精确性，容易自动化的优点，这是传统的文档和Use Case在表达需求时所欠缺的地方。但Test First理念本身则有很大的问题，尤其“在没有测试用例失败之前，不要写任何一行代码”的极端方式则更是极端的错误。\n…\n 阅读全文 Read More\n\n (16 人打了分，平均分： 3.44 )Loading...\n"
  },
  {
    "content": "",
    "title": "Stack Exchange 的架构",
    "url": "https://coolshell.cn/articles/3721.html",
    "date": "2011-02-23T13:31:04+08:00",
    "description": "\n近日，Stack Exchange系统管理员blog上发布了一篇关于Stack Exchange的架构一瞥，其包括了Stack Overflow, Server Fault 和 Super User的 Stack Exchange 网络。注意最后一个关于人员的配置。希望能给大家一些相关的参考。\n网络流量\n\n每月9千5百万个PV\n每秒800 HTTP 请求\n每秒180 DNS 请求\n每秒55Mb 的带宽\n\n数据中心\n\n1 机柜 位于俄勒冈的 Peak Internet (用于chat 和Data Explorer)\n2 机框 位于 纽约的 Peer 1 ( 用于其它的 Stack Exchange Network)\n\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "WordPress是怎么赢的？",
    "url": "https://coolshell.cn/articles/3716.html",
    "date": "2011-02-23T08:25:32+08:00",
    "description": "\n一个以前在Six Apart工作4年的产品经理Byrne Reese发布了一篇文章阐述为什么WordPress成为了赢家。其在文章中比较了WordPress和其主要竞争对手产品Movable Type。我觉得其中有可取之处，本想全文翻译的，后来觉得文章太长，翻译太花时间，所以，我把文章中的观点总结如下。\n作者例举了如下为什么WordPress会赢的理由：\n一、Movable Type许可证，而WordPress是开源的\n2004年，Movable Type修改了其许可证，这一举动激怒了所有Movable Type的用户，于是大家纷纷转投Wordpress，这是WordPress最终成为赢家最大的原因。就算是Movable Type有着优越的设计，优越的功能，还有优越的技术支持，但是面对的是一个完全免费的产品也没有办法。因为WordPress是开源的，开源就意味着完全免费，而Movable Type一开始也是免费的，但是其许可证策略有着很不确定的因素。（注：2007年Movable Type发布了开源版本）\n二、WordPress很容易安装\nWordPress的安装过程很简单，只需要不到5分钟，比起Movable Type来说，这太受用户和推广商欢迎，你几乎不需要去碰后台的那些Web设置。（注：不仅如此，WordPress的升级和安装插件和风格的用户体验也是非常的不错）这就是为什么大家都喜欢WordPress的原因，就算是其功能比Movable Type少了又少。\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 2.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "你会问问题吗？",
    "url": "https://coolshell.cn/articles/3713.html",
    "date": "2011-02-22T08:40:49+08:00",
    "description": "\n在工作和生活中，总是会有很多人问题我很多技术方面的问题。有一些时候，问问题的和答问题的总是会有一些不爽的事情发生。如下面的几种情况：\n\n比如：“我的电脑老是蓝屏，怎么办？”，通常这样的问题90%以上的回答是：“重装吧”。这让问问题的人感到很沮丧，但你不能不承认那不是答案。而且有时候让人无法解答，比如：“我的makefiel出错了，你帮我看看我的makfile”，我通常会非反问，报了什么错吗？\n另一种情况是，回答问题的人首先先对问问题的人的抱怨，你问的问题就不对，或是，你问的这个问题是什么意思，而导致问问题的人却在不停地解释，结果花了好长时间来讨论问题本身是什么。\n还有一种情况是，问的问题太简单了甚至太白痴了，比如你自己试一试或是读读文档就知道了的问题，或是问这个问题直接表明了你的无知或是懒惰。这种问题会相当影响别人对你的印象。\n第四种情况是，提问者滔滔不绝，扯这扯那，讲了一大堆，听得听累了。最后都不知道你要干什么。\n\n所以，怎么去问问题，怎么问一个好的问题，是一个很重要的事。你提问的技术直接关系到了你是否能够很快得到你满意的答案。\n这里有一篇文章推荐给大家《How To Ask Questions The Smart Way》，中文版在这里《提问的智慧》，我把其中的几个亮点总结如下：\n …\n 阅读全文 Read More\n\n (20 人打了分，平均分： 4.15 )Loading...\n"
  },
  {
    "content": "",
    "title": "提高编程技能最有效的方法",
    "url": "https://coolshell.cn/articles/3698.html",
    "date": "2011-02-21T08:31:03+08:00",
    "description": "\nStackExchange.com上有两个贴子（贴子一，贴子二），贴子名叫“What is the single most effective thing you did to improve your programming skills?” – 对你的编程技术提高最有效的一件事是什么？回复的人中给了很多很不错的建议，我把他们总结了一下，十条，相信一定会对你有用。（注意：顺序是我自己按我的个人经验排的）\n\n和比自己聪明的能力比自己强的人工作。学习他们的代码，他们的做事方法，看一看那些人是怎么处理错误的。\n\n\n总是倾听别人怎么说，无论那个的资历和职位是什么样的。\n\n\n实践，实践，实践，总是不满意于一开始出来的事。\n\n\n多问问自己，现在在写什么代码？为什么要这样写成这样？还有没有更好的方法？\n\n\n学习多样的技术，多多比较他们，并一定要了解各种技术的优缺点。\n\n\n总是问别人问好的问题。\n\n\n多回头看看走过的路，做过的事，写过的程序，感觉一下他们有多烂。\n\n\n多读读那些大师写的书。\n\n\n不要总坐在电脑前编程序，多做做运动，多到户外走走，和非技术人多接触，向他们学习。\n\n\n把你的想法说出去，看看别人怎么回应的。从别人的回应中学习。\n\n除了这些，下面是我个人想给你的建议——\n …\n 阅读全文 Read More\n\n (23 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "预发布环境,Tag发布机制和可重复的部署过程",
    "url": "https://coolshell.cn/articles/3709.html",
    "date": "2011-02-20T15:28:59+08:00",
    "description": "\n下面文章由网友吕毅投递，源文是：http://blog.lvscar.info/?p=427\n—————————————————————————————————————————————\n周末聚会，无意间聊起建筑行业。自己是搞软件开发的，我们的行业从建筑设计/施工过程中借鉴了大量的概念，隐喻，名词。可以说软件就是现实中伴随整个人类历史发展的“建筑”在虚拟空间中的投影。有个两年前问过其他朋友的问题，这次友人又再次提起，“为什么建筑设计过程中没有普遍性的采用版本控制呢？” 瞎扯了一干各种原因后，我们几乎同时想到一个名字”Joel”，建筑设计行业或许缺乏像Joel Spolsky一样十数年如一日，把自己丰富的经验和深入的思考转化成一篇篇文章以向新人传授软件开发过程中那些容易被忽略的概念。高傲的黑客们会对CMMI之类的认证抱以鄙夷之情，但对Joel整理出的12条写出更好软件的”最佳实践”，大家甚至把此称为审视其他团队开发过程的“Joel TEST”以推崇\n这12条测试如下:\n1. 是否启用版本控制？\n2. 是否可以一步构建?\n3. 是否进行每日构建？\n4. 是否有bug跟踪列表？\n5. 是否在修改bug后，才开始写新代码？\n6. 是否及时更新工作计划？\n7. 是否在开发前编写了大家一致认可的功能文档？\n8. 是否有安静的工作环境？\n9. 是否在使用最好的软件开发工具？\n10.是否有专职测试人员？\n11.是否在面试时以实际编写代码来检查求职者？\n12.是否利用陌生人进行可用性测试？\n你所在的团队符合其中的几条呢？ 觉得这些条目太一般，软件开发原本就该如此？ Joel Test写于十年前，一个Windows XP，Mac OS X,Ubuntu都还没有面世的年代。 如果你觉得这些条目有些过时了，Google中搜索“Joel Test”，你可以看到这十年内很多对此进行更新的尝试, 比如这两个页面“The Joel Test Update for 2010″,“Joel Test for web dev”.\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "欢迎攻击酷壳",
    "url": "https://coolshell.cn/articles/3686.html",
    "date": "2011-02-17T10:03:28+08:00",
    "description": "\n相信大家都发现昨天下午2011年2月16日，下午从2点到6点，酷壳基本打不开。原因是服务器受到了黑客攻击。从互联网上几乎ping不通服务器（丢包率60%以上，ping时延巨大，是平时的10倍以上），我勉强登上服务器查看了系统负载，相当低，于是停止了Apache，发现网络ping马上恢复正常。于是，我启动Apache，再使用iftop查看了一下TCP链接的带宽消耗，发现有那么一两个链接把服务器带宽全部吃完，于是我记录了下IP地址。攻击在下午6点时准停止，就像我们正常下班一样。\n酷壳受到很多攻击，不过，基本上都是一些注入式的攻击，都是想取得一些权限的攻击。这是第一次受到不以取得权限为目的，而只在以影响酷壳正常运转的攻击。\n我不竟想到了几个问题：\n\n为什么要攻击？这只是一个技术blog，这样的攻击目的是什么？\n黑客攻击的背后总是有相关的利益冲突的，不会是没有动机的攻击。\n\n所以，我一直在想，是什么样的利益冲突导到酷壳被攻击的？这个BLOG得罪了谁呢？我这个小小的个人的BLOG触动了谁的利益呢？任何事情总是有因果关系的，我很不自然地想到了最近我发布的几篇文章……\n欢迎攻击酷壳！我很乐意看到某些人生气的样子。\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "Web开发人员速查卡",
    "url": "https://coolshell.cn/articles/3684.html",
    "date": "2011-02-16T18:59:06+08:00",
    "description": "\n无论你是多牛的程序员，你都无法记住所有的东西。而很多时候，查找某些知识又比较费事。所以，网上有很多Cheat Sheets，翻译成小抄也好 ，速查卡也好，总之就是帮你节省 时间的。之前给大家介绍过Web设计的速查卡、25个jQuery的编程小抄，还有程序员小抄大全，今天转一篇开发人员的速查卡，源文在这里。下面的文章我就不翻译了。\nHTML Cheat Sheet\n\n\nHTML/XTML in one page\nHTML5: The Evolution of Web Standards by James Sugrue\n(X)HTML Elements and Attributes\nDoctype Declarations (DTDs)\nXHTML Character Entity Reference\nGoSquared HTML Help Sheet\n\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "为啥搞电脑的会有这么多空闲时间？",
    "url": "https://coolshell.cn/articles/3672.html",
    "date": "2011-02-12T18:03:11+08:00",
    "description": "\n\n解释一下：\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 4.19 )Loading...\n"
  },
  {
    "content": "",
    "title": "TDD并不是看上去的那么美",
    "url": "https://coolshell.cn/articles/3649.html",
    "date": "2011-02-12T08:48:16+08:00",
    "description": "\n春节前的一篇那些炒作过度的技术和概念中对敏捷和中国ThoughtWorks的微辞引发了很多争议，也惊动了中国ThoughtWorks公司给我发来了邮件想来找我当面聊聊。对于Agile的Fans们，意料之中地也对我进行了很多质疑和批评。我也回复了许多评论。不过，我的那些回复都是关于中国ThoughtWorks咨询师以及其咨询的方法的。我对Agile方法论中的具体内容评价的不是很多，所以，我想不妨讨论一下Agile方法论中的具体的实践（以前本站也讨论过结对编程的利与弊）。\n那么，这次就说说TDD吧，这是ThoughtWorks中国和Agile的Fans们最喜欢的东西了。我在原来的那篇文章中，我把TDD从过度炒作的技术剔除了出去，因为我还是觉得TDD有些道理的，不过，回顾我的经验，我也并不是很喜欢TDD。我这篇文章是想告诉大家，TDD并没有看上去的那么美，而且非常难以掌控，并且，这个方法是有悖论之处的。\nTDD简介\nTDD全称Test Driven Development，是一种软件开发的流程，其由敏捷的“极限编程”引入。其开发过程是从功能需求的test case开始，先添加一个test case，然后运行所有的test case看看有没有问题，再实现test case所要测试的功能，然后再运行test case，查看是否有case失败，然后重构代码，再重复以上步骤。其理念主要是确保两件事：\n\n确保所有的需求都能被照顾到。\n在代码不断增加和重构的过程中，可以检查所有的功能是否正确。\n\n我不否认TDD的一些有用的地方，如果我们以Test Case 开始，那么，我们就可以立刻知道我们的代码运行的情况是什么样的，这样可以让我们更早地得到我们实现思路的反馈，于是我们更会有信心去重构，去重新设计，从而可以让我们的代码更为正确。\n不过，我想提醒的是，TDD和Unit Test是两码子事儿。有很多人可能混淆了自动化的Unit Test（如：XUnit系例）和TDD的软件开发过程。另外，可能还会有人向鼓吹“TDD让你进行自顶向下的设计方式”，对此，请参阅本站的《Richard Feynman, 挑战者号, 软件工程》——NASA的挑战者号告诉你自顶向下设计的危险性。\nTDD的困难之处\n下面是几个我认为TDD不容易掌控的地方，甚至就有些不可能（如果有某某TDD的Fans或是ThoughtWorks的咨询师和你鼓吹TDD，你可以问问他们下面这些问题）\n\n测试范围的确定。TDD开发流程，一般是先写Test Case。Test Case有很多种，有Functional的，有Unit的，有Integration的……，最难的是Test Case要写成什么样的程度呢。\n…\n 阅读全文 Read More\n\n\n (34 人打了分，平均分： 4.15 )Loading...\n"
  },
  {
    "content": "",
    "title": "GDB中应该知道的几个调试方法",
    "url": "https://coolshell.cn/articles/3643.html",
    "date": "2011-02-10T09:34:08+08:00",
    "description": "\n七、八年前写过一篇《用GDB调试程序》，于是，从那以后，很多朋友在MSN上以及给我发邮件询问我关于GDB的问题，一直到今天，还有人在问GDB的相关问题。这么多年来，有一些问题是大家反复在问的，一方面，我觉得我以前的文章可能没有说清楚，另一方面，我觉得大家常问的问题正是最有用的，所以，在这里罗列出来。希望大家补充。\n一、多线程调试\n多线程调试可能是问得最多的。其实，重要就是下面几个命令：\n\ninfo thread 查看当前进程的线程。\nthread <ID> 切换调试的线程为指定ID的线程。\nbreak file.c:100 thread all  在file.c文件第100行处为所有经过这里的线程设置断点。\nset scheduler-locking off|on|step，这个是问得最多的。在使用step或者continue命令调试当前被调试线程的时候，其他线程也是同时执行的，怎么只让被调试程序执行呢？通过这个命令就可以实现这个需求。\n\noff 不锁定任何线程，也就是所有线程都执行，这是默认值。\non 只有当前被调试程序会执行。\nstep 在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行。\n\n\n\n二、调试宏\n这个问题超多。在GDB下，我们无法print宏定义，因为宏是预编译的。但是我们还是有办法来调试宏，这个需要GCC的配合。\n在GCC编译程序的时候，加上-ggdb3参数，这样，你就可以调试宏了。\n另外，你可以使用下述的GDB的宏调试命令 来查看相关的宏。\n\ninfo macro – 你可以查看这个宏在哪些文件里被引用了，以及宏定义是什么样的。\nmacro – 你可以查看宏展开的样子。\n\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 4.21 )Loading...\n"
  },
  {
    "content": "",
    "title": "Error handling in Egypt",
    "url": "https://coolshell.cn/articles/3630.html",
    "date": "2011-02-09T08:45:03+08:00",
    "description": "\n以前发布过《C语言的错误处理》一文，不过今天想说的是Egypt的“错误处理”。埃及的事闹得挺大的，国外和中文twitter上更是炸了锅。不要以为程序员就只会写程序——看看程序员举出来的标语吧。呵呵。\nError handling in Egypt\n当然，作为程序员来说，这段代码显然还需要重构：\n…\n 阅读全文 Read More\n\n (12 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "那些炒作过度的技术和概念",
    "url": "https://coolshell.cn/articles/3609.html",
    "date": "2011-01-28T10:00:52+08:00",
    "description": "\nStackExchange.com上有一个贴子在评论着最近20年来被炒作过度的技术，对于出现的结果，大多数赞同，也有一些不赞同。下面我从前15名挑了10个（Java的WORE我去掉了，TDD我也去掉了，因为我觉得他们应该没有炒作过度，而且都不错），按原贴的顺序罗列如下：（后面的一些评论是我加的，欢迎大家讨论）\nTop 10 过度炒作的技术和概念\n\nUnified Modeling Language (UML) – UML是一个程序员交流想法的不错的工具，但是他离程序员真正需要的设计工具还差得很远，比如：设计是否符合需求、架构设计、数据流等等。只有为数不多的程序员使用这个工具交流想法，而没有用在具体工作中。\n\n\nSharepoint – 现在N多的公司都在用微软的这个东西做公司内部的Intranet。不过安装和维护起来，代价相当的大。但是其市场做的很成功，不对技术上来说对技术人员来说，相当的蹩脚。Sharepoint的设计没有认真地分析过业务流程，仅仅是一个文档存储地。看上去我们似乎可以做任何的事，但是如果你要用其来管理你的项目和track你的项目问题，你会发现其是无比的难用。\n\n\neXtensible Mark-up Language (XML) –  XML嘛，以前说过很多了（XML1， XML2）我们用他来做和程序数据封装，用来做配置文件，用来做网络传输格式。我们的程序处理起XML来，又慢，又不经济，没有工具，几乎无法维护XML文件。XML用来做数据封包真是很不经济，Yaml和JSON那个不比它简单？用XML来做程序配置文件不知道是谁想出来的主意，相当的愚蠢，看看Unix/Linux下的配置文件，简单易读，相当容易维护。真是高科技啊。\n\n\nSOAP, XML-RPC, WSDL 的 Web Services – 这个东西前几年炒的很凶。所有人都相信，这是程序员的未来。可惜的，其中的复杂和不一致，相当的令人恶心。SOAP的那个S居然还是Simple！看来，扯上XML的都不会是什么好的东东。不过，个人认为，CORBA比他更恶。\n\n …\n 阅读全文 Read More\n\n (32 人打了分，平均分： 3.88 )Loading...\n"
  },
  {
    "content": "",
    "title": "为什么中国的网页设计那么烂？",
    "url": "https://coolshell.cn/articles/3605.html",
    "date": "2011-01-28T08:47:14+08:00",
    "description": "\nNick Johnson，一个有12年经验的Web设计师在它的blog里写下了“Why is Chinese Web Design So Bad”，新浪，人人，百度，阿里巴巴，腾讯榜上有名。其中的观点相当的好，希望所有的中国人都读一下。我不全文翻译了，只是给大家看一些摘要。（保证不会像《环球时报》一样）\n——————————\n作者2005年的夏天来到中国，他说，他注意到了中国那复杂的文化和西方的有多么的不同。比如，语言，身体特征，政府的执政理念，等等，但是，有一些地方确是差别很少的，比如：幽默的sense，还有对艺术的表现形式的兴趣。很快，因为职业，他发现在中国的网站设计上完全没有引吸到他。于是他开始让身边的中国朋友尽可能多的给他推荐中国的网站，他觉得这个可以对他学习Web Design有帮助。\n当他在评论起新浪，人人，百度，阿里巴巴，腾讯的时候，他说，百度和其它的不同，因为百度悍然地公开抄袭Google的Web Design（blatantly copied their design from Google），而人人则是很明显地抄袭facebook（clearly copied their design from Facebook）。而其它的多数的中国网站看上去有很多很多滑稽可笑的文本，一些网站在滥用图片，一些网站图片又不够。他感到很困扰，这样的网站都能被接受？这么多的东西，网民怎么可能看得过来啊？中国人怎么可能容忍这些。（注：他不知道我们中国人能承受的比这更多）\n …\n 阅读全文 Read More\n\n (43 人打了分，平均分： 4.47 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何“加密”你的email地址",
    "url": "https://coolshell.cn/articles/3595.html",
    "date": "2011-01-27T13:03:06+08:00",
    "description": "\n现在在网上要小心，无论是保护好你的用户名和帐号，还是我们的电子邮件地址。在网上有很多爬虫程序专爬我们的电子邮件地址，一量被爬中了，那么你的邮箱里就是一堆又一堆的垃圾邮件，就好像我的haoel(at)hotmail.com一样，在7、8年前，每天几千封的垃圾邮件。现在hotmail的垃圾邮件过滤得好一些了，不过也有每天40封左右的垃圾邮件。但是我们在自己的网页上又需要发布自己的email地址。所以我们需要搞乱我们的邮件地址，就像那种非常规的搞乱代码一样。不过，我们还需要能认人读的出来。\n一般来说，在网上现在很普遍的做法是——\n\n1）用图片，可以用PHP动态生成那个验证码式的。\n2）把@变成at，把点变成dot，如 haoel(at)hotmail(dot)com之类的。\n3）把a变成@，写成[email protected]@mail.com\n\n不过这些还是能被爬到，用图片的方法不利于用户拷贝粘贴。下面介绍几种方法：\n第一种：使用CSS样式\n反转字序\n\nspan.codedirection { unicode-bidi:bidi-override; direction: rtl; }\n<p><span>[email protected]</span></p>\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "SOAP的S是Simple",
    "url": "https://coolshell.cn/articles/3585.html",
    "date": "2011-01-27T08:47:56+08:00",
    "description": "\n曾经有一个争论，一边是站在SOAP这边的人，另一边则是其它人。 站在SOAP这边人，当他们在争论SOAP和Web Service框架的复杂度时，SOAP这边的人说，在引入那些WS-*东东之前，SOAP的确是简单的，这就是为什么SOAP的第一个字母S就是Simple。\n在2000年的时候，有一个苦恼的程序员，\n程序员: 不好意思，我的老板这周末去打高尔夫了，现在我不得不要搞一个SOAP的应用，但是我根本不知道什么是SOAP。SOAP专家，你能帮我吗？\nSOAP专家: 当然可以。首先，我要告诉你，SOAP 就是 Simple Object Access Protocol.\n程序员: 哦，那么说来，他是简单的罗？\nSOAP专家: 简单的就像星期天一样，我的朋友。\n程序员: OK，快跟我说说。\nSOAP专家: 好，就像他的名字一样，SOAP用为远程对象访问。\n程序员: 像CORBA一样？\nSOAP专家: 正是如此，就是像 CORBA，只是更简单。不需要复杂的传输协议，还要设置防火墙，SOAP用的是HTTP。而且我们用的是XML作为传输数据格式而不是二进制。\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "C语言函数实现的另类方法",
    "url": "https://coolshell.cn/articles/3572.html",
    "date": "2011-01-26T13:38:20+08:00",
    "description": "\n在前面看过那个BT的Javascript程序后，我们来看一个C语言的，相信大家还记得输出从1到1000的数最后的那个示例，本站还有很多这样的示例，如：变态的hello word，如何教新手编程，还有恐怖的C++，在下面这个示例面前，神马都是浮云。\n下面这个示例向你展示了如何写一个swap()函数（把两个值交换），这段代码在我的Linux下的 gcc v4.1.1下可以正确编译通过，连一个Warning都没有，而且可以正确工作。我能说什么？！C语言并不疯狂，疯狂的是程序员。\n#include <stdio.h>\nvoid(*swap)() = (void(*)()) \"\\x8b\\x44\\x24\\x04\\x8b\\x5c\\x24\\x08\\x8b\\x00\\x8b\\x1b\\x31\\xc3\\x31\\xd8\\x31\\xc3\\x8b\\x4c\\x24\\x04\\x89\\x01\\x8b\\x4c\\x24\\x08\\x89\\x19\\xc3\";\n\nint main(){ // works on GCC 3+4\n        int a = 37, b = 13;\n        swap(&a, &b);\n\n        printf(\"%d %d\\n\",a,b);\n}\n其实，这种用字符串来实现函数的方法，在原理上是很好理解的。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "一段Javascript的代码",
    "url": "https://coolshell.cn/articles/3540.html",
    "date": "2011-01-26T08:39:39+08:00",
    "description": "\n我们先看一段Javascript的代码，如下所示：（你能看出来这是干什么的？）\n[javascript]($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+\n($$=($_=!”+$)[_/_]+$_[+$])])()[__[_/_]+__\n[_+~$]+$_[_]+$$](_/_)[/javascript]\n这段代码来自BlackHat DC 2011（(黑帽安全大会，全世界最大两个黑客大会之一，另一个是Defcon）中的一个叫Ryan Barnett黑客做的XSS Street-Fight！的演讲(XSS是Web上比较经典的跨站式攻击，操作起来也有些复杂)，一共69页，基本上都是一些比较枯燥的Javascript，不过这段代码挺有意思的，如果上面这段代码换个样子：\n[javascript]($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+\n($$=($_=!”+$)[_/_]+$_[+$])])()[__[_/_]+__\n[_+~$]+$_[_]+$$](document.cookie)[/javascript]\n你看到了document.cookie，于是你可能会想到这是偷用户帐号免登录cookie的。是的，就是这样。答案是，这代码等价于alert(document.cookie)，而最上面的那个代码等价于alert(1)——当然，还不仅仅只是alert。看到这里，你可能会想起变态的C语言Hello World程序，以及如何加密/混乱C源代码，是的，这回的这个是Javascript版的，混乱Javascript的会比混乱C的更难懂，因为Javascript的变量类型是可以乱用的。\n好，下面让我们来对这个代码做个解析。\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.15 )Loading...\n"
  },
  {
    "content": "",
    "title": "食客还是大厨",
    "url": "https://coolshell.cn/articles/3589.html",
    "date": "2011-01-25T08:46:45+08:00",
    "description": "\n（请勿将本文用于商业用途，转载时注明作者和出处）\n昨天我在文章《Android将允许纯C/C++开发应用》中发表了一些“很不中听”的观点，在我早晨上班刚打开电脑的时候，Gtalk上同学就发来了一条信息“android 为啥不用C/C++的原因是，android是开放式系统，为了能够跨平台。如果整回C/C++，那么windows mobile就是前车之鉴。”，于是和同学展了争论，同学的意思是Java是正确的，在硬件上的表现也将是很出色的，而且准入门槛低，最重要的是跨平台，跨平台是恶梦，而硬件上性能的问题在未来不是问题。iPhone是单一平台，所以不需要考虑跨平台。\n而在我的博文后面上也有许多的讨论，在CSDN上也有一些，大家可以去看看。很多朋友都谈了谈为什么Java要比C++要好的理由，很多很多，大家可以去看看，我觉得挺好的。不过后来，我更新了一下我的文章，留下了几个让大家思考的问题，我希望大家都看看。\n在这里，我想和大家说说技术之上的东西。\n——————————————正文分割线——————————————\n在绝大多数的评论中，我看到了大家都是站在技术开发者的角度在讨论。我想这和Google的Android犯的是同一个毛病，那就是其注重了“程序员”，而不是“用户”。就像是，Unix是为程序员开发，Java 也是为程序员的跨平台难问题开发，而Windows是为用户开发，iPhone也是为用户开发。也许，我们认为，改进了程序员的开发体验后，能迸发出程序员强大的生产力，进而增加满足用户需求的能力。不过，我想说的是，这件事的初衷是好的，但事实上程序员是永远不懂用户的。\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 3.82 )Loading...\n"
  },
  {
    "content": "",
    "title": "Android将允许纯C/C++开发应用",
    "url": "https://coolshell.cn/articles/3549.html",
    "date": "2011-01-24T08:39:50+08:00",
    "description": "\n对于Android，长期以来，我一直有两件事搞不懂，\n\n一个是为什么Android要选用Java。对于嵌入式开发，CPU和内存都很宝贵，居然还使用Java。\n一个是为什么Android的开发站点要被墙。这只是一个技术网站啊。\n\n最近，在一个Android开发人员的Blog上证实了在NDK r5使用C/C++进行开发。（以前，Android 对C/C++开发的支持仅限于用C/C++开发动态链接库，然后在Java中以JNI的形式来调用）现在，你可以用纯C/C++开发了（参看下面的程序代码）。还有一段完整的代码示例在这里（墙，还有XML的manifest，又见XML）。看来，Google终于明白为什么使用Android的手机（如：Moto, 三星、索爱和HTC）的触摸体验远远不及object C搞出来的iPhone。\nvoid android_main(struct android_app* state) {\n    // Make sure glue isn't stripped.\n    app_dummy();\n\n    // loop waiting for stuff to do.\n    while (1) {\n        // Read all pending events.\n        int ident;\n        int events;\n        struct android_poll_source* source;\n\n        // Read events and draw a frame of animation.\n        if ((ident = ALooper_pollAll(0, NULL, &events,\n                (void**)&source)) >= 0) {\n            // Process this event.\n            if (source != NULL) {\n                source->process(state, source);\n            }\n        }\n        // draw a frame of animation\n        bringTheAwesome();\n    }\n}\n我个人估计有两个原因为什么Google回头支持C/C++了，\n\nGoogle开始觉得自己整的JVM在性能上可以全面超越传统JVM，并接近C/C++，现在发现搞不定了。\nGoogle发现Java的程序员不像C/C++程序员那样注重程序的性能和效率，开发App太耗CPU和内存。\n\n于是只好转回支持C/C++。本来就是用C/C++写出来的Android嘛，居然不能用C/C++而只能用Java，真是太侮辱C/C++了。最后，只希望Google并不是又整了一个C/C++版的Dalvik虚拟机，不然就真是侮辱到极点了。\n——— 更新 2011/01/24 ————\n谢谢大家对这篇文章的评论，挺有意思的，欢迎讨论，我把我的回复更新在下面。不一定对，仅供大家参考。\n …\n 阅读全文 Read More\n\n (37 人打了分，平均分： 4.49 )Loading...\n"
  },
  {
    "content": "",
    "title": "HTML5 logo 发布",
    "url": "https://coolshell.cn/articles/3561.html",
    "date": "2011-01-23T08:47:19+08:00",
    "description": "\n2011年1月19日，W3C发布了HTML5的log，打开W3C的页面，下在的图片印入眼前。我的第一感觉，就像是看到了小时候看的八一电影制片产的电影。这分明是号召全世界的无产Web程序员们团结起来，不畏艰难，不怕牺牲，一定要把HTML5的革命事业进行到底！\n所以，请各位Web程序员不但在你们的HTML5的网页上加上下面的徽章（关于各个徽章的含义，请参看这里）\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "64位平台C/C++开发注意事项",
    "url": "https://coolshell.cn/articles/3512.html",
    "date": "2011-01-21T08:50:49+08:00",
    "description": "\n在http://www.viva64.com/en/l/上例出了28个在64位平台上使用C/C++开发的注意事项，对于进入64位时代的程序员应该去看看这28个事项，这些英文读物对于有C/C++功底的朋友读起来应该并不难，我估计大约20-30分钟可以精读完一篇（或者更快），下面是这28个注意事项的列表。相信对大家一点有帮助。\n\nLesson 01. What 64-bit systems are.\nLesson 02. Support of 32-bit applications.\nLesson 03. Porting code to 64-bit systems. The pros and cons.\nLesson 04. Creating the 64-bit configuration.\nLesson 05. Building a 64-bit application.\nLesson 06. Errors in 64-bit code.\nLesson 07. The issues of detecting 64-bit errors.\nLesson 08. Static analysis for detecting 64-bit errors.\nLesson 09. Pattern 01. Magic numbers.\nLesson 10. Pattern 02. Functions with variable number of arguments.\nLesson 11. Pattern 03. Shift operations.\nLesson 12. Pattern 04. Virtual functions.\nLesson 13. Pattern 05. Address arithmetic.\nLesson 14. Pattern 06. Changing an array’s type.\nLesson 15. Pattern 07. Pointer packing.\nLesson 16. Pattern 08. Memsize-types in unions.\nLesson 17. Pattern 09. Mixed arithmetic.\nLesson 18. Pattern 10. Storage of integer values in double.\nLesson 19. Pattern 11. Serialization and data interchange.\nLesson 20. Pattern 12. Exceptions.\nLesson 21. Pattern 13. Data alignment.\nLesson 22. Pattern 14. Overloaded functions.\nLesson 23. Pattern 15. Growth of structures’ sizes.\nLesson 24. Phantom errors.\nLesson 25. Working with patterns of 64-bit errors in practice.\nLesson 26. Optimization of 64-bit programs.\nLesson 27. Peculiarities of creating installers for a 64-bit environment.\nLesson 28. Estimating the cost of 64-bit migration of C/C++ applications.\n\n (12 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "JS游戏引擎列表",
    "url": "https://coolshell.cn/articles/3516.html",
    "date": "2011-01-20T10:43:08+08:00",
    "description": "\n这里有一个网址收集了关于JS游戏引擎开发库的一个列表，转过来。关于使用JS和HTML5做的一些小游戏，可参见《HTML5 小游戏展示》\n游戏引擎\n\n\n\nName\nLatest Release\nLicense\nType\nNotes\n\n\nThe Render Engine\n1.5.3\nMIT\n\n跨浏览器; 大规模 API; 开源. 2\n\n\ngameQuery\n0.5.1\nCC BY-SA 2.5\n\n和 jQuery 一起使用\n\n\ngTile\n0.0.1\n\nTile based\n\n\n\nAkihabara\n1.3\nGPL2/MIT\nClassic Repro\n基于JS+HTML5的街机风格的游戏 3\n\n\nThe Javascript 2D Game Engine\n\nGPL\n\n注重于重力、物理、碰撞检测方面，使用HTML5 Canvas 和IE的ExplorerCanvas 低CPU消耗. 4\n\n\nThe GMP Javascript Game Engine\n1.7.4 (2010-10-31)\nGPL2/MIT\n\n注重于数度的操作简化，”easy to learn and use” 5\n\n\nCrafty\n0.1\nGPL/MIT\n\n轻量级和模块化。 6\n\n\nEffect Games\n\n\n\n\n\n\nPropulsionJS\n1.1\nMIT\n\n使用 HTML5 Canvas. 7\n\n\nFlax\n\nApache 2.0\n\n还没有released。使用 GWT 和 HTML5。关注于Linux和Mac OS上的Web游戏开发。8\n\n\nj5g3\n\nGPLv3\n\n还在开发过程中\n\n\ncssgameengine\n\n\n\n用于初学者。\n\n\n\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "Google 需要性爱",
    "url": "https://coolshell.cn/articles/3510.html",
    "date": "2011-01-19T12:43:00+08:00",
    "description": "\n看到一篇趣文Google Needs Sex，翻译过来。\nBrad DeLong 给我们写了 两篇关于“Google遇到的麻烦”的文章(墙)，这两篇文章基本上是说， 制造网络欺诈和网络垃圾信息的人会尽其一切努力来和搜索引擎进行博弈，这样一来，其会让搜索到的结果对我们越来越没有帮助（译注：百度的竞价排名成为了制造网络欺诈和网络垃圾信息甚至洗脑的温床）。于是，人们开始去使用其它一些影响地较少的搜索引擎，准确的说，是那些垃圾信息和欺诈信息的东西还不适应于这些搜索引擎。\n这让我想到了Sex。\n如果你查看一下进化论，你就会知道为什么有性繁殖是有进化性的，是有可持续性的，而进化也是需要巨大的成本的。\n为什么自然界不用克隆来繁殖呢？我所理解的最有说服力的答案是—— 防御寄生生物。如果每一代的生物体都和上一代完全的一样，寄生生物就总有一天可以破解生物体的防御，就是为什么！如果我们的某个香蕉园里种植着“克隆香焦” ，那么一旦某种病菌传播开来，那么我们整个香蕉园里的全部香蕉将毁于一旦。所以，混杂基因的模式会让寄生生物或病毒更难破坏我们的防御。\n因此，Google的这些欺诈信息和垃圾信息就像是寄生在人体上的寄生体一样，它们已经非常适应Google的搜索引擎。（译注：百度上的寄生体则像是百度自己养的宠物）\n我不知道“搜索引擎的性爱”会是什么样的，但是很明显，Google需要一些。\n（全文完）\n (14 人打了分，平均分： 3.57 )Loading...\n"
  },
  {
    "content": "",
    "title": "信XML，得自信",
    "url": "https://coolshell.cn/articles/3498.html",
    "date": "2011-01-19T08:49:48+08:00",
    "description": "\nXML可能是计算有史以来最NB的发明了，以至于我们以没有XML的程序是难登大堂的程序，不用XML，你都不好意思当程序员。于是，我们看到了很多很雷人的用法（《信XML，得永生》），当然一些朋友当时并没有看懂，不过我不怪大家，因为我们依然深信使用XML可以让你有强大的Zhuangbility，于是我们有下面这两种相当Geiliable的用法。\n一、XML中的XML\n这个例子是某公司的一个SOAP实现——我们的Webservice需要返回一个XML字符串，这怎么办呢？其实很容易，因为——XML是无所不能的，那怕是封装自己。\n\n<!-- ED: soap envelope omitted for readability -->\n<string xmlns=\"urn:Initech.Global.Services\">\n  &lt;CompanyGetConnector&gt;\n    &lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n      &lt;xs:element name=\"InitechGetConnector\"&gt;\n        &lt;xs:complexType&gt;\n          &lt;xs:choice maxOccurs=\"unbounded\"&gt;\n            &lt;xs:element name=\"employees\"&gt;\n              &lt;xs:complexType&gt;\n                &lt;xs:sequence&gt;\n                  &lt;xs:element name=\"EmployerName\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Employee\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Firstname\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Prefix\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Lastname\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Org._unit\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Function\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"E-mail_work\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Telephone_work\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Mobile_work\" type=\"xs:string\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Birthdate\" type=\"xs:date\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Hired_since__irt._yearsemployed_\" type=\"xs:date\" minOccurs=\"0\"/&gt;\n                  &lt;xs:element name=\"Image\" type=\"xs:base64Binary\" minOccurs=\"0\"/&gt;\n                &lt;/xs:sequence&gt;\n              &lt;/xs:complexType&gt;\n            &lt;/xs:element&gt;\n          &lt;/xs:choice&gt;\n        &lt;/xs:complexType&gt;\n      &lt;/xs:element&gt;\n    &lt;/xs:schema&gt;\n\n    &lt;employees&gt;\n      &lt;EmployerName&gt;\n        My Client\n      &lt;/EmployerName&gt;\n      &lt;Employee&gt;\n        100001\n      &lt;/Employee&gt;\n    &lt;/employees&gt;\n  &lt;/CompanyGetConnector&gt;\n</string>\n\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.38 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些有意思的网站和贴子",
    "url": "https://coolshell.cn/articles/3480.html",
    "date": "2011-01-18T08:53:24+08:00",
    "description": "\n各位朋友，又到了介绍各种杂项的时候了，正如以前的这篇和这篇文章一样，本篇文章也给你介绍一些最近出现的一些有趣的东西。希望你能喜欢。\n\n首先是华尔街的一篇报道，2011年最好和最不好的工作，其引用了CareerCast.com的数据，其列出了100个工作种类，并根据薪资、工作环境、工作鸭梨、体力消耗和就业前景做了一个排序。结果排第一位的是“软件工程师”，其理由是：高科技产品的需求呈爆炸式增长，以及人们对iPod、平板电脑、和其它科技产品应用软件的喜好，软件工程师被评为最佳职业。软件工程师有弹性工作时间，可以在家办公，而且每个月都有猎头找来。而最差是的则是码头工人。\n\n\n\n\n\n接下来是一个叫“Java pass by value”的长贴，楼主说有一天在LinkedIn.com上看到了Java Group里有人讨论Java是pass by value的，长达240+贴子。贴子里说，如果你使用Java的原始类型如int, long，就是传值，如果你用object, array，其实传的是一个引用的拷贝，所以，Java是传值的。呵呵，你觉得有道理吗？于是，成就了这个大讨论战。reddit.com上也有N多的回贴。有空可以看看。\n\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux的cycle日历（你懂的）",
    "url": "https://coolshell.cn/articles/3489.html",
    "date": "2011-01-17T08:42:09+08:00",
    "description": "\n这是一个开源项目：http://cycle.sourceforge.net/，其是用python写的。在项目的主页上说，这是一个给妇女用的日历程序，叫cycle，周期，给妇女的，我不多说了，你懂的。下面是一些介绍（请大家注意学习相关的英文单词）\n当然，这个小程序不单单只是查看妇女的“周期”（menstruation），其还提供了以下的功能：\n\n第一次的周期 – 在日历上显示为粉色。menstruation周期长度由用户输入的六次周期取平均值确定。\n排卵期（Ovulation day）- 在日历上显示为亮绿色，\n受精期 （Fertile period）- 在日历上显示为绿色\n安全期（Safe Sex）\n预产期（Date of birth）\n还允许你记一些notes – 医生建议你服用一些荷尔蒙避孕药（hormonal contraceptive）\n\n下面是屏幕截图 ——\n\n注意以下的免责条款：\n\n本程序并不能成为一种避孕的方法。\n本程序也不能阻止各种性传染病，如：AIDS\n本程序更不能取代你的妇科医生。\n\n（全文完）\n (5 人打了分，平均分： 2.20 )Loading...\n"
  },
  {
    "content": "",
    "title": "图解SQL的Join",
    "url": "https://coolshell.cn/articles/3463.html",
    "date": "2011-01-11T08:44:09+08:00",
    "description": "\n对于SQL的Join，在学习起来可能是比较乱的。我们知道，SQL的Join语法有很多inner的，有outer的，有left的，有时候，对于Select出来的结果集是什么样子有点不是很清楚。Coding Horror上有一篇文章（实在不清楚为什么Coding Horror也被墙）通过 文氏图 Venn diagrams 解释了SQL的Join。我觉得清楚易懂，转过来。\n假设我们有两张表。\n\nTable A 是左边的表。\nTable B 是右边的表。\n\n其各有四条记录，其中有两条记录是相同的，如下所示：\nid name       id  name\n-- ----       --  ----\n1  Pirate     1   Rutabaga\n2  Monkey     2   Pirate\n3  Ninja      3   Darth Vader\n4  Spaghetti  4   Ninja\n下面让我们来看看不同的Join会产生什么样的结果。\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.52 )Loading...\n"
  },
  {
    "content": "",
    "title": "Sony PS3 Root Key 被破解",
    "url": "https://coolshell.cn/articles/3453.html",
    "date": "2011-01-10T09:02:28+08:00",
    "description": "\n著名的黑客George “GeoHot” Hotz（其也帮助破解了iPhone）宣称破解了Sony P3的root key（也称front door key），并将这个key公布于 http://www.geohot.com/ （墙）。不但发布了root key，还做了一个hello world。Youtube上也有一个相关的视频：http://www.youtube.com/watch?v=UkLSXsCKDkg\nerk: C0 CE FE 84 C2 27 F7 5B D0 7A 7E B8 46 50 9F 93 B2 38 E7 70 DA CB 9F F4 A3 88 F8 12 48 2B E2 1B\nriv: 47 EE 74 54 E4 77 4C C9 B8 96 0C 7B 59 F4 C1 4D\npub: C2 D4 AA F3 19 35 50 19 AF 99 D4 4E 2B 58 CA 29 25 2C 89 12 3D 11 D6 21 8F 40 B1 38 CA B2 9B 71 01 F3 AE B7 2A 97 50 19\n R: 80 6E 07 8F A1 52 97 90 CE 1A AE 02 BA DD 6F AA A6 AF 74 17\n n: E1 3A 7E BC 3A CC EB 1C B5 6C C8 60 FC AB DB 6A 04 8C 55 E1\n K: BA 90 55 91 68 61 B9 77 ED CB ED 92 00 50 92 F6 6C 7A 3D 8D\n Da: C5 B2 BF A1 A4 13 DD 16 F2 6D 31 C0 F2 ED 47 20 DC FB 06 70\n之所以叫“front door key”，其是相对于“back door” 而言，传统的破解一般是通过软件的某个 bug或是后门来破解。而这次的PS3走的是前门，这就是说——这已经不是破解了，这是完全意义上的PS3正版了。\n为什么呢。这和PS3的开发有关。其很像Symbian 的Sign，也就是说，游戏开发商要想让他们的游戏在PS3上发布，其需要把游戏通过法律流程交给Sony，然后被Sign上一个key，就可以成为正式的发行版并可在所有用户的PS3上运行了。所以，这个key是PS3到今天没有盗版游戏的关键。不过随着这个key被找到，这意味着任何人都可以在PS3上发布软件了。\n最要命的是，这个Key和PS3的硬件绑定，也就是说，如果Sony要阻止这个事的话，无法通过升级firmware完成，必需更换硬件！！\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "输出从1到1000的数",
    "url": "https://coolshell.cn/articles/3445.html",
    "date": "2011-01-07T08:55:32+08:00",
    "description": "\n有这样一个面试题——请把从1到1000的数打印出来，但你不能使用任何的循环语句或是条件语句。更不能写1000个printf或是cout。用C/C++语言。\n我相信，大多数人一开始你可能想到的是递归算法：\n\nvoid f(int n){\n    printf(\"%d\\n\",n);\n    (1000-n) ? f(n+1) : exit(0) ;\n}\nint main(){\n    f(1);\n}\n\n当然，题目中说了不能使用条件语句，所以，上面那种解法的不符合题意的，因为还是变向地使用了条件表达式。不过，我们可以用别的方法来让这个递归终止，比如：\n除以零，当程序crash，呵呵。\nvoid f(int n){\n    printf(\"%d\\n\",n);\n    n/(1000-n);\n    f(n+1);\n}\n还有这样退出递归的：\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 3.89 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些杂项资源",
    "url": "https://coolshell.cn/articles/3437.html",
    "date": "2010-12-31T13:00:00+08:00",
    "description": "\n以前给大家介绍过一些非常有意思的杂项资源，今天再给大家介绍一些。（虽然没有上次的多，也算是一个新年礼物吧）\n\n首先，如果你想在你的web页上做一个小提示，你不妨到http://projects.nickstakenburg.com/tipped上看看，各种各样的提示风格，很不错。而且兼容于四大主流浏览器——Chrome, Firefox, IE, Safari。\n\n\n如果你想让Java变成一个动态语言，你可以试试这个开源项目：http://code.google.com/p/ductilej/\n\n\n如果你想把你的Windows蓝屏改成红屏或是绿屏，你可以看看这篇教程：http://blogs.technet.com/b/markrussinovich/archive/2010/12/14/3374820.aspx，还是挺Cool的。\n\n\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "6个有用的MySQL语句",
    "url": "https://coolshell.cn/articles/3433.html",
    "date": "2010-12-31T08:29:35+08:00",
    "description": "\n以前本站给大家介绍过《MySQL性能优化的最佳20+条经验》，今天给大家介绍六条比较有用的MySQL的SQL语句，可能很多人都通过PHP来实现这些功能。\n1. 计算年数\n你想通过生日来计算这个人有几岁了。\n\n\nSELECT DATE_FORMAT(FROM_DAYS(TO_DAYS(now()) - TO_DAYS(@dateofbirth)), '%Y') + 0;\n\n2. 两个时间的差\n取得两个 datetime 值的差。假设 dt1 和 dt2 是 datetime 类型，其格式为 ‘yyyy-mm-dd hh:mm:ss’，那么它们之间所差的秒数为：\n\n\nUNIX_TIMESTAMP( dt2 ) - UNIX_TIMESTAMP( dt1 )\n\n除以60就是所差的分钟数，除以3600就是所差的小时数，再除以24就是所差的天数。\n3. 显示某一列出现过N次的值\n\n\nSELECT id\nFROM tbl\nGROUP BY id\nHAVING COUNT(*) = N;\n\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 2.90 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员的圣诞节",
    "url": "https://coolshell.cn/articles/3429.html",
    "date": "2010-12-27T08:43:32+08:00",
    "description": "\n程序员Román Cortés用1021个字节写了一个3D 的圣诞树，很强大。（请使用Chrome浏览器查看），还记得本站介绍的那个叫js1k.com的网站吗？\n\n其原理如下所示：\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "流体力学的演示",
    "url": "https://coolshell.cn/articles/3421.html",
    "date": "2010-12-21T08:49:35+08:00",
    "description": "\n某人用Java搞了一个流体力学的演示。\nhttp://grantkot.com/MPM/Liquid.html\n\n不过，这仅仅是个开始。某同学将其发布上了reddit.com，于是，全世界的同学们开始给力了——\n …\n 阅读全文 Read More\n\n (14 人打了分，平均分： 3.43 )Loading...\n"
  },
  {
    "content": "",
    "title": "偷了世界的程序员",
    "url": "https://coolshell.cn/articles/3363.html",
    "date": "2010-12-16T08:39:52+08:00",
    "description": "\n本文译自美国时代（time.com）的《The Men Who Stole the World》，原作者：Lev Grossman。相当有传奇色彩，读起来很爽，翻译过来。译得不好，还请大家指正。本中的四个程序员可能并不是那么声名显赫，而且也很不老实，或许算不上成功，不过他们的确改变了世界。而本文有分析了互联网上P2P的那些事，相当的有参考价值。\n2010年12月17日更新：修改了一些错误，理顺了一些语句。\n2010年12月19日更新：增加了一些插图。 \n————————正文————————\n十年前，有四个年轻人改变了这个世界的运作方式。他们使用的并不是法律或是武器或是金钱，而是使用软件来改变世界。他们当时有着激进和极具破坏性的想法，并把这些想法付诸于代码，在Internet上以免费自由方式发布。这四个人，没有一个完成了大学学业，却奠定了今天我们习惯的数字媒体环境的基础。然后，因为各种原因，他们也迅速地消失在公众视野中。\n1999年，美国东北大学的一个叫Shawn Fanning的一年级新生开发Napster，从此，成为了P2P文件共享和不需要大型机构或零售商就可以获得音乐的先锋和范例。《时代周刊》和《财富》把他放上了封面。那时，他在19岁。\n就在同一年，一个挪威的只有十几岁的年轻人 Jon Lech Johansen，他和另两个今天都不为人知的程序员，写下了一个程序解密了商业的DVD，而他成为了全球盛名的“ DVD Jon.”，那年，他只有15岁。\n而在1997年，Justin Frankel，一个亚利桑那州塞多纳的18岁的黑客，开发了一个免费的MP3播放器——WinAmp，其成为了Windows操作系统上装机必备的软件，并造就了主流数字音乐的革命。在他发布的第18个月内，1500万人下载了这个软件。而三年后，Frankel 开发了 Gnutella，一个P2P的文件共享协议，没有中心结点，不像 Napster，其不可能被关闭。目前有上百万人还在使用它。\n2001年，Bram Cohen, 当年 26 岁，开发了一个P2P的文件传输共享协议—— BitTorrent，其以全新一流的架构全面优化了网络上大文件的共享和传输效率。 BitTorrent 也变成了整个Internet上发布大数据和文件的一个标准。\n …\n 阅读全文 Read More\n\n (54 人打了分，平均分： 4.70 )Loading...\n"
  },
  {
    "content": "",
    "title": "Facebook全球关系网",
    "url": "https://coolshell.cn/articles/3396.html",
    "date": "2010-12-15T08:47:15+08:00",
    "description": "\nPaul Butler 是Facebook的Data Infrastructure Engineering Team的一个实习生，他把Facebook 5亿用户的人际关系网给图示了出来（见下图，源图片）挺赞的。从中我们可以看到，某些地方是一片漆黑……\nFacebook全球关系网\n(点击看大图，3.8M)\n关于Paul是如何产生这个图的，你可以参看：http://www.facebook.com/notes/facebook-engineering/visualizing-friendships/469716398919 （墙）\n (12 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程语言流行度",
    "url": "https://coolshell.cn/articles/3385.html",
    "date": "2010-12-13T09:12:56+08:00",
    "description": "\n下面是一个关于编程语言流行度的图（以前本站也有一篇编程语言流行度的文章）。其X轴是从Github中取来的数据（项目数），而Y轴是从StackOverflow取来的（tag数）。注意：Github提供了语言流行度：https://github.com/languages，而本图的原始数据在这里。\n编程语言流行度（点击看大图）\n来源：http://www.dataists.com/2010/12/ranking-the-popularity-of-programming-langauges/\n (9 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "五个免费开源的数据挖掘软件",
    "url": "https://coolshell.cn/articles/3356.html",
    "date": "2010-12-13T08:41:11+08:00",
    "description": "\n在网上看到一篇文章介绍五个免费开源的数据挖掘软件，转过来。\nOrange\nOrange 是一个基于组件的数据挖掘和机器学习软件套装，它的功能即友好，又很强大，快速而又多功能的可视化编程前端，以便浏览数据分析和可视化，基绑定了Python以进行脚本开发。它包含了完整的一系列的组件以进行数据预处理，并提供了数据帐目，过渡，建模，模式评估和勘探的功能。其由C++ 和 Python开发，它的图形库是由跨平台的Qt框架开发。\nRapidMiner\nRapidMiner, 以前叫 YALE (Yet Another Learning Environment), 其是一个给机器学习和数据挖掘和分析的试验环境，同时用于研究了真实世界数据挖掘。它提供的实验由大量的算子组成，而这些算子由详细的XML 文件记录，并被RapidMiner图形化的用户接口表现出来。RapidMiner为主要的机器学习过程提供了超过500算子，并且，其结合了学习方案和Weka学习环境的属性评估器。它是一个独立的工具可以用来做数据分析，同样也是一个数据挖掘引擎可以用来集成到你的产品中。\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.10 )Loading...\n"
  },
  {
    "content": "",
    "title": "140个Google的面试题",
    "url": "https://coolshell.cn/articles/3345.html",
    "date": "2010-12-02T08:44:24+08:00",
    "description": "\n来源：http://blog.seattleinterviewcoach.com/2009/02/140-google-interview-questions.html（墙）\n\n某猎头收集了140多个Google的面试题，都张到他的Blog中了，主要是下面这些职位的，因为被墙，且无任何敏感信息，所以，我原文搬过来了。\n\n\nProduct Marketing Manager\nProduct Manager\nSoftware Engineer\nSoftware Engineer in Test\nQuantitative Compensation Analyst\nEngineering Manager\nAdWords Associate\n\n\n这篇Blog例举了Google用来面试下面这几个职位的面试题。很多不是很容易回答，不过都比较经典与变态，是Google，Microsoft，Amazon之类的公司的风格。对于本文，我没有翻译，因为我相信，英文问题是最好的。不过对于有些问题，我做了一些注释，不一定对，但希望对你有帮助启发。对于一些问题，如果你百思不得其解，可以Google一下，StackOverflow或是Wikipedia上可能会给你非常全面的答案。\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 4.04 )Loading...\n"
  },
  {
    "content": "",
    "title": "Groovy是怎么实现createArray的",
    "url": "https://coolshell.cn/articles/3335.html",
    "date": "2010-12-01T14:08:53+08:00",
    "description": "\nGroovy是一个基于 Java虚拟机的敏捷 动态语言。构建在强大的Java语言之上 并 添加了从Python，Ruby和Smalltalk等语言中学到的 诸多特征。为Java开发者提供了 现代最流行的编程语言特性，而且学习成本很低（几乎为零）。在以前的酷壳的五大基于JVM的脚本语言中也介绍过它。\n下面，让我们看看他的一个createArray的实现，请大家前去围观下面的Groovy的trunk上的源码吧。真是很好很强大。\nhttp://svn.codehaus.org/groovy/trunk/groovy/groovy-core/src/main/org/codehaus/groovy/runtime/ArrayUtil.java\n这里摘上前几个createArray重载函数让大家看看，（一共有250个重载函数）\npublic class ArrayUtil {\n    ... ...\n    ... ...\n public static Object[] createArray(Object arg0, Object arg1) {\n return new Object[]{\n arg0, arg1};\n }\n\n public static Object[] createArray(Object arg0, Object arg1, Object arg2) {\n return new Object[]{\n arg0, arg1, arg2};\n }\n\n public static Object[] createArray(Object arg0, Object arg1, Object arg2, Object arg3) {\n return new Object[]{\n arg0, arg1, arg2, arg3};\n }\n\n public static Object[] createArray(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) {\n return new Object[]{\n arg0, arg1, arg2, arg3, arg4};\n }\n\n public static Object[] createArray(Object arg0, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5) {\n return new Object[]{\n arg0, arg1, arg2, arg3, arg4, arg5};\n }\n ... ...\n ... ...\n} \n这里给了一些解释：\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "用Google Translate玩转beat box",
    "url": "https://coolshell.cn/articles/3331.html",
    "date": "2010-12-01T10:21:44+08:00",
    "description": "\n在Reddit上有人发布了怎么使用Google的翻译来玩beat box，很有趣，转过来。\n\n\n下面是相关步骤：\n1) Go to Google Translate\n2) 把翻译语言设置成从 German 翻译到 German。（德语）\n3) 拷贝粘贴这个字符串到translate中：\npv zk pv pv zk pv zk kz zk pv pv pv zk pv zk zk pzk pzk pvzkpkzvpvzk kkkkkk bsch\n4) 把声音开大，点击“朗读”，\n另，如果你在Google里以 “Google beatbox” 作为关键词搜索，你会看到 Google Translate出现在最前面的搜索结果中。\n\n (6 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "JDK里的设计模式",
    "url": "https://coolshell.cn/articles/3320.html",
    "date": "2010-11-26T08:44:37+08:00",
    "description": "\n下面是JDK中有关23个经典设计模式的示例，在stakeoverflow也有相应的讨论：\nhttp://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns\nStructural（结构模式）\nAdapter:\n把一个接口或是类变成另外一种。\n\njava.util.Arrays#asList()\njavax.swing.JTable(TableModel)\njava.io.InputStreamReader(InputStream)\njava.io.OutputStreamWriter(OutputStream)\njavax.xml.bind.annotation.adapters.XmlAdapter#marshal()\njavax.xml.bind.annotation.adapters.XmlAdapter#unmarshal()\n\nBridge:\n把抽象和实现解藕，于是接口和实现可在完全独立开来。\n\nAWT (提供了抽象层映射于实际的操作系统)\nJDBC\n\nComposite:\n让使用者把单独的对象和组合对象混用。\n\njavax.swing.JComponent#add(Component)\njava.awt.Container#add(Component)\njava.util.Map#putAll(Map)\njava.util.List#addAll(Collection)\njava.util.Set#addAll(Collection)\n\n\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.69 )Loading...\n"
  },
  {
    "content": "",
    "title": "几个在线颜色选择器",
    "url": "https://coolshell.cn/articles/3314.html",
    "date": "2010-11-25T10:44:56+08:00",
    "description": "\n下面是一些在线的颜色配色方案，也许可以为你的Web配色方面提供一些参考。还有一些非常有意思的杂项资源你也可以去看看。\n\nhttp://colorschemedesigner.com/\nhttp://www.colourlovers.com/\nhttp://kuler.adobe.com\nhttp://opencodeproject.com/colorchooser/\nhttp://www.yafla.com/yaflaColor/ColorRGBHSL.aspx\nhttp://www.colorjack.com/sphere/\nhttp://easyrgb.com\n\n\n (9 人打了分，平均分： 3.22 )Loading...\n"
  },
  {
    "content": "",
    "title": "几篇技术文章",
    "url": "https://coolshell.cn/articles/3311.html",
    "date": "2010-11-25T09:04:54+08:00",
    "description": "\nThe Art of Unix\nhttp://www.faqs.org/docs/artu/\nPerl for Impatient Developer\nhttp://blob.perl.org/books/impatient-perl/iperl.pdf\nGame Development with Javascript\nhttp://www.brighthub.com/hubfolio/matthew-casperson/blog/archive/2009/06/29/game-development-with-javascript-and-the-canvas-element.aspx\nIntroduction to x64 Assembly\nhttp://software.intel.com/en-us/articles/introduction-to-x64-assembly/\nDatabase Fundamental\nhttps://www.ibm.com/developerworks/wikis/display/db2oncampus/FREE+ebook+-+Database+fundamentals\n (13 人打了分，平均分： 3.31 )Loading...\n"
  },
  {
    "content": "",
    "title": "Jeff Dean的Stanford演讲",
    "url": "https://coolshell.cn/articles/3301.html",
    "date": "2010-11-22T09:07:36+08:00",
    "description": "\nGoogle 公司的 Jeff Dean 在Stanford大学做了一个非常 精彩的演讲（视频未墙）。我觉得我们每一个人都应该去看一看这个视频，当然，没有字幕，需要不错的听力，当然，我不可能全部翻译出来，因为我也不是完全能听懂，下面是一些相关的Notes，供你参夸，并欢迎牛人指证。\n\n比较了从1999年到2010年十年来的搜索量的变化。搜索量增加了 1000 倍，而搜索速度快了5 倍。1999年，一个网页的更新最多需要一个月到两个月，而今天，只需要几秒钟，足足加快了5w倍。\n一开始，这些大量的查询产生了大约30GB的I/O量。2004年，他们考虑过全部重写infrastructure。\n讨论了一些关于变量长度字节对齐的东西。\n今天的MapReduce 有400万个作业，处理将近1000PB的数据，130PB的中间数据，还有45PB的输出数据。（1PB =1024TB）关于 MapReduce （Google云计算的精髓） 的一些统计，见下图：\n\n\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "版本管理器的发展史",
    "url": "https://coolshell.cn/articles/3288.html",
    "date": "2010-11-17T08:50:48+08:00",
    "description": "\n以前本站发布过编程语言进化，Windows的达尔文进化图，今天在网上看到版本管理器的进化图，转过来，源文链接如下：\nhttp://codicesoftware.blogspot.com/2010/11/version-control-timeline.html (墙)\n\n这张图上分成了四个时期：\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "架构师给程序员的一封信",
    "url": "https://coolshell.cn/articles/3281.html",
    "date": "2010-11-16T09:12:04+08:00",
    "description": "\n下面的邮件是某Architect发给他的Engineering团队的（来源），我觉得挺不错的，翻译过来，我相信我们所有的程序员都能从中学到很多东西。下面是这封邮件——\n\n每次当我开始做新的东西是我就会很兴奋。就算在软件圈里做了20年以后，每当开始新的旅程里，我都觉得我心中有一些东西不吐不快。这是我们大家一起的旅程。我强烈地相信我们详细规划的过程是很有乐趣的，富有挑战的和丰富多彩的。我想让这个旅程让你们难忘，并且能增添你们所有人的阅历。\n这看起来有些唯心主义，不过，我想制订我的工作日程，我们的技术策略，以及你们密切合作的进度。这样一来，当你们做了什么相当不错的事，我们所有人都可以受益。我相当的尊重第一个工程师和他们的代码。\n1. 代码是王。文档仅随其后 。所以，代码一定要和文档一致，并可以正确执行。\n2. 测试，测试，测试。\n3. 单元测试非常关键 。每一个在单元测试之后发现的bug需要开发人员双倍的开销。记住，我宁可增加你的薪水，也不愿意把这些钱发给另一个QA团队然后你再修正bug。因此，如果你的代码满是bug的话，我不得不把钱付给更多的人，而你也只能分得很小的一块饼。\n4. 写下有效率的代码，不但是让人读得有效率，而且也是让CPU执行 地有效率。对于坏代码永远不会善罢甘休。\n5. 多了解今天工作需要之外的事情。你不仅仅要知道今天干什么，还要知道明天需要什么。\n …\n 阅读全文 Read More\n\n\n (19 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "超强的验证码",
    "url": "https://coolshell.cn/articles/3277.html",
    "date": "2010-11-08T18:36:50+08:00",
    "description": "\n大家看看这个网站吧。最强的验证码——把看到的东西画出来。\nhttp://www.geee.net/contact.htm\n\n某些网友们还是做了一些尝试：\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "两本电子书",
    "url": "https://coolshell.cn/articles/3270.html",
    "date": "2010-11-08T11:47:09+08:00",
    "description": "\nLearn Python The Hard Way (pdf)\n \nLearn Python The Hard Way\nProgramming Windows Phone 7 (Charles Petzold)\nProgramming Windows Phone 7 by Charles Petzold\n (8 人打了分，平均分： 3.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "游戏Flash vs HTML5",
    "url": "https://coolshell.cn/articles/3267.html",
    "date": "2010-11-05T11:16:25+08:00",
    "description": "\n下面这个网页上做一个乒乓游戏，左边是Flash，右边是HTML5，很有趣。这也算是一个Flash和HTML5通讯的例子吧。\nhttp://labs.codecomputerlove.com/FlashVsHtml5/\n\n\n (8 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++的字符串格式化库",
    "url": "https://coolshell.cn/articles/3258.html",
    "date": "2010-11-02T08:59:06+08:00",
    "description": "\n这里向大家介绍一个C++的字符串格式化库，叫cpptempl，这个库支持对字符串格式的条件，循环，变量插入。看上去很不错，只不过其是基于boost库的。\n下面是一个例子：\n// The text template\nwstring text = L\"I heart {$place}!\" ;\n// Data to feed the template engine\ncpptempl::data_map data ;\n// {$place} => Okinawa\ndata[L\"place\"] = cpptempl::make_data(L\"Okinawa\");\n// parse the template with the supplied data dictionary\nwstring result = cpptempl::parse(text, data) ;\n输出结果是：\nI heart Okinawa!\n是不是很方便？让我们看一个更复杂的例子：\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.70 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个人脸识别的Javascript",
    "url": "https://coolshell.cn/articles/3254.html",
    "date": "2010-11-01T08:57:53+08:00",
    "description": "\n这里有一个人脸识别的Javascript，感觉挺酷的。识别的还是很不错的，网友们在做了很多的测试，对于动画片里的人员很不准，而且，照片质量要好一点的会准一点。下面是一些识别结果：\n\n一个递归式的图\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 2.75 )Loading...\n"
  },
  {
    "content": "",
    "title": "给老婆普及计算机知识",
    "url": "https://coolshell.cn/articles/3236.html",
    "date": "2010-10-27T08:48:37+08:00",
    "description": "\n我们知道计算机的计算数据需要从磁盘调度到内存，然后再调度到L2 Cache，再到L1 Cache，最后进CPU寄存器进行计算。\n给老婆在电脑城买本本的时候向电脑推销人员问到这些参数，老婆听不懂，让我给她解释，解释完后，老婆说，“原来电脑内部这么麻烦，怪不得电脑总是那么慢，直接操作内存不就快啦”。我是那个汗啊。\n我只得向她解释，这样做是为了更快速的处理，她不解，于是我打了下面这个比喻——这就像我们喂宝宝吃奶一样，\n\nCPU就像是已经在宝宝嘴里的奶一样，直接可以咽下去了。需要1秒钟\n\n\nL1缓存就像是已冲好的放在奶瓶里的奶一样，只要把孩子抱起来才能喂到嘴里。需要5秒钟。\n\n\nL2缓存就像是家里的奶粉一样，还需要先热水冲奶，然后把孩子抱起来喂进去。需要2分钟。\n\n\n内存RAM就像是各个超市里的奶粉一样，这些超市在城市的各个角落，有的远，有的近，你先要寻址，然后还要去商店上门才能得到。需要1-2小时。\n\n\n硬盘DISK就像是仓库，可能在很远的郊区甚至工厂仓库。需要大卡车走高速公路才能运到城市里。需要2-10天。\n\n所以，在这样的情况下——\n …\n 阅读全文 Read More\n\n (41 人打了分，平均分： 4.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "你和你的工作",
    "url": "https://coolshell.cn/articles/3231.html",
    "date": "2010-10-26T08:54:25+08:00",
    "description": "\n源文：http://youtheuser.com/2010/10/04/you-and-your-job/，有人说下面的这个文章太过Crazy，有人说下面的这个文章是猎头的软文，你换工作换得越多，他们才能越挣钱。我的观点的，先别否定他的观点，试着去理解一下为什么他要这么说，你会发现还有一些道理的。然后，想一想，自己需要的是什么？一份工作？还是一份经历？还是不断的自我挑战？相信你会有知道该怎么去做的。当然，“离职”是最后一步棋，在此前，我更希望你能尝试地在你现在工作环境下去改变去影响。\n“The role of a manager should be to ensure that those that work for him/her eventually leave and go onto bigger and better things” —  Mark Plant\n如果你对你的工作不高兴——离开，如果每天早上你对你的工作没有激情——无论你在干什么你都要停下来。\n因为这就是我们赖以生存的东西。\n\n如果你的工作没有挑战性 – leave.\n如果你在混你的工作 – leave.\n如果你觉得现在不辛苦而又感到压力大 – leave.\n如果你完全知道你现在正在做的所有一切的事 – leave.\n如果你没有得到足够多的失败– leave 并到找一个地方可以让你获得成功前的失败。而当你发现你天天都在成功 – leave again.\n如果你觉得你很成功 – leave 然后去找某个事或某个地方你不会那么成功，而当你又觉得你又很成功了 – leave again.\n如果所有的人都喜欢你并喜欢和你一起工作 – leave 然后去某个地方，那里的人并不喜欢你（然后你让他们喜欢你）。\n如果你的工作就像是赢奖品一样，并且你总是能赢 – leave 然后找个地儿，那里的人总是赢不了什么。帮他们扭转局面。\n如果你认为你知道产品的所有的内在的东西 – leave 然后找一个你不知道的产品。\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "在线作图编辑服务",
    "url": "https://coolshell.cn/articles/3244.html",
    "date": "2010-10-25T13:02:06+08:00",
    "description": "\n以前向大家介绍过在线的IDE，还有在线的编译器，还有 在线的画UML图的网站，在这篇文章里还介绍了一个在线的CSS制作服务，今天给大家介绍两个在线的作图编辑服务。\n一个看似就是Web版的Photoshop：http://pixlr.com/editor/ （用Flash做的）\nPhoto Editor Online 在线服务\n—–\n一个是作矢量图的，叫SVG Editor：\nhttp://svg-edit.googlecode.com/svn-history/r1771/trunk/editor/svg-editor.html\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "开发时间估计",
    "url": "https://coolshell.cn/articles/3218.html",
    "date": "2010-10-25T09:49:27+08:00",
    "description": "\n项目管理中，项目任务时间估计是其中一个重要的环节。各种管理员人都觉得时间估计很重要，都希望时间估计能准确一些，但是，事实却并不如此。事实上，会下面这样的结果。\n\n\n\n目前状态\n完成进展\n剩余任务估计\n\n\n\n\n任务刚被分配，还没有做调查\n完成0%\n大约2周\n\n\n完成需求分析和调查，攻克了难点\n完成50%\n大约2周多一点\n\n\n我几乎做完了。只有出了点我事先没有想到的岔子。\n不过，我已找到解决方法了。只是还需要一些时间\n完成90%\n大约2周多一点\n\n\n我全部做完了，只是还要写文档，做Code Review，\n单元测试和错误处理\n完成99%\n还需要2周\n\n\n\n呵呵，这是怪我们的项目管理的方法论呢？还是怪我们太过草率的程序员呢？\n\n\n (12 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "30+ Web下拉菜单",
    "url": "https://coolshell.cn/articles/3207.html",
    "date": "2010-10-20T14:06:43+08:00",
    "description": "\n以前给大家介绍过13个不错的Javascript和CSS的菜单、20个优秀的Javascript导航技术、30种时尚的CSS网站导航条，今天在网上看到一篇文章其收集了30多个下拉菜单（分为两类，jQuery和CSS+Javascript的），转过来。\n原文：http://smashinghub.com/3-useful-drop-down-menu-scripts-to-enhance-header-navigation.htm\njQuery\nSmooth Navigation Menu\n\n\n\n\n \n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些非常不错的资料",
    "url": "https://coolshell.cn/articles/3192.html",
    "date": "2010-10-18T09:38:51+08:00",
    "description": "\n一、Intel 给开发人员推荐的资料列表（2010年下半年）\nIntel Recommended Books for Developers\n其中包含了\n\n硬件：硬件，电源，存储，无线\n软件：多线程和多核技术，高性能计算，图形游戏，用户关注\n嵌入式：设计，软件，操作系统，安全，优化。\nIT部门：策略和决策，服务器和数据中心，客户端\n\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "Eclipse和Vim快捷键桌面",
    "url": "https://coolshell.cn/articles/3181.html",
    "date": "2010-10-18T08:23:04+08:00",
    "description": "\n点击图片看大图\nEclipse 快捷键桌面\n…\n 阅读全文 Read More\n\n (45 人打了分，平均分： 3.49 )Loading...\n"
  },
  {
    "content": "",
    "title": "AES加密算法动画演示",
    "url": "https://coolshell.cn/articles/3161.html",
    "date": "2010-10-15T10:13:00+08:00",
    "description": "\n波士顿大学的Howard Straubing做了这么一个动画来展示AES加密算法的演示，挺不错的。\n\n\n点击这里看全屏\n\n (21 人打了分，平均分： 4.24 )Loading...\n"
  },
  {
    "content": "",
    "title": "用户界面和用户体验的差别",
    "url": "https://coolshell.cn/articles/3142.html",
    "date": "2010-10-14T08:45:02+08:00",
    "description": "\n用户界面设计\n用户界面设计\n用户体验设计\n …\n 阅读全文 Read More\n\n (26 人打了分，平均分： 4.46 )Loading...\n"
  },
  {
    "content": "",
    "title": "chmod -x chmod的N种解法",
    "url": "https://coolshell.cn/articles/3136.html",
    "date": "2010-10-13T08:42:37+08:00",
    "description": "\n在SlidesShare.net上有这么一个幻灯片，其说了如下的一个面试题：\n如果某天你的Unix/Linux系统上的chomd命令被某人去掉了x属性（执行属性），\n那么，你如何恢复呢？\n下面是一些答案：\n1）重新安装。对于Debian的系统：\nsudo apt-get install --reinstall coreutils\n2）使用语言级的chmod。\n\nPerl：perl-e ‘chmod 0755, “/bin/chmod”‘\nPython：python -c “import os;os.chmod(‘/bin/chmod’, 0755)”\nNode.js：require(“fs”).chmodSync(“/bin/chmod”, 0755);\nC程序：\n\n#include <sys/types.h>\n#include<sys/stat.h>\nvoid main()\n{\nchmod(\"/bin/chmod\", 0000755);\n}\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go语言的”Issue 9″ Closed!",
    "url": "https://coolshell.cn/articles/3156.html",
    "date": "2010-10-12T15:34:02+08:00",
    "description": "\n还记得Google发布Go语言没几天就要 更名Issue 9 的那个事吗？那是2009年11月的事了，差不多一年了，今天Google的Go语言团队终于正式回复这个bug了。\nComment 1097 by project member [email protected], Today (11 hours ago)\nThe naming similarity is unfortunate. However, there are many computing\nproducts and services named Go. In the 11 months since our release, there\nhas been minimal confusion of the two languages, so we are closing this\nissue.\n“名命类似是很不幸的。然而，那有很多的计算机产品和服务都叫Go。自从我们发布Go语言的这11个月里，这两个语言只有极少的混乱，所以，我们决定关闭这个问题。”\n目前，该bug的状态为Unfortunate，这个状态很有创造性啊，在我的这么多年软件开发过程中，我还没有在任何的bug管理系统中见过这种状态，嗯，要不我也给我们公司的Defect Tracking System加上一个这种状态？\n (5 人打了分，平均分： 2.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "主流文本编辑器学习曲线",
    "url": "https://coolshell.cn/articles/3125.html",
    "date": "2010-10-12T08:55:42+08:00",
    "description": "\n下图是几个经典的文本编辑器的学习曲线，不排除其中有调侃和幽默的味道。\n主流编辑器学习曲线图\n注1：Pico(PIne COmposer)是Unix操作系统中最常见的三种文字处理软件之一，具有文字编辑、搜索、拼写检查、文件浏览和段对齐功能，适合高效地编辑短小的文件。Pico是由华盛顿大学开发的免费软件，随着pine电子邮件处理软件发布。它是在Emacs的基础上以pine的邮件编辑为目标而开发的，所以其指令集是Emacs的子集，但是由于在界面上有提示快捷键，相对于vi和Emacs来说更加容易使用。由于Pico虽然是免费软件，但是它并不是开源软件，所以很多Linux版本并不包含Pico。这些版本通常提供一个界面类似的开源软件nano——Pico的克隆版。\n注2：图中的纵横坐标没有标明。我所理解的是——X轴是熟练程度，Y轴是技能。于是对于notepad 来说，技能和熟练程度呈正比。对于VS来说，熟练程度越大，所需要技能先是越来越多，而随着熟练程度的增长，你需要的技能也越少。而对于VI来说，一开始就需要相当大的技能，但一旦掌握这些技能，则你将会越来越熟练。而对于emacs来说，技能和熟练程度是呈旋涡状。\n (27 人打了分，平均分： 4.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "Javascript向量图Lib–Raphaël",
    "url": "https://coolshell.cn/articles/3107.html",
    "date": "2010-10-12T08:21:37+08:00",
    "description": "\n我们知道很多的Javascript的lib库了，比如：jQuery，YUI，Ext JS等等。今天看到一个很牛X的lib叫Raphaël [ˈrafēəl]，这是一个很小的JavaScript library，可以让在你的Web上整一些向量图，并且可以完成一些动画和图形变化，很强大。\nRaphaël使用的是  W3C 推荐的 SVG和VML 来创建图片。这意味着所创建的图形对象一样可以是一个DOM对象，可以被你的Javascript的事件来操作。Raphaël 支持所有的主流浏览器：Firefox 3.0+, Safari 3.0+, Chrome 5.0+, Opera 9.5+ d 和 Internet Explorer 6.0+，最强大的是，这个js文件被压缩后也就60K。\n下面，让我们来看几个示例：\n下面是一个图形变化的示例，点击两个图形间的箭头。\n\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程语言进化",
    "url": "https://coolshell.cn/articles/3100.html",
    "date": "2010-10-11T09:18:27+08:00",
    "description": "\n以前本站发布过《编程语言时间地理图》、《计算机编程简史图》，下面是两张关于编程语言的进化图。\n第一张是比较宏观的，来源在这里，虽然是去年的，但还是比较不错的，其把计算机编程语言分成了五个时代——\n\n\n语言诞生。1940年代。第一个语言应该是：Ada Lovelace,\n编译器时代。1950年代。这个时代的代表语言是：Fortran, LISP, 和 COBOL，编程语言开始引入编译器优化技术。\n模式时代。1960年代-1970年代。这个时代是编程语言最重大的变革。在这个时代，所有人都在思考如何让设计一个好的编程语言以让编程更简单。面向对象也因为Simula而出现，而Smalltalk成了第一个纯动态类型的语言，C/C++、Pascal和SQL也是这个时代出现的，而第一个功能性/函数式语言ML也是这个时代出现的。所以说，这个时代是一个百花齐放的时代。而1980年代并没有太多的创新的东西，而只是对70年代出现的那些语言优化和发展的时期，如：1979年发明的C++语言。\n生产力时代。1990年代以来主要是如何增进编程生产率的时代，这个时代出现了很多framework，代码库，以及快速开发的IDE，很多公司都在这个时期致力于这些增进生率的工作，如：delphi, power builder, MFC，boost等等。但最重要的还是因为引入了虚拟机——WORA（Write Once, Run Anywhere），JVM 是这方面的代表作。之后的.NET整出来的那些东西都是。今天的JPython, JRuby等都是为整合开发效率和维护效率。参看《基于JVM的语言正在开始流行》\n后现代。未来的编程语言要走向何方，我不太清楚，不过，大家可以看看本站的这几篇文章：《五个编程语言设计的失误》、《C++和JAVA传统中积极的一面》\n\n\n下面是一张大图，让你看看整个编程语言的进代图。（点击看大图）\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "Windows的达尔文进化图",
    "url": "https://coolshell.cn/articles/3097.html",
    "date": "2010-10-11T08:56:40+08:00",
    "description": "\n之前发布过《操作系统图形界面发展史(1981-2009)》，今天在网上看到一张自于Testking.com的关于Windows的进化图，其从1985年的windows 1.0到2009年的windows 7的。挺有意思的。点击可以看大图。\n\n图片来源: The Darwinian Evolution of Windows by Tech King\n (11 人打了分，平均分： 2.82 )Loading...\n"
  },
  {
    "content": "",
    "title": "Google未公开API：转MAC地址为经纬度",
    "url": "https://coolshell.cn/articles/3089.html",
    "date": "2010-10-09T15:28:13+08:00",
    "description": "\n这里有一个POC（Proof of Concept）可以通过你Web浏览器后面的路由器XSS攻击得到一个准确的GPS坐标。注意：路由器和Web浏览器以及IP地址并不包含任和地理信息。其方法是使用了一个Google未公开的API。大约方法如下：\n\n访问一个网页，这个网页隐藏了一个基于你WiFi路由器的XSS（ 参见： XSS  Verizon FiOS router）\n通过这个XSS 可以获得路由器的MAC 地址。\n然后通过 Google Location Services我们可以把这个MAC地址映射到GPS坐标。Googel的这个服务是基于HTTP的服务。这并不是一个Google正式发布的API，而是通过 Firefox’s Location-Aware Browsing 发现的。\n\n演示地点在这里：http://samy.pl/mapxss/\n我试了一下，无论无线和有线都可以准确定位我的位置。很强大，你也试试看。\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "三个教程",
    "url": "https://coolshell.cn/articles/3083.html",
    "date": "2010-10-09T14:06:21+08:00",
    "description": "\n第一个是关于vim的，相当的全面。\nhttp://stevelosh.com/blog/2010/09/coming-home-to-vim/\n第二个是Mozilla的Javascript教程\nhttps://developer.mozilla.org/en/JavaScript/Guide\n第三个是Kernighan 和Ritchie 的 “The C Programming Language”第二版的问答和练习。\nhttp://users.powernet.co.uk/eton/kandr2/\n (8 人打了分，平均分： 3.38 )Loading...\n"
  },
  {
    "content": "",
    "title": "Kick Ass小游戏",
    "url": "https://coolshell.cn/articles/3070.html",
    "date": "2010-10-08T14:06:08+08:00",
    "description": "\n还记得以前那个在IE的已打开的网页上的网址里输入一段javascript的代码后，你会发现这个页面里所有的图片元素都动了起来：（只能在IE浏览器里，Chrome和Firefox无效）\njavascript:R=0; x1=.1; y1=.05; x2=.25; y2=.24; x3=1.6; y3=.24; x4=300; y4=200; x5=300; y5=200; DI=document.images; DIL=DI.length; function A(){for(i=0; i-DIL; i++){DIS=DI[ i ].style; DIS.position=’absolute’; DIS.left=Math.sin(R*x1+i*x2+x3)*x4+x5; DIS.top=Math.cos(R*y1+i*y2+y3)*y4+y5}R++}setInterval(‘A()’,5); void(0);\n很类似一个叫Erik Rothoff Andersson的人又搞了Kick Ass的游戏，代码如下：（用了一个js文件，所以就显得没有那么复杂了，但只能在Chrome和Firefox下有用）\njavascript:var s=document.createElement(‘script’); s.type=’text/javascript’;document.body.appendChild(s); s.src=’http://erkie.github.com/asteroids.min.js’;void(0);\n在已打开的网页上输入这段代码，你会发现网页的左上角上出现了一个三角形，然后，你可以开始使用\n\n“左右方向键控制方向”，\n“上方向键控制前进”，\n“空格射击”，\n“B键查看有什么东西可以被射击”，\n“Esc键退出”，\n\n于是就出现好玩的东西了。\n为了方便你试验，你可以点击上面的这个链接，\nKiss Ass\n你可以把这个链接加入收藏夹，当你需要删除某些网页上的广告或是很让你不爽的东西时，打开这个网址，就可以开始了。\n（全文完）\n (17 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "40个很不错的CSS技术",
    "url": "https://coolshell.cn/articles/3063.html",
    "date": "2010-10-08T08:04:46+08:00",
    "description": "\n以前发布过《30种时尚的CSS网站导航条》，下面是40个CSS的技术，可以让你的网页有更好的用户体验。希望你喜欢\n1. A CSS styled table version 2\n\n2. A CSS-based Form Template\n\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "面向对象是个骗局？！",
    "url": "https://coolshell.cn/articles/3036.html",
    "date": "2010-09-29T08:37:54+08:00",
    "description": "\n今天在网上看到网页叫“Object Orientation Isa Hoax”——面向对象是一个骗局，标题很有煽动性（注：该网站上还有一个网页叫Object Orientation Is Dead），好吧，打开看看上面有些 什么，发现这个网页是在收集一些关于“面向对象的反动言论”，没想到的是，很多言论出自很多大师之口。比如：Alexander Stepanov和Bjarne Stroustrup。这些言论挺有意思的，所以，我摘两段在下面：\n第一段是Alexander Stepanov的（不要告诉我你不知道这个人，STL之父，关于他的故事，可以到这里看看）。他N年前作过一段采访，原文在这里（我非常建议大家去读一下这篇采访，相当过瘾），译文在这里（不过有地方把原意都译反了，我重译了一下），其中有一个问答被上述的那个面向对象反动言论的网页收录了：\nAlexander Stepanov\nQuestion:\nI think STL and Generic Programming mark a definite departure from the common C++ programming style, which I find is almost completely derived from SmallTalk. Do you agree?\n提问：\n我认为STL和泛型编程标志着非同一般的C++编程风格，而一般C++风格几乎完全是从SmallTalk派生过来的。你同意吗？\nAnswer:\nYes. STL is not object oriented. I think that object orientedness is almost as much of a hoax as Artificial Intelligence. I have yet to see an interesting piece of code that comes from these OO people. In a sense, I am unfair to AI: I learned a lot of stuff from the MIT AI Lab crowd, they have done some really fundamental work: Bill Gosper’s Hakmem is one of the best things for a programmer to read. AI might not have had a serious foundation, but it produced Gosper and Stallman (Emacs), Moses (Macsyma) and Sussman (Scheme, together with Guy Steele). I find OOP technically unsound. It attempts to decompose the world in terms of interfaces that vary on a single type. To deal with the real problems you need multisorted algebras – families of interfaces that span multiple types. I find OOP philosophically unsound. It claims that everything is an object. Even if it is true it is not very interesting – saying that everything is an object is saying nothing at all. I find OOP methodologically wrong. It starts with classes. It is as if mathematicians would start with axioms. You do not start with axioms – you start with proofs. Only when you have found a bunch of related proofs, can you come up with axioms. You end with axioms. The same thing is true in programming: you have to start with interesting algorithms. Only when you understand them well, can you come up with an interface that will let them work.\n回答：\n是的。STL不是面向对象的。我认为面向对象和人工智能差不多，都是个骗局。我至今仍然没有从那些OO编程的人那里看到一丁点有意思的代码。从某种意义上来说，我这么说对人工智能（AI）并不公平：因为我听说过很多MIT（麻省理工大） AI实验室里一帮人搞出来的东西，而且他们的确直正干了一些基础性的工作：Bill Gosper的Hakmem是程序员最好的读物之一。AI或许没有一个实实在在的基础，但它造就了Gosper和Stallman（Emacs）， Moses（Macsyma）和Sussman（Scheme， 和Guy Steele一起）。\n\n我发现OOP在技术上是荒谬的，它企图把事物按照不同单个类型的接口来解构，为了处理实际问题，你需要多种代数方法——横跨多种类型的接口族；\n我发现OOP在哲学上是荒谬的，它声称一切都是对象。即使这是真的也不是很有趣——因为说一切都是对象跟什么都没说一样；\n我发现OOP的方法论是错误的，它从类开始，就好像数学应该从从公理开始一样。其实你不会是从公理开始的，而是从证明开始。直到你找到了一大堆相关证据后你才能归纳出公理，然后以公理结束。在程序设计方面存在着同样的事实：你要从有趣的算法开始。只有很好地理解了算法，你才有可能提炼出接口以让其工作。\n\n\n<———>\n下面，我们再来看C++的发明者Bjarne Stroustrup，在1998年IEEE采访时的一段话（全篇见这里），下面是其中的几段话：（我的翻译如下）\n …\n 阅读全文 Read More\n\n (37 人打了分，平均分： 4.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些非常有意思的杂项资源",
    "url": "https://coolshell.cn/articles/3013.html",
    "date": "2010-09-28T08:38:34+08:00",
    "description": "\n下面是一些最近在互联网上看到的一些各式各样的资源和文章，当然，都是英文社区的，本来想每一个写一篇文章，但是觉得一篇文章一句话真没劲，所以，把这些东西合并写成一篇文章，这样有利于减轻本站的负载，也有利于节省网络带宽，同样，也就节省了能力和电力，因此也就很环保，很低碳。呵呵。\n\n先是一个《Windows Internal》第五版的第五章的电子版（英文的），你可以在这里下载。关于其它一些电子书，你可以看看本站的这篇文章《免费电子书列表》、《非常不错的编程技术教程》、《超过100本的linux免费书籍》和《20本最好的Linux免费书籍》\n\n→\n\nhttp://www.3dtin.com/是一个用纯Javascript搞的一个3D作图的网站，Javascript是越来越强大了。这个演示可以让你看到以后Web应用的潜力。关于Javascript的一些东西，你可以参看本站的这些文章《JS1K 演示》、《又一个Javascript试验田》、《一个Windows 3.1的Web网站》、《哥是玩程序的》。\n\n→\n\n说到这些很酷很炫的东西，大家一定会想到使用Flash，不过，目前的Flash正在受到HTML5的强力挑战，目前，对于HTML5的展示网站很多，让我们看到了HTML5完全可以做出Flash的样子，比如前些天本站说到的这个演示，还有给大家展示的纯HTML5的小游戏，不过，那些都是一些演示和展示罢了。今天在网上看到一个更强大的HTML5游戏，相当有可玩性，大家不妨一去试玩：http://www.phoboslab.org/biolab/\n\n\n→\n\nHTML5 可以应用的还不只是游戏，这不，有文章指出，用VexFlow还可以很轻松地在网页上发布乐谱。而这个网页还可以让你制作Hi-PoP音乐。\n\n\n→\n\n说到Web开发，就得要提CSS了，这里有一个在线编辑CSS的网站，很不错，http://css3.mikeplate.com/。关于CSS和Web开发的一些文章，你可以查看本站的CSS的Tag。现在，这种在线的东西是越来越多了，比如：《Emacs配色在线生成器》、《Coderun.com 在线开发IDE》、《正则表达式生成器》、《Ajax开发利器UIzard》、《一个在线的画UML图的网站》。\n\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 2.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "Windows编程革命简史",
    "url": "https://coolshell.cn/articles/3008.html",
    "date": "2010-09-27T08:51:30+08:00",
    "description": "\n源文：A Brief History of Windows Programming Revolutions （Ron Burk）\n首先，是 Windows API 和 DLL Hell。（译注：DLL Hell——DLL灾难，就是微软的DLL升级时因为不同版本可能造成应用程序无法运行的灾难，首当其冲的是COM编程，相信大家都知道某些木马或是病毒更改了一些系统的DLL可以导致整个Windows不举，这就是DLL Hell） 于是，第一次革命是DDE——我们可以创建一个状态条在上面显示Microsoft的股票价格（译注：Dynamic Data Exchange，工作原理是： 甲方申请一块全局内存，然后把内存指针postmessage到乙方，乙方根据收到的指针访问那块全局内存）。\n在那个时候，Microsoft 创建了 VERSIONINFO 资源来管理版本信息，当然，是用来消除DLL Hell。但是，另一个微软内部的小组发现了DDE的致命缺陷：这不是他们做的！\n为了解决这个问题，他们创造了OLE（很像DDE，只是名字不一样），而且，我还记得在一次 Microsoft 大会上，某个微软的演讲者正式宣布—— Windows API 马上就会被 OLE API 所重写并取代，我还盲目地相信了这一说法。而且，所有的在图形界面的控件都会是OCX，那是OLE引入的接口，同样，其目的是为了消除DLL Hell。相信大家都记得，那个时候，我们是怎么地梦想着有一天，我们的应用程序（当然是非常大的程序）可以完全地被嵌入到Word文档中。\n然而，在Microsoft的某处，Microsoft有些人开始信仰 C++，其确信MFC的出现并可以解决所有的一切问题，但是，因为历史原因，OLE并没有出局，其改了一个名字，叫COM，此时，我们立马意识到OLE（以前的DDE？）真正意味着什么——其用精心的版本管理系统来消除DLL Hell。与此同时，Microsoft的一个变节小组发现了一个MFC的致命缺陷：这不是他们做的！\n …\n 阅读全文 Read More\n\n (54 人打了分，平均分： 4.19 )Loading...\n"
  },
  {
    "content": "",
    "title": "代码重构的一个示例",
    "url": "https://coolshell.cn/articles/3005.html",
    "date": "2010-09-25T08:33:59+08:00",
    "description": "\n还记得以前和大家提到过的《各种流行的编程风格》吗？有一些人问我那些编程风格具体是什么样子的。下面是一个代码重构的实例，让我们看看那个流行的编程风格是实践是什么样的。下面的这个实践不是虚构，如有雷同，请对号入座。\n首先，我们有一个表达式如下所示：\ns = 7;\n很明显，这个表达式的变量名太没意义了，很不利于程序的可读性，所以，我们需要取一个有意义的变量名：\nslots = 7;\n很好，不过，那个常量7是hard-code或是一个Magic number，而且，这常量没有名字也不利于代码的可读性啊。再改：\n …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 4.04 )Loading...\n"
  },
  {
    "content": "",
    "title": "HTML5 小游戏展示",
    "url": "https://coolshell.cn/articles/2998.html",
    "date": "2010-09-21T18:48:51+08:00",
    "description": "\n使用 HTML5 的 Canvas可以搞出一些很有趣的东西，如2D图形，位图，动画等。而使用Javascript来操作这些东西，可以设计出很多的小游戏。 下面是一些用HTML5做出来的小游戏，让我想得了我小时候的那些游戏。\n顺祝大家中秋节快乐！以及进入史上最混乱的长假调休。呵呵。\nSinuous\n小心被红点撞上。\n\n超级玛丽卡丁车\nA small but fun racing game built in html5 canvas and javascript.\n\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程时间分配图",
    "url": "https://coolshell.cn/articles/2990.html",
    "date": "2010-09-21T08:19:49+08:00",
    "description": "\n下面是一个程序员coding的时间分配图，原图在这里。\n编程时间分配图\n思考会是一个很重要的过程，当然耽搁拖沓也有可能也是因为没有想好，抽烟/喝咖啡应该也是一种思考，吃点东西是为了让脑子转得更快一点，上网搜索一下灵感可以借鉴一下其它人的想法，抱怨写注释只是一个例子，更多的应该是抱怨加班或是公司的老板。\n如果需要加上点什么的话，我觉得应该加点“重构”，“编译”，“调试”，当然，他们都可以算在coding里。不过，我觉得更应该还有：“开会”，“争吵/解释”，“打断”，这些比重也是很大的。\n所以，下面是我个人认为比较实际的版本：\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 3.95 )Loading...\n"
  },
  {
    "content": "",
    "title": "用脚本实现哄宝宝睡觉(Demo)",
    "url": "https://coolshell.cn/articles/2987.html",
    "date": "2010-09-20T17:03:27+08:00",
    "description": "\n去年，本站发布了一篇文章《用脚本哄宝宝睡觉》，具体想法是把摇篮和光驱连一起，然后用脚本把光驱弹出和收入以实现驱动摇篮。今天在网上看到一个具体实现，呵呵。看下面的视频：\n\n (21 人打了分，平均分： 4.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "代码优化概要",
    "url": "https://coolshell.cn/articles/2967.html",
    "date": "2010-09-20T08:22:31+08:00",
    "description": "\n本文译自Dr. Dobb’s Blogger的Walter Bright写的《Overlooked Essentials For Optimizing Code\n》\n\n我编写程序至今有35年了，我做了很多关于程序执行速度方面优化的工(一个示例)，我也看过其它人做的优化。我发现有两个最基本的优化技术总是被人所忽略。 注意，这两个技术并不是避免时机不成熟的优化。并不是把冒泡排序变成快速排序（算法优化）。也不是语言或是编译器的优化。也不是把 i*4写成i<<2 的优化。 这两个技术是：\n\n使用 一个profiler。\n查看程序执行时的汇编码。\n\n使用这两个技术的人将会成功地写出运行快的代码，不会使用这两个技术的人则不行。下面让我为你细细道来。\n使用一个 Profiler\n我们知道，程序运行时的90%的时间是用在了10%的代码上。我发现这并不准确。一次又一次地，我发现，几乎所有的程序会在1%的代码上花了99%的运行时间。但是，是哪个1%？一个好的Profiler可以告诉你这个答案。就算我们需要使用100个小时在这1%的代码上进行优化，也比使用100个小时在其它99%的代码上优化产生的效益要高得多得多。 …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.69 )Loading...\n"
  },
  {
    "content": "",
    "title": "25个jQuery的编程小抄",
    "url": "https://coolshell.cn/articles/2964.html",
    "date": "2010-09-19T08:14:12+08:00",
    "description": "\n以前本站向大家介绍过“程序员小抄大全”，这里是25个jQuery的小抄（有一些在墙外），有的还可以设置成你的电脑桌面。这些东西可以让你很快速地记得一些常用的东西，就好像软件的快捷键一样。希望它们对你会有帮助。\n1. jQuery 1.2 Cheat-sheet [PNG]\n\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "Waterfall 软件工程",
    "url": "https://coolshell.cn/articles/2941.html",
    "date": "2010-09-15T08:42:42+08:00",
    "description": "\n《Royce, Winston (1970), “Managing the Development of Large Software Systems”, Proceedings of IEEE WESCON 26 (August): 1–9. 》，这篇文章向你说明了软件工程鼻祖“Waterfall”的工程模型，这是40年前的论文，其中的十张插图很有强大，抽出来，让我们来看看什么叫Waterfall软件工程。\n首先，让我先看一下小的程序是怎么做的，呵呵，很简单，两步。\n\n接下来，就是我们最经典的Waterfall软件工程模型了，用户需求，软件需求，需求分析，设计，编码，测试，运维。\n\n …\n 阅读全文 Read More\n\n (14 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "Mozilla的一个BUG",
    "url": "https://coolshell.cn/articles/2936.html",
    "date": "2010-09-14T07:57:12+08:00",
    "description": "\n以前，本站给大家介绍过一些BUG，如：《谷歌Chrome取消”http://”》，《Go语言的Issue 9》和《telnet的一个Bug》。今天，和大家再说一个Mozilla的Bug，这个Bug的网址在这里：https://bugzilla.mozilla.org/show_bug.cgi?id=579522\n这个Bug的标题是这样的：“Buy cots for the JS interns” （为JS实习生买一些轻便小床），并说明“This bug is not actually a joke.”，这个BUG估计是在抱怨在Mozilla工作的实习生太辛苦了。在后面的跟贴中，很多人都提到了V8，呵呵。看来，大家还是在嘲笑Mozilla更多一些，大家不妨前往一看。\nMozilla的firefox还是很让人失望的，作为一个Linux下默认的浏览器，其居然让Firefox的Windows版比Linux版更强大，在firefox 4.0 beta中居然出现了Windows Only的东东，着着实实地伤了很多firefox的粉丝的心，正因为这个，整个社区都开始BS并嘲笑Mozilla，并转投Chrome阵营。\n当然，最后这个BUG被fix了，有图为证：\nMozilla的Bug fixing\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "你准备使用 HTML 5 吗？",
    "url": "https://coolshell.cn/articles/2926.html",
    "date": "2010-09-09T14:27:06+08:00",
    "description": "\n现在做Web上的效果，主要是有三种方法，Flash，Javascript 和 HTML5。Flash就不用多说了，Javascript的效果也越来越猛了，如果配上HTML5，那就如虎添翼了。先看看下面的这个HTML5的演示。其使用了HTML5的Canvas元件，把鼠标移上去看看吧（最好在Chrome下浏览）。源链接在这里（在这里展示有点小，还是在那边全屏的看好一点）\n\n下面是一个大图，来自这里（点击看大图）。其“抱怨”了为什么HTML怎么都要管？呵呵。其分成三块：\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "Did You Know?",
    "url": "https://coolshell.cn/articles/2917.html",
    "date": "2010-09-06T23:08:53+08:00",
    "description": "\n下面这个短片可能Too Old了，不过我今天才看到，很不错，转到这里，让更多的人都能看到。\n这是个信息爆炸飞速发展的年代，逆水行舟，不进则退。在这一组组的数据中让我们这班新生代年轻人反思自身所要背负和面对的压力和挑战！极有深度的短片，整理出来的数据实在是叫人震惊，生活在这个科技高速发展的时代既是种荣幸，又很有压力，对“学校里教得知识很多就是过时的”深有体会！！\nDid You Know? 3.0版\n\nDid You Know? 4.0版\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "消费者的消费观",
    "url": "https://coolshell.cn/articles/2913.html",
    "date": "2010-09-03T17:13:43+08:00",
    "description": "\n\n原文：http://theoatmeal.com/blog/apps\n\n星巴克：这是你的venti-soy-whipped-frappa-lardy-lattechino，也就$7.15，你需要加点糖吗？只需要再加$1.95。\n消费者：绝对要加。让我们的血糖值高到月亮上！\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.58 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些鲜为人知的编程事实",
    "url": "https://coolshell.cn/articles/2909.html",
    "date": "2010-09-03T08:55:37+08:00",
    "description": "\n文章来源：http://dotmac.rationalmind.net/2010/08/some-lesser-known-truths-about-programming/\n我的程序员经历让我明白了一些关于软件开发的事情。下面是一些在编程中可能会让人感到诧异的事情：\n\n一个程序员用了大约只用了10%-20%的时间来编码，而且大多数程序员，无论他的水平如何，其平均每天只有10-12行的代码最终会进入最终的软件产品中。这是因为，优秀的程序员会花费90%的时间来思考、调查、研究最佳的设计。而糟糕的程序员则会花费90%的时间来调试代码，并随意地改动代码并尝试让代码工作起来。\n\n“A great lathe operator commands several times the wage of an average lathe operator, but a great writer of software code is worth 10,000 times the price of an average software writer.” –Bill Gates\n“一个优秀的车工其工资是一个普通车工的好几倍，但是一个优秀程序员写出来的代码比一个普通程序员要值钱一万倍。——比尔盖茨”\n\n一个好的程序员比一个普通的程序员多十倍的生产率。而一个优秀的程序员的生产率则比普通程序员多20-100倍。这并不是夸张（自从上世纪60年代的研究一直表明这是一个事实）。一个糟糕的程序员并不只是没有产出的——他们并不仅是完成不不工作，而且还会制造出大量的让别人头痛并要去解决的麻烦。\n\n …\n 阅读全文 Read More\n\n (21 人打了分，平均分： 3.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "实用Android开发工具和资源精选",
    "url": "https://coolshell.cn/articles/2853.html",
    "date": "2010-08-26T08:43:01+08:00",
    "description": "\n出处：A Useful Selection of Android Developer Tools and Resources\n在google、开源平台，和来自移动电话制造商HTC,Samsung和Sony Ericsson的支持下，Android平台在市场占有率上相比去年取得的886%增长！如果我只看增长率，IPhone据统计才有61%的增长。这些数据可以给你关于两个平台流行度的印像，但是事实上，这些数据告诉了智能机开发员的谁才是真正的赢家。在时下，智能机越来越流行，因此成为一个快速增长的Android平台的智能机开发人员将会是一个不错的选择。\n相比较其他的平台，Android不依赖于任何约束第三方应用程序的私有的操作系统（题外话：美国最近宣布对于IPhone的破解和越狱是合法行为），Android本身就是开源的。由于开源，Android有巨大的开发社区支持。各种个样的例子和教程，GUI素材，和开发工具下载。几乎所有的都是免费提供的。我们选出接近20个可以免费或开源的，工具，资源，开发指南。希望这些资源能给你的Android应用带来帮助。\n 相关文章参看:\n\nAndroid App Developers GUI Kits, Icons, Fonts and Tools →\niPhone and iPad Development GUI Kits, Stencils and Icons →\nMobile Web and App Development Testing and Emulation Tools →\n14 Free Mobile Application Development Icon Sets →\n\n\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.93 )Loading...\n"
  },
  {
    "content": "",
    "title": "使用grep恢复被删文件内容",
    "url": "https://coolshell.cn/articles/2822.html",
    "date": "2010-08-24T08:56:24+08:00",
    "description": "\n在Unix/Linux下，最危险的命令恐怕就属rm命令了，每次在root下使用这个命令的时候，我都要盯着命令行看上几分钟才敢把回车敲下去。以前，看到同事在脚本中使用rm命令 —— rm {$App_Dir}/* 。因为脚本没有判断变量$App_Dir是否为空，结果，在一次用root操作的时候，整个操作系统一下就不见了，还好只是开发机。从此，我们大家都再也不敢使用rm命令了。\n这里给大家介绍一个小技巧用来恢复一些被rm了的文件中的数据。我们知道，rm命令其实并不是真正的从物理上删除文件内容，只过不把文件的inode回收了，其实文件内容还在硬盘上。所以，如果你不小删除了什么比较重要的程序配置文件的时候，我们完全可以用grep命令在恢复，下面是一个恢复示例：\ngrep -a -B 50 -A 60 'some string in the file' /dev/sda1 > results.txt\n说明：\n\n关于grep的-a意为–binary-files=text，也就是把二进制文件当作文本文件。\n-B和-A的选项就是这段字符串之前几行和之后几行。\n/dev/sda1，就是硬盘设备，\n> results.txt，就是把结果重定向到results.txt文件中。\n\n如果你幸运的话，你就可以看到被恢复的内容了。这正是Unix的简单哲学（详见《Unix传奇下篇》）—— 所有的设备都是文件。\n当然，我还是建议你把root用户的rm的命令用alias换成别一个脚本，那个脚本会帮你把删除的文件放到某个地方。\n (19 人打了分，平均分： 3.53 )Loading...\n"
  },
  {
    "content": "",
    "title": "史上最烂的超级玛丽",
    "url": "https://coolshell.cn/articles/2834.html",
    "date": "2010-08-23T15:20:21+08:00",
    "description": "\n啥也不说了，自己访问一下吧，F是跳，D是加速，回车的是开始，还挺好玩，简单是简单了点，但好歹也是用Java写的，也是Web的，呵呵。\nhttp://meatfighter.com/mario/mario.html\n\n你还见过更烂的吗？\n (13 人打了分，平均分： 2.92 )Loading...\n"
  },
  {
    "content": "",
    "title": "两个教程：Socket和HTML5",
    "url": "https://coolshell.cn/articles/2829.html",
    "date": "2010-08-23T10:47:28+08:00",
    "description": "\n给大家介绍两个教程，一个是关于Socket编程的，一个是关于HTML5的。\n关于Socket，相信大家都知道这个是用来做TCP/IP网络编程的，其由FreeBSD引入，现在，只要你相做网络编程，你必然会使用到它。这里有一个叫Beej’s Guide to Network Programming 的网站，非常不错的一个教程。在其主页上显示有中译版，不过很可惜，打不开。好像网络有很多转载，你可以Google一下。\n另一个是关于HTML5的众多标签，大家可以访问这个叫做“HTML5 Peeks, Pokes and Pointers”的网站，其就像一个速查手册一样，你可要查阅HTML5的那些BT的tag，比如：多媒体，画布，地理，表单，等等。\n希望大家喜欢，不妨你也说说你知道的相关的一些教程。\n (11 人打了分，平均分： 2.45 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员版的凡客",
    "url": "https://coolshell.cn/articles/2806.html",
    "date": "2010-08-12T15:24:48+08:00",
    "description": "\n现在“凡客诚品”的PS风已经成为了一场运动，详见这里：http://bigfools.com/2010/08/6634.html。这两天，公司内部要出期刊，正好下班没事，于是跟着这股网风，为公司的期刊做了一个插图，那些语句着实花了我很多时间。用PPT乱做的，希望大家喜欢。呵呵。\n\n欢迎你留下你的版本，尤其是那些语句。\n (22 人打了分，平均分： 3.64 )Loading...\n"
  },
  {
    "content": "",
    "title": "C技巧：结构体参数转成不定参数",
    "url": "https://coolshell.cn/articles/2801.html",
    "date": "2010-08-10T08:24:52+08:00",
    "description": "\n下面这段程序是一个C语言的小技巧，其展示了如何把一个参数为结构体的函数转成一个可变参数的函数，其中用到了宏和内建宏“__VA_ARGS__”，下面这段程序可以在GCC下正常编译通过：\n#include <stdio.h>\n\n#define func(...) myfunc((struct mystru){__VA_ARGS__})\n\nstruct mystru { const char *name; int number; };\n\nvoid myfunc(struct mystru ms )\n{\n  printf(\"%s: %d\\n\", ms.name ?: \"untitled\", ms.number);\n}\n\nint main(int argc, char **argv)\n{\n  func(\"three\", 3);\n  func(\"hello\");\n  func(.name = \"zero\");\n  func(.number = argc, .name = \"argc\",);\n  func(.number = 42);\n  return 0;\n}\n\n从上面这段程序，我们可以看到一个叫 myfunc的函数，被func的宏改变了，本来myfunc需要的是一个叫mystru的结构，然而通过宏，我们把struct mystru的这个参数，变成了不定参数列表的一个函数。上面这段程序输出入下，\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "JS1K 演示",
    "url": "https://coolshell.cn/articles/2785.html",
    "date": "2010-08-09T13:51:37+08:00",
    "description": "\n以前本站发布过很多和Javascript相关的东西，如：《又一个Javascript试验田》、《一个Windows 3.1的Web网站》、《哥是玩程序的》。今天要介绍另外一组，先看下面的这个Javascript特效（在IE下无法正常工作），你可以用Chrome查看，很炫。不过最炫的是其源码，非常的简单，不超过1K。如果你要知道这个效果的原理，这里有一个教程。这里有个网站：JS1K Demo， 这个站上主要收集一些Javascript不大于1K的程序。\n \n停止演示开始演示\n下面是其源码：\n…\n 阅读全文 Read More\n\n (12 人打了分，平均分： 2.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "微软最囧的UI",
    "url": "https://coolshell.cn/articles/2792.html",
    "date": "2010-08-09T08:36:47+08:00",
    "description": "\n以前，本站介绍过一些Ugly的UI，今天我们来看看微软Windows里的“画笔”程序，看看微软的某个功能干了什么样的囧事。\n我打开了一个比较大的图片，有点太大了，我想缩小一下看看，很好，微软在菜单项里供了Zoom选项，其中有一个Custom（自定义），挺不错的。\n\n但是，当我看到这个自定义的对话框后，我彻底无语了，大哥你是怎么想的啊……\n …\n 阅读全文 Read More\n\n (22 人打了分，平均分： 3.91 )Loading...\n"
  },
  {
    "content": "",
    "title": "免费电子书列表",
    "url": "https://coolshell.cn/articles/2775.html",
    "date": "2010-08-04T18:37:59+08:00",
    "description": "\n在StackOverflow上，有人要打算收集个免费电子书的列表，结果很快就有人分享了一个列表。很不错，我就转过来了。原帖的地址在http://stackoverflow.com/questions/194812/list-of-freely-available-programming-books （注意：有些连接可能会被墙掉）\nList of Free Programming books (compiled): Meta-List\n\nHow to Design Programs: An Introduction to Computing and Programming\n25 Free Computer Science Ebooks\nFree Tech Books\nMindView Inc (List of Free Books)\nWikibooks: Programming\nCheat Sheets (Free)\nCodePlex List of Free E-Books\nBook Training – On Video!\nSofware Program Managers Network – Free EBooks\nEBook Share @ linbai.info\nFreeBooksClub.Net\nTheassayer.org (Free Online books)\nO’Reilly’s Open Books Project\nTechBooksForFree.com\nGalileo Computing (Free Downloadable German Books)\n\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 3.94 )Loading...\n"
  },
  {
    "content": "",
    "title": "最佳编程语录",
    "url": "https://coolshell.cn/articles/2753.html",
    "date": "2010-08-02T08:15:45+08:00",
    "description": "\n以前本站发布过《22条经典的编程引言》、《编程引言补充》、《Linus Torvalds 语录》还有《十条不错的编程观点》。今天向大家介绍“最佳编程语录”，条条都是很不错的语录，如同我们的太阳，照亮了我们的方向（所以我们选用了一个红色的图片，希望能够通过五毛们的网络审查）。其中只有一两条在以前本站发布过的文章中出现过。这篇文章的出处在这里，下面是“Neo”和“陈皓”的翻译，我们的翻译水平有限，所以，我们提供了中英文对照，有不当之处，还请各位指正。\nA good programmer is someone who looks both ways before crossing a one-way street. — Doug Linder, systems administrator\n好的程序员这样一类人，这类人在横穿一条单行道前都要先看一下路两边。– Doug Linder, 系统管理员\nA most important, but also most elusive, aspect of any tool is its influence on the habits of those who train themselves in its use. If the tool is a programming language this influence is, whether we like it or not, an influence on our thinking habits. — Edsger Dijkstra, computer scientist\n关于工具，一个最重要的，也是最不易察觉的方面是，工具对使用此工具的人的习惯的潜移默化的影响。如果这个工具是一门程序语言，不管我们是否喜欢它，它都会影响我们的思维惯式。 –Edsger Dijkstra, 著名的计算机科学家。\nBeing abstract is something profoundly different from being vague… The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise. — Edsger Dijkstra\n抽象和模糊完全地不同，抽象的目的并不是把事情变模糊，而去创建一个新的语义层，在那里是绝对精确的描述。 — Edsger Dijkstra\nBesides a mathematical inclination, an exceptionally good mastery of one’s native tongue is the most vital asset of a competent programmer. — Edsger Dijkstra\n除了数学爱好，对于一个有能力的程序员来说，出色地掌握自己的母语是最宝贵的财富。– Edsger Dijkstra\n …\n 阅读全文 Read More\n\n (26 人打了分，平均分： 3.88 )Loading...\n"
  },
  {
    "content": "",
    "title": "五种应该避免的代码注释",
    "url": "https://coolshell.cn/articles/2746.html",
    "date": "2010-07-28T08:48:15+08:00",
    "description": "\n在酷壳，有很多文章都提到了代码注释，如：《十条不错的编程观点》、《优质代码的十诫》、《整洁代码的4个提示》、《惹恼程序员的十件事》等等。今天，某国外的程序员在这里列举五种应该避免的程序注释，我觉得比较有道理，但我觉得有少数几个观点也并不绝对。所以，我把原文的这五种应该避免的程序注释罗列在下面，并放上原作者和我的个人观点作为比较。希望对大家有用。\n一、自恋型注释\n（注：原文为Proud，我觉得“自恋”更好一点）\n\npublic class Program\n{\n    static void Main(string[] args)\n    {\n        string message = \"Hello World!\";  // 07/24/2010 Bob\n        Console.WriteLine(message); // 07/24/2010 Bob\n        message = \"I am so proud of this code!\"; // 07/24/2010 Bob\n        Console.WriteLine(message); // 07/24/2010 Bob\n    }\n}\n原文：这样的程序员对于自己的代码改动非常骄傲和自恋，所以，他觉得需在在这些自己的代码上标上自己的名字。其实，一个版本控制工具（如：CVS或Subversion）可以完整地记录下所有的关于代码的改动的和作者相关的一切信息，只不过不是那么明显罢了。\n陈皓：我同意原文的观点。在我的团队里也有这样的事情发生。有段时间我认真思考过这样的事情，是否应该把这样的事情在代码中铲除出去。后来，我觉得，允许这样的行为并不一定是坏事，因为两点：\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.26 )Loading...\n"
  },
  {
    "content": "",
    "title": "HTML5 和 Flash 之争",
    "url": "https://coolshell.cn/articles/2735.html",
    "date": "2010-07-27T08:00:04+08:00",
    "description": "\n文章来源\n二者之间的竞争会演变成为一场“战争”吗？（现在甚至出现了可以把Flash转成Javascript/HTML5的工具）\n首先需要弄清楚二者之间最主要的区别，HTML 是一种语言（超文本标记语言 – HyperText Markup Language），而 Flash 是 Adobe（其收购了Macromedia）公司的一个浏览器插件（Plugin）。HTML5 目前还是 W3.org 规范中一个草案，这意味着其还没有最终定案，希望到 2012 年这项工作能够完成。\n以下是二者各自的一些特点：\nHTML5\n这个新的技术更为易学和易用，比较 .FLA 和 .SWF 文件更容易编辑。并且基本上过去所有由 Flash 才能制作的动画效果都能够使用 JS + HTML5 + CSS 3 来完成，不过工作量可能会更大一些，不仅文件尺寸会增大，性能方面也会有影响。\n以前为 Web 表单设定风格我们一定需要使用到 JavaScript， 但是 HTML5 中的 contenteditable 属性让我们可以做得更多。一些新的输入类型（Types of Inputs）也被加入到 HTML5 中，如：电子邮件，数字，值范围等等。\n用户不仅仅需要一个支持 HTML5 的浏览器，还需要 CCS 3 和新的 JavaScript 引擎的支持。\n免费（不包括第三方字体和音频视频等等）\n更好地移动设备支持（HTML5 正在被运用于 iPhone，iPod，iPad 和 Android 应用的开发）\n拖拽，事实上这不是 HTML5 的一部分，但是在新版本的 GMail 中，从桌面拖拽文件到浏览器能够用 HTML5 很好地实现。对于 Flash 我不知道这是否可以实现？\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "计算机编程简史图",
    "url": "https://coolshell.cn/articles/2724.html",
    "date": "2010-07-26T07:54:16+08:00",
    "description": "\n这个图片太经典了，本来想翻译的，后来觉得这么经典的图片可能早已被人翻译了，简单的Google一下，果然有人翻译了。那我就把英文版和中文版都转过来吧。我们可以看到，其中很大一部分人都和Unix有着不解之缘（参见《Unix传奇上篇，Unix传奇下篇》）\n\n英文原版\n中文翻译版\n\n什么也不说了，直接上图（图片比较大，单击图片看大图）\n\n计算机编程简史图（英文版） \n\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 3.89 )Loading...\n"
  },
  {
    "content": "",
    "title": "苹果开发工具Xcode 4 第二预览版",
    "url": "https://coolshell.cn/articles/2719.html",
    "date": "2010-07-23T17:40:00+08:00",
    "description": "\n今天，苹果公司向开发者发布Xcode 4 Preview 2，这是一个IDE用来开发在Mac，iPhone，iPad上应用程序的工具。在这个第二预览版中，主要有以下新的功能：\n\n这个版本不像以往的版本有太多的窗口，其把以前那些窗口督统一起来，只有一个窗口。\n集成了Interface Builder（以前这个东东和Xcode是两个东西）\nXcode Assistant 可以让你的设计和代码同时呈现。\nLLVM Compiler 2.0。LLVM是下一代的编译器，其完全支持C，C++和Objective C，而且编译的速度和编译成的执行速度都快于GCC。同时也引入了LLDB做为新的调试器。\n多版本编译。这个功能可以让你在IDE中编译两个版本的代码，而且可以和Subversion或Git集成。\n\n你可以访问 What’s New 来看看具体的细节。\n苹果开发工具Xcode 4 Preview 2\n (9 人打了分，平均分： 3.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "检查素数的正则表达式",
    "url": "https://coolshell.cn/articles/2704.html",
    "date": "2010-07-23T08:22:27+08:00",
    "description": "\n一般来说，我们会使用正规表达式来做字符串匹配，今天在网上浏览的时候，看到了有人用正则表达式来检查一个数字是否为素数（质数），让我非常感兴趣，这个正则表达式如入所示：\n检查素数与否的正则表达式 \n要使用这个正规则表达式，你需要把自然数转成多个1的字符串，如：2 要写成 “11”， 3 要写成 “111”, 17 要写成“11111111111111111”，这种工作使用一些脚本语言可以轻松的完成。\n一开始我对这个表达式持怀疑态度，但仔细研究了一下这个表达式，发现是非常合理的，下面，让我带你来细细剖析一下是这个表达式的工作原理。\n首先，我们看到这个表达式中有“|”，也就是说这个表达式可以分成两个部分：/^1?$/ 和 /^(11+?)\\1+$/\n\n第一部分：/^1?$/， 这个部分相信不用我多说了，其表示匹配“空串”以及字串中只有一个“1”的字符串。\n第二部分：/^(11+?)\\1+$/，这个部分是整个表达式的关键部分。其可以分成两个部分，(11+?) 和\\1+$，前半部很简单了，匹配以“11”开头的并重复0或n个1的字符串，后面的部分意思是把前半部分作为一个字串去匹配还剩下的字符串1次或多次（这句话的意思是——剩余的字串的1的个数要是前面字串1个数的整数倍）。\n\n可见这个正规则表达式是取非素数，要得到素数还得要对整个表达式求反。通过上面的分析，我们知道，第二部分是最重要的，对于第二部分，举几个例子，\n …\n 阅读全文 Read More\n\n (43 人打了分，平均分： 4.51 )Loading...\n"
  },
  {
    "content": "",
    "title": "Kent Beck 谈单元测试和持续部署",
    "url": "https://coolshell.cn/articles/2681.html",
    "date": "2010-07-22T08:00:23+08:00",
    "description": "\n文章来源\n2010年7月2日，Roy Osherove 和 Kent Beck 在 blog.typemock.com 进行了一次对话，话题涉及单元测试（Unit Testing），JUnit Max（Kent 开发的一个单元测试的 Eclipse Plugin，不免费），和面向初创企业的精益方法（Lean Startups）。\n单元测试和 JUnit Max\n作为软件开发方法学的大师、极限编程XP的创始人、敏捷宣言的创始人之一，Kent Beck 一直在努力最大化地利用单元测试的价值，他说一些程序员仍然认为单元测试并不是他们的工作，但是单元测试确实能够提高软件的质量。目前他正在开发 JUnit Max，这是一个 Eclipse plugin，每当程序员保存一个 Java 源文件的时候，JUnit Max 就会运行测试并报告反馈信息。测试中的错误将会如同编译错误一样被报告给程序员。JUnit Max 的核心思想是测试错误应该和编译错误一样被 IDE 报告给程序员，程序员不需要额外的菜单选项或者运行其他的工具来运行测试。特别是那些经常失败的测试，对于程序员来说是非常有价值的反馈信息。在测试驱动开发（Test Driven Development – TDD）中，我们重复着这样一个循环：“编写一个‘失败’的测试（Failing Test）” – “编码实现功能以便让测试通过”，随着开发的深入，测试越来越丰富，测试能够反馈给程序员的信息也越来越多，它们可以帮助程序员找出那些需要改进的代码。JUnit Max 能够缩短这个循环的周期，因为它更为频繁地运行测试和提供反馈。Roy 问道：“当你一个人编码的时候，你是否严格地遵循 TDD，即一定要先写测试，然后写实现代码。我个人发现这并不是一件容易做到的事情，特别是当一个人编码的时候。” Kent 回答：“视情况而定，有时候并不需要死板地遵循 TDD，比如当我在做一些探索性或者说实验性的编码时，并不需要写测试，因为我只是想尝试一下某些功能和特性。”\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.73 )Loading...\n"
  },
  {
    "content": "",
    "title": "在Javascript里写Python",
    "url": "https://coolshell.cn/articles/2688.html",
    "date": "2010-07-21T08:17:39+08:00",
    "description": "\n以前，本站介绍过去一种写HTML和CSS的新方法，以一种杂交式的代码，昨天给大家介绍了.NET代码和Python及Ruby代码的互相转换工具，但是这个世界可能比我们想像的还疯狂。IronPython 是一个在.NET平台上运行Python的东西，就像那些在JVM上运行其它语言的东东一样。当然，IronPython最邪恶的事情并不是在.NET上运行Python，而是在Javascript里写Python的语法。这个畸形混血儿的网址在这里（请注意翻墙）。\n使用这个玩意很简单，下面，让我们看看这个混血儿长啥样？\n首先，你需要链接一个js文件：\n\n<script src=\"http://gestalt.ironpython.net/dlr-latest.js\" type=\"text/javascript\"></script>\n然后，让我们看看如何写一个按钮事件：\n\n<input id=\"button\" type=\"button\" value=\"Say, Hello!\" />\n<script type=\"text/python\">\n  def button_onclick(s, e):\n      window.Alert(\"Hello from Python!\")\n  document.button.events.onclick += button_onclick\n</script>\n\n你对此事怎么看？欢迎留下你的看法。\n (10 人打了分，平均分： 3.20 )Loading...\n"
  },
  {
    "content": "",
    "title": ".NET代码转换器",
    "url": "https://coolshell.cn/articles/2672.html",
    "date": "2010-07-20T10:24:22+08:00",
    "description": "\n想把.NET的代码（C#和VB.NET)互转吗？或是转成Python或Ruby吗？在 http://www.developerfusion.com/ 站点上有这样的在线工具。点击下面的链接你可以使用这些工具。当然，这些工具也有很多BUG。\n\n把 C# 转成 VB.NET\n把 C# 转成 Python\n把 C# 转成Ruby\n把 VB.NET 转成C#\n把 VB.NET 转成 Python\n把 VB.NET 转成 Ruby\n\n老实说，我并不太清楚这些工具有什么用，看似很useless。难道是为了用来学习新的语言？就像Google的Translator的一样？就像一个并不懂中文的老外可以用Google Translator在其Facebook中整点中文耍耍酷一样，难道说，一个C#的程序员可以用这样的工具和一个Python的程序员也耍耍酷？各位看客觉得这个东西有意义吗？\n不过，有一点我可以确定，如果有工具把Unix/Linux下的C源码和Windows下的C源码相互自动转换，估计这会是相当划时代的，因为，这应该会让那些什么Wine或Cygwin之类的东西都统统会成为历史了。不过，这样的东西在实现上又将会有多么大的难度（OS系统API的相互转换），这个事会有可行性吗？\n (12 人打了分，平均分： 3.58 )Loading...\n"
  },
  {
    "content": "",
    "title": "浏览器正则表达式检查插件",
    "url": "https://coolshell.cn/articles/2667.html",
    "date": "2010-07-20T08:10:40+08:00",
    "description": "\n以前本站介绍过一个在线的《正则表达式生成器》，下面是两个在浏览器中检查正则表达式的插件，Firefox的和Chrome的，希望对你有用。\n1）Firefox：Regular Expressions Tester\nFirefox正规则表达式检查插件Regular Expressions Tester\n\n2）Chrome：Regular Expression Checker\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "五大基于JVM的脚本语言",
    "url": "https://coolshell.cn/articles/2631.html",
    "date": "2010-07-19T19:40:42+08:00",
    "description": "\n还记得以前本站的一篇文章《如何在Google App Engine上运行PHP》吗，其实那是借用 Quercus， 一个 100% 的用Java 实现的一个 PHP 引擎。今天，这样的东西太多了，能运行在Java的虚拟机JVM上的程序意味着有天然的跨平台性，现在JVM并不单单只能运行Java程序，在JVM上出现了若干使用Java虚拟机运行的脚本程序，比如什么PHP, Python, Ruby等等，这里有一篇文章评论了在JVM上的可以运行的排名前五脚本语言。他们分别是：\n\n Groovy。构建在强大的Java语言之上 并添加了从Python，Ruby和Smalltalk等语言中学到的诸多特征，为Java开发者提供了现代最流行的编程语言特性，而且学习成本很低（几乎为零），在开发Web，GUI，数据库或控制台程序时， 通过减少框架性代码 大大提高了开发者的效率。支持单元测试和模拟（对象），可以简化测试。无缝集成 所有已经存在的 Java对象和类库。直接编译成Java字节码，这样可以在任何使用Java的地方 使用Groovy。\nJRuby。一个纯Java实现的Ruby解释器。通过JRuby，你可以在JVM上直接运行Ruby程序，调用Java的类库。很多Java编写的Ruby IDE都是使用JRuby来解释语法的。\n Scala。一种多范式的编程语言，设计意图是要整合面向对象编程和函数式编程的各种特性。Scala编程语言近来抓住了很多开发者的眼球。它看起来像是一种纯粹的面向对象编程语言，而又无缝地结合了命令式和函数式的编程风格。Scala的名称表明，它还是一种高度可伸缩的语言。Scala的设计始终贯穿着一个理念：创造一种更好地支持组件的语言。\nFantom 。Fantom 前身是 (Fan) 是一个基于 Java 和 .NET 平台的编程脚本引擎，用来在运行时产生 JVM 和 .NET 平台的字节码，该语言是面向对象的，跟 Groovy 和 JRuby 有点类似，可通过特定的接口来集成 Java 的类库。\nJython。Jython由于继承了Java和Python二者的特性而显得很独特。其是一种完整的语言，而不是一个Java翻译器或仅仅是一个Python编译器，它是一个Python语言在Java中的完全实现。Jython也有很多从CPython中继承的模块库。最有趣的事情是Jython不像CPython或其他任何高级语言，它提供了对其实现语言的一切存取。所以Jython不仅给你提供了Python的库，同时也提供了所有的Java类。这使其有一个巨大的资源库。\n\n\n\n下面是一张表格比较了这五大JVM脚本语言：\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "为什么敏捷方法能在软件开发中行之有效？",
    "url": "https://coolshell.cn/articles/2622.html",
    "date": "2010-07-18T10:28:25+08:00",
    "description": "\n文章来源 – Martin Fowler 和 Neal Ford 在 Paris – USI 2010 的演讲\n有很多的书籍讨论敏捷方法是怎样工作的（How it works？），在这个主题演讲中，Martin Fowler 和他的同事 Neal Ford 讨论了敏捷方法能够在软件开发项目中行之有效的原因（Why it works？）。作为敏捷方法的发起人和传道者，Martin Fowler 和 ThoughtWorks 一直试图从理论层面证明敏捷方法的可行性，同时不厌其烦地解答着客户们的各种困惑，正如他们所说，敏捷方法中的很多概念不是特别的直观，除非人们真正实践过一段时间，否则有些概念很难从字面上去完全理解。\nMartin Fowler 谈到一个有意思的现象，那就是今天许多人们口中谈论的敏捷方法，和最初的敏捷方法大相径庭，他把这种现象称为“语义扩散（Semantic Diffusion）”，大意是某种思想在传播的过程中，在逐渐扩散的同时，其语义也渐渐变得模糊。在敏捷开发领域里，“语义扩散”导致的一个问题是，在一些使用敏捷方法的项目或者公司中，我们甚至无法辨别出敏捷方法的影子，原因是很多人没有真正地理解敏捷方法，也就不能够正确地运用和实践，从而也就无法真正了解自己是否能够从敏捷方法中获益。\n\n以下是为什么敏捷方法行之有效的原因：\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 3.89 )Loading...\n"
  },
  {
    "content": "",
    "title": "五个方法成为更好的程序员",
    "url": "https://coolshell.cn/articles/2606.html",
    "date": "2010-07-15T07:53:16+08:00",
    "description": "\n对我来说，一个好的程序员应该是努力去追求尽可能无错的高质量的符合需求的代码实现。 一些人也许认为好的程序员是那些懂得多门编程语言，懂得很牛技术的程序员，是的，这在某些情况下是对的。但归根到底，无论你用什么样的技术，什么样的语言，所有的程序被写出来，其功能都要符合需求以及尽可能地健壮无错和高质量。  我们可以想像一下，如果一个能力普通的程序员有足够多的时间来做测试，那么，其也可以保证他的代码的质量。所以，有一种观点这样认为——要达到质量高的代码只需要有足够多的时间来做测试。这对于以结果为导向的商业软件开发中是可以理解的（我们可以看到那些制汽车的产商在汽车测试上花费的精力和时间就可以明白这一道理）。\n但是，很明显，所有的已经开发出来项目都是在不完美的条件下开发出来的，一般来说，几乎所有的项目都是在最大化程序员软件的开发速度。而且，很多情况下，我们似乎对深度测试和压力测试并不是很关心，所以，我们总是在祈祷并期望那些赶工出来的代码可以正常工作，尤其是在上线的时候，这种唯心主义的价值观更为强烈。  其实，开发速度和软件产品质量并不矛盾。好的程序员并一定是技术强的程序员，而是那些可以在不完美的工作环境下保证软件质量和工作效率的程序员。下面是是五个程序员可以在这种不完美的情况下做得更好的观点（它们都和语言和技术没什么关系，只不过是一种你的工作行为，能够和所有的行业相通），这五个观点也许可以让你成为这样的好程序员。\n \n\n寻找不同观点：程序员好像并不喜欢技术上有异见的人，他们特别喜欢争论各自的技术观点。但是，他们忽略了不同观点的价值。任何事情都有好有坏，我们应该学会在不同观点中学习和平衡。这样才会更多的了解编程和技术。要经常在做事之前问自己和别人，这么做对不对？做完事后问自己，还可不可以改进？努力去寻找别的不同的观点或方法。程序员应该经常上网，经常和同事讨论不同的实现方法，不同的技术观点，这样才能取长补短。然而，在实际工作中，我发现程序员们并不喜欢互相请教，因为请教的人怕别人看不起他，而被请教的人总是先贬低对方的能力，哎……（参看《十个让你变成糟糕的程序员的行为》），如果有这样的文化氛围的话，那也没有关系。上网吧，网上的人谁也不认识谁，可以尽情地问一些愚蠢的问题。呵呵。总之，一定要明白，如果某些事情只有一个观点，那么你一定要怀疑一下了，没有观点和技术方案的比较，没有百花齐放的情况，你就无法知道是否还有更好的东西。真正的和谐不是只有一种声音，真正的和谐而是在不同的观点声音下取长补短，百家争鸣（参看《十条不错的编程观点》）。否则，你永远都不会接受到新的观点，也就无法进步和成长了。\n\n …\n 阅读全文 Read More\n\n (26 人打了分，平均分： 4.19 )Loading...\n"
  },
  {
    "content": "",
    "title": "五个编程语言设计的失误",
    "url": "https://coolshell.cn/articles/2598.html",
    "date": "2010-07-14T08:38:34+08:00",
    "description": "\n在近几年来，编程语言的设计正在经历着类似于“文艺复兴”的过程，这么说主要是基于下面两个事实：1）多核技术推动着PC消费者更多的关注并行程序。2）动态语言的性能越来越好，其性期已经可以足够用来实现互联网服务，并且它们正在走出“脚本语言”阴影。\n这篇文章试图收集最重要的编程语言的设计错误，以便让那些程序语言设计者们在设计新型的编程语言时避免。我避免了一些纠缠不清的有好有坏的问题，如：动态类型或是静态类型。我也省略了那些看起来并不严重，很容易被修改的错误。例如，加入“参量”（Parametric Type），这在Java中已经有了。Sun在发布Java 1.0版后的第八年才加入了这一功能。还有一个最近的例子是 Google Go Language Design FAQ 中说到的：: “Generics may well be added at some point. We don’t feel an urgency for them, although we understand some programmers do.”\n0. Null 指针\n几乎在所有的主流编程语言中，对一个对像的引用可能会是一个空指针，这个错误会引发运行时错误。 C.A.R. Hoare 最近声明向这一“发明”负责，尽管如此，其它许多的设计者们都应该对这样的设计受到批评。下面是 C.A.R Hoare 的“忏悔”：\nI call it my billion-dollar mistake. It was the invention of the null reference in 1965. […] More recent programming languages like Spec# have introduced declarations for non-null references. This is the solution, which I rejected in 1965. – C.A.R. Hoare\n我把它叫做“亿万美元错误”。这个空指针的发明创造来自1965年。…… 现在的编程语言引入了“非空引用”的声明规格。这个方案被我在1965年给拒绝了。\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 3.12 )Loading...\n"
  },
  {
    "content": "",
    "title": "Google App Inventor",
    "url": "https://coolshell.cn/articles/2608.html",
    "date": "2010-07-13T16:37:06+08:00",
    "description": "\nGoogle 本周一发布了一个新的工作可以让任何人创建Android手机应用。这个工具叫Google App Inventor。（目前， App Inventor好像只对教育者开放）Google说：“你不必是一个专业开发人员就能轻松使用App Inventor。使用App Inventor无须掌握编程知识。因为你根本就不需要编写代码，你只需在可视化界面上设计应用的界面，并使用“blocks”指定应用的行为（behavior）。”\nGoogle Android App Inventor\n注意，Google说的是任何人，也就是包括那些不会编程的人。这个工具可以将枯燥的代码变成了一块一块的拼图，你需要做的只是把这些零散的拼图按照你自己的意思组合在一起，点击生成，你的第一个 Android 程序就诞生了。这里有一篇来自 纽约时代的报道，《纽约时代》报道称，App Inventor已经在六年级的孩子们中完成测试，他们能够使用App Inventor制作简单的应用。如果你可以访问Youtube的话，你可以看看这个视频。\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.58 )Loading...\n"
  },
  {
    "content": "",
    "title": "十个免费的Web压力测试工具",
    "url": "https://coolshell.cn/articles/2589.html",
    "date": "2010-07-13T08:50:40+08:00",
    "description": "\n两天，jnj在本站发布了《如何在低速率网络中测试 Web 应用》，那是测试网络不好的情况。而下面是十个免费的可以用来进行Web的负载/压力测试的工具，这样，你就可以知道你的服务器以及你的WEB应用能够顶得住多少的并发量，以及你的网站的性能。我相信，北京奥组委的订票网站的开发团队并不知道有这样的测试工具。\nGrinder –  Grinder是一个开源的JVM负载测试框架，它通过很多负载注射器来为分布式测试提供了便利。 支持用于执行测试脚本的Jython脚本引擎HTTP测试可通过HTTP代理进行管理。根据项目网站的说法，Grinder的 主要目标用户是“理解他们所测代码的人——Grinder不仅仅是带有一组相关响应时间的‘黑盒’测试。由于测试过程可以进行编码——而不是简单地脚本 化，所以程序员能测试应用中内部的各个层次，而不仅仅是通过用户界面测试响应时间。\nPylot -Pylot是一款开源的测试web service性能和扩展性的工具，它运行HTTP 负载测试，这对容量计划，确定基准点，分析以及系统调优都很有用处。Pylot产生并发负载（HTTP Requests），检验服务器响应，以及产生带有metrics的报表。通过GUI或者shell/console来执行和监视test suites。\nWeb Capacity Analysis Tool (WCAT) – 这是一种轻量级负载生成实用工具，不仅能够重现对 Web 服务器（或负载平衡服务器场）的脚本 HTTP 请求，同时还可以收集性能统计数据供日后分析之用。WCAT 是多线程应用程序，并且支持从单个源控制多个负载测试客户端，因此您可以模拟数千个并发用户。该实用工具利用您的旧机器作为测试客户端，其中每个测试客户端又可以产生多个虚拟客户端（最大数量取决于客户端机器的网络适配器和其他硬件）。您可以选择使用 HTTP 1.0 还是 HTTP 1.1 请求，以及是否使用 SSL。并且，如果测试方案需要，您还可以使用脚本执行的基本或 NTLM 身份验证来访问站点的受限部分。（如果您的站点使用 cookie、表单或基于会话的身份验证，那您可以创建正确的 GET 或 POST 请求来对测试用户进行身份验证。）WCAT 还可管理您站点可能设置的任何 cookie，所以配置文件和会话信息将永久保存。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些重要的算法",
    "url": "https://coolshell.cn/articles/2583.html",
    "date": "2010-07-12T08:27:38+08:00",
    "description": "\n\n下面是一些比较重要的算法，原文罗列了32个，但我觉得有很多是数论里的，和计算机的不相干，所以没有选取。下面的这些，有的我们经常在用，有的基本不用。有的很常见，有的很偏。不过了解一下也是好事。也欢迎你留下你觉得有意义的算法。（注：本篇文章并非翻译，其中的算法描述大部份摘自Wikipedia，因为维基百科描述的很专业了）\n\nA*搜寻算法\n俗称A星算法。这是一种在图形平面上，有多个节点的路径，求出最低通过成本的算法。常用于游戏中的NPC的移动计算，或线上游戏的BOT的移动计算上。该算法像Dijkstra算法一样，可以找到一条最短路径；也像BFS一样，进行启发式的搜索。\nBeam Search\n束搜索(beam search) 方法是解决优化问题的一种启发式方法,它是在分枝定界方法基础上发展起来的,它使用启发式方法估计k 个最好的路径,仅从这k 个路径出发向下搜索,即每一层只有满意的结点会被保留,其它的结点则被永久抛弃,从而比分枝定界法能大大节省运行时间。束搜索于20 世纪70 年代中期首先被应用于人工智能领域,1976 年Lowerre 在其称为HARPY的语音识别系统中第一次使用了束搜索方法,他的目标是并行地搜索几个潜在的最优决策路径以减少回溯,并快速地获得一个解。\n二分取中查找算法\n一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。这种搜索算法每一次比较都使搜索范围缩小一半。\n…\n 阅读全文 Read More\n\n\n\n (19 人打了分，平均分： 4.21 )Loading...\n"
  },
  {
    "content": "",
    "title": "Web版的VNC",
    "url": "https://coolshell.cn/articles/2593.html",
    "date": "2010-07-11T12:18:19+08:00",
    "description": "\n想在Web上远程控制远端的电脑吗？Guacamole开源项目提供了这样的解决方案，其主要使用了HTML5和Ajax。下面是一个载图。如果你能够访问Youtube的话，你可以看看这个视频。\nGuacamole 一个 HTML5 + JavaScript (AJAX) 的 VNC 客户端\n是啊，HTML5强大了，什么都能干了，连Flash也要取代了。现如今，什么事都在往Web上移植了，Chrome也OS了。可以预见在HTML5出来后，未来这样的事情会越来越多，以后的一些移动和掌上设备真的只需要一个Web Browsers.\n (8 人打了分，平均分： 2.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何在低速率网络中测试 Web 应用",
    "url": "https://coolshell.cn/articles/2574.html",
    "date": "2010-07-09T08:00:14+08:00",
    "description": "\n大家看到标题后的第一个问题可能是：“我们需要这样做吗？”\n如果我们开发的是局域网 Web 应用的话，可能没有必要这样做。但如果我们的 Web 应用面向的是互联网上的成千上万的用户，这样做就很必要了。因为在现实世界中并不是所有的用户都有高数率的网络连接，也许用户使用的是拨号接入，移动设备，3G，或者是 USB 网络加密狗。如果我们没有在低数率的网络环境中测试过我们 Web 应用，极有可能在上线后收到一些意想不到的关于系统性能方面的抱怨。这个时候无论我们的 Web 应用界面多么地 Web 2.0，功能多么地强大，对于用户来说都失去了使用价值。\n目前有很多工具能够模拟慢速网络，值得一提的是 Firefox Throttle，这是一个 Firefox 插件，你可以设置上载和下载的数率，并且监控当前带宽的使用情况。另一个非常有用的特性是它可以控制你的 localhost 的连接数率，对本地测试很有用。\nFirefox Throttle 的截图\n\n另一个工具是 Sloppy，它是一个 Java Web Start application。\n文章来源\n (6 人打了分，平均分： 2.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "Eclipse 3.6 （Helios）新特性",
    "url": "https://coolshell.cn/articles/2554.html",
    "date": "2010-07-07T08:30:14+08:00",
    "description": "\n2010年6月23日 Eclipse 3.6 Helios 正式发布，对 Java 程序员来说有哪些新特性值得关注？\n1、检查并报告是否有缺失的 @Override 注解，此功能仅对 Java 1.6 版本适用。在以前版本中，当我们为一个方法加上 @Override  注解，但是这个方法实际上并没有过载（override）任何父类的方法时，将会得到警告信息。在新版本中，如果我们忘记为一个过载方法加上 @Override 注解，同样也会得到警告信息。\n2、变量视图中新增了一个列用于显示当前变量类型的实例数（Layout -> Select Column）。\n\n3、Java 视图中的包名称可以用自定义的规则来显示（Window –> Preferences –> Java –> Appearance）。\n\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "参透软件开发的本质 – Uncle Bob Martin 推荐的经典书籍",
    "url": "https://coolshell.cn/articles/2539.html",
    "date": "2010-07-05T08:30:29+08:00",
    "description": "\n数量级25（10^25）是 Uncle Bob 在 RailsConf 演讲的主题。如果你用一台 PDP 8（ 1960年代的计算机）和 Mac PowerBook 做比较的话，你会发现 Mac PowerBook 比 PDP 8 快8000倍，有6百万倍大的内存，11000倍的耗能，1500倍的容量等等。如果将这些0累加起来，很容易达到10^25。在过去40年里，我们的硬件计算能力获得了10^25倍的提升，而作为软件开发人员的我们并没有利用这些计算能力来提升多少我们的软件开发能力。没错，我们是写了不少的代码，但是它们基本上都是一些顺序语句，if 语句，和 while 循环等，没有什么新鲜的东西。你可能会说面向对象是新东西呀，但是那只是另外一种组织顺序、选择和迭代等语句的方法而已。除我们现有的编程语言之外，如果有新的编程语言能够产生并创造新的“微积分学”，从而将软件开发提高到一个新的高度，将会是一件非常令人期待的事情，因为顺序语句，选择语句和迭代等最终将成为历史。\nUncle Bob 认为以下四本书是软件开发人员必须阅读的，并由他自己来排名。\n1. The Structure & Interpretation of Computer Programs 计算机程序的构造和解释 （By Harold Abelson & Gerald Sussman）\n书中使用的是 Scheme 语言（Lisp 的一个变种），此书的内容曾经是 MIT 计算机系的一门课程，当然现在已经不是了。\n2. Structured Programming 结构化程序设计 （By Edsger W. Dijkstra）\n相信软件专业的同学们都上过此课程，我们的启蒙书籍。这本书讨论了 go to 是怎样的邪恶，同时也讨论了面向对象。对比一下今天我们视为 best practice 的测试驱动开发（TDD），go to 在过去也曾经是 Fortran，Cobol 等语言的核心。\n3. The Annotated TURING （By Charles Petzold）\nUncle Bob 令人尴尬地忘记了这本书的名字，他自嘲说自己从来记不住这本书名。但是此书在他的推荐列表中列第三位。\n4. Clean Code （By Robert C. Martin）\nUncle Bob 本人的大作。\n我的一位同事将这位 Uncle Bob 视为软件开发领域中的上帝，Uncle Bob 这位大师在当下各类编程语言和平台层出不穷的时候，在我们为该学什么语言买什么书举棋不定的时候，推荐给读者这几本经典，也许是煞费苦心地想让我们参透软件开发的本质吧。不过会不会也是因为我们都在慢慢变老，许多旧的东西如今又变成了新鲜有趣的事情啦？（出自采访记者之口）\n文章来源\n (10 人打了分，平均分： 3.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "StackOverflow的404错误页",
    "url": "https://coolshell.cn/articles/2529.html",
    "date": "2010-06-25T08:35:41+08:00",
    "description": "\n不知道大家有没有注意到StakeOverflow的404错误页面？其显示了下面的这个图片：\n\n这个是一个很有意思的图片，不知道你看懂了吗？看上去像Python，又像 Ruby，还像 Perl，当然也有 C的影子，还有Brainfuck。是的，这是一个杂交程序，杂交了Python，Ruby，Perl，C，还有Brainfuck（注意其中的#号），所有的语句都是输出“404”字符串。\n关于这种杂交程序，本站以前也发布过《C语言和sh脚本的杂交代码》，大家可以前往一看。这样的有趣的玩法叫“Polyglot”，也就是说，把N种语言写在一个文件中，然后，该文件在任何编译器下都可以运行，上述的那段代码在Python，Ruby，Perl，Brainfuck下都可以正常运行，也可以被C和的编译器编译通过，并被运行。\n下面是这个图片的字符码，以供各位试试。\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 4.13 )Loading...\n"
  },
  {
    "content": "",
    "title": "几个Web的资源",
    "url": "https://coolshell.cn/articles/2524.html",
    "date": "2010-06-24T08:35:32+08:00",
    "description": "\n首先一个先给大家介绍一个HTML5的资源网站：http://www.html5rocks.com/ ，在这个网站上，有三个子站：\n\nHTML5的幻灯片：http://slides.html5rocks.com/，虽然是英文的，但相信我，这个幻灯片做得很好，你应该能看得懂。\nHTML5的操练场：http://playground.html5rocks.com/，这个页面上有很多HTML5的源码，你可以就直接在上面修改，并查看修改结果。\nHTML5的教程：http://www.html5rocks.com/tutorials/，这个页上有一些Steps by Steps的教程，很不错。\n\n第二个，给大家推荐一个Javascript库，叫——DragDealer。这个JS主要是处理Web上的各种拖动效果，脚本很小，在没有压缩的情况下也只有12K，而且没有任何的dependence，使用起来也比较方便。\n第三个，是Apple的Showcase，我们都知道，iPhone不支持flash，但支持HTML5，大家可以点下面这些链接看看Apple公司自己做的HTML5的一些效果。当然，有一些需要safari浏览器。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "面试题：布尔变量",
    "url": "https://coolshell.cn/articles/2514.html",
    "date": "2010-06-23T08:50:24+08:00",
    "description": "\n下面这篇文章是从StackOverflow来的。LZ面试的时候遇到了一道面试题：“如果有三个Bool型变量，请写出一程序得知其中有2个以上变量的值是true”，于是LZ做了下面的这样的程序：\nboolean atLeastTwo(boolean a, boolean b, boolean c) {\n    if ((a && b) || (b && c) || (a && c)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n面试官接着问到，请对你的这个程序改进一下，但LZ不知道怎么改进，于是上StackOverflow上问了一下，下面是StackOverflow上的众网友的回答。再往下看的时候，希望你自己能先想一想怎么改进。\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 4.20 )Loading...\n"
  },
  {
    "content": "",
    "title": "伦敦地铁实时图",
    "url": "https://coolshell.cn/articles/2520.html",
    "date": "2010-06-23T08:24:06+08:00",
    "description": "\n下面这个网站是关于伦敦地铁实时的运行图：http://traintimes.org.uk:81/map/tube/\n这是个很有意思的网站，其数据是通过伦敦政府发布的TfL API获得的，然后再加上Google Maps的API，于是就有了这样的一个页面。很不错哦。\n\n\n\n伦敦地铁实时图\n\n\n\n从这个事情，我们可以得到，英国的信息化的发达，首先地铁部门有实时监控的数据，然后以Web API的方式发布，从这点看来，我国的信息化水平还很差。主要是钱都投到G/F/W上去了。\n (14 人打了分，平均分： 3.57 )Loading...\n"
  },
  {
    "content": "",
    "title": "2000年的iMac和2010年的iPhone",
    "url": "https://coolshell.cn/articles/2507.html",
    "date": "2010-06-22T08:22:01+08:00",
    "description": "\n以前本站发过“1980年和2009年的1GB电脑内存的比较”，下面是2000年的iMac和2010年的iPhone的比较。\n2000 – iMac\n操作系统 – Mac OS 9.0.4\n处理器 – 500 MHz PowerPC G3 CPU, 128MB Memory\n显示卡 – ATI Rage 128 Pro, 8MB of memory (8 million triangles)\n屏幕- 786K pixels\n数据传输速度 – 1.3-12.5 MB/s (DVD-ROM-1/100 Ethernet)\n存储设备 – 30GB Hard Drive\n显示器 – 15.0 x 15.0 x 17.1 inches\n重量 – 12.25公斤\n \n\n\n2010 – iPhone 4\n操作系统 – iOS 4.0\n处理器 – 1 Ghz ARM A4 CPU, 512MB Memory\n显示卡 – PowerVR SGX 535, uses system memory (28 million triangles)\n屏幕 – 614K pixels\n数据传输速度 – .04-20MB/s (3G-WiFi)\n存储设备 – 32GB Flash Drive\n显示器 – 4.5 x 2.31 x .31 inches\n重量 – 136克\n那么，2020年的产品会是怎么样的？\n (17 人打了分，平均分： 3.59 )Loading...\n"
  },
  {
    "content": "",
    "title": "信XML，得永生！",
    "url": "https://coolshell.cn/articles/2504.html",
    "date": "2010-06-09T08:27:42+08:00",
    "description": "\n在计算机的世界里，什么最牛？Javascript？C语言？C++？iPad？还是brainfuck？我个人觉得都不是，这个世界里，XML最NB，这世界到处都充斥着XML，正如在“十条不错的编程观点”文中所说，我们不用XML我们都不知道怎么编程了。下面，让我们来看一看XML的几个真实的示例，相信你会同意我的观点的。\n一、如何用XML返回数据库SQL查询结果\n<?xml version=\"1.0\" encoding=\"iso-8859-1\" ?>\n<result>\n  <fields>\n    <field>NAME</field>\n    <field>LAST NAME</field>\n    <field>MOTHER MAIDEN NAME</field>\n    <field>BIRTHDATE</field>\n    ...\n  </fields>\n  <data>\n    <row>\n      <value>MARLENE</value>\n      <value>RUTH</value>\n      <value>DE MARCO</value>\n      <value>1973-02-24 00:00:00</value>\n      ...\n    </row>\n  </data>\n</result>\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 2.76 )Loading...\n"
  },
  {
    "content": "",
    "title": "把Flash转成Javascript/HTML5",
    "url": "https://coolshell.cn/articles/2497.html",
    "date": "2010-06-03T08:29:18+08:00",
    "description": "\nSmokeScreen是这样一个开源软件，它可以把Flash的swf文件转成Javascript/HTML5，它的口号是：Flash without plugin。为什么要这样做呢？它说主要是因主Apple的iPhone/iPod/iPad不支持flash，而且看似Steve Jobs也不愿意在以后支持flash。所以，他们搞了这样一个玩意。目前，这个开源软件还在开发阶段，在其主页上，你可以看到一些Demo，在Chrome上看上去很不错，虽然还有一些小问题，不过已经很不错了。\nHTML5几乎颠覆了原来的HTML，其可以让你用HTML不单单只是做网页布局，而且还让你可以开发更强的东西，比如：WebSockets，使用这项技术，已经有人在搞Web版的Quake 2了（http://code.google.com/p/quake2-gwt-port/），还有Google的3D Javascript API，所以，把swf完美地转成Javscript/HTML5可能也只是一个时间问题。\n虽然，HTML5还在draft阶段，而且很多东西都和flash重复了。所以，加上iPhone的推波助澜，发生这样的事情也不奇怪，不知道adobe会怎么想？也许adobe目前对其AIR或是Actionscript还抱有希望，虽然有这样一篇文章力挺Flash，但未来真的不好说，adobe会使用HTML5/Javascript来作为其flash的引擎吗？如果不这样的话，我相信总有一天，会有人开发出HTML5/Javascript的IDE。而且，有理由相信，一旦在未来所有的浏览全面支持HTML5，那么我们可以想像，这个世界可能几乎所有的桌面应用都会被Web所取代，这个进程可能会越来越快。让我们拭目以待。\n (11 人打了分，平均分： 3.45 )Loading...\n"
  },
  {
    "content": "",
    "title": "WTF Javascript",
    "url": "https://coolshell.cn/articles/2492.html",
    "date": "2010-06-02T09:51:49+08:00",
    "description": "\n请先看一下下面的这段Javascript程序以及其结果。\n[javascript]\n1 + + 1              // => 2\n1 + – + 1            // => 0\n1 + – + – + 1        // => 2\n1 + – + – + – + 1    // => 0\n1 + – + + + – + 1    // => 2\n1 + / + + + / + 1    // => 1/ + + + /1\n[/javascript]\n提示一下，1++1等价于1 + (+1)，也就是1加上一个正数1，如果你能搞懂其它的表达式的话，请看看下面的这段程序，你能说出其结果吗？\n[javascript]\n1 + / + / + / + 1 // => ?\n[/javascript]\n如果不知道的话，你可以到这个网页上去讨论讨论。当然，如果你不懂也没有什么关系，因为Javascript本身就是一个很怪异的语言，再加上浏览器的种种不是，所以，Javascript程序员也是很郁闷的。在以前的“最为奇怪的程序语言的特性”中也说过一些。Javascript最怪异的特性导致了wtfjs.com这样的一个网站，还有一个WTF JS的开源站点。呵呵。\n (8 人打了分，平均分： 3.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "四个流行的Java连接池",
    "url": "https://coolshell.cn/articles/2483.html",
    "date": "2010-06-02T09:31:12+08:00",
    "description": "\nC3P0是一个开放源代码的JDBC连接池，它在lib目录中与Hibernate一起发布,包括了实现jdbc3和jdbc2扩展规范说明的Connection 和Statement 池的DataSources 对象。（主页：http://sourceforge.net/projects/c3p0/）\nBoneCP 是一个开源的快速的 JDBC 连接池。BoneCP很小，只有四十几K（运行时需要log4j和Google Collections的支持，这二者加起来就不小了），而相比之下 C3P0 要六百多K。另外个人觉得 BoneCP 有个缺点是，JDBC驱动的加载是在连接池之外的，这样在一些应用服务器的配置上就不够灵活。当然，体积小并不是 BoneCP 优秀的原因，BoneCP 到底有什么突出的地方呢，请看看性能测试报告。（主页：http://jolbox.com/）\nDBCP （Database Connection Pool）是一个依赖Jakarta commons-pool对象池机制的数据库连接池，Tomcat的数据源使用的就是DBCP。目前 DBCP 有两个版本分别是 1.3 和 1.4。1.3 版本对应的是 JDK 1.4-1.5 和 JDBC 3，而1.4 版本对应 JDK 1.6 和 JDBC 4。因此在选择版本的时候要看看你用的是什么 JDK 版本了，功能上倒是没有什么区别。（主页：http://commons.apache.org/dbcp/）\nProxool是一个Java SQL Driver驱动程序，提供了对你选择的其它类型的驱动程序的连接池封装。可以非常简单的移植到现存的代码中。完全可配置。快速，成熟，健壮。可以透明地为你现存的JDBC驱动程序增加连接池功能。（主页：http://proxool.sourceforge.net/）\n (9 人打了分，平均分： 3.44 )Loading...\n"
  },
  {
    "content": "",
    "title": "说服他人的5种技巧 – Guy Kawasaki",
    "url": "https://coolshell.cn/articles/2460.html",
    "date": "2010-05-23T08:20:17+08:00",
    "description": "\n硅谷传奇创业者+精神领袖 Guy Kawasaki最近写了一篇新文章总结了以下5种说服他人的技巧。希望对大家对付老外有帮助。摘要如下：\n\n先给予，后索取 (Be the first to give )。研究表明，我们容易被给我们帮过忙的人说服：有些服务员给我们结账的时候带来口香糖，我们一般给他们的小费多些。工作中我们更倾向于给帮助过我们的人更多支持…\n不要给对方太多选择 (don’t offer too many choices)：不论是给用户选择，还是给员工的奖励机制，太多的选择经常会给人带来挫折感…\n不要以自我为中心辩护(argue against self-interest)。在说服别人的过程中，信任是最关键的。有时候在大力鼓吹之前承认自己方面的一些小不足可以提高信任感…\n失去比得到更有说服力 (losses are more persuasive than gains)。告诉对方如果不接受你的意见或者不买的你的产品会失去什么，要比只是说明他们会得到什么要更能说服人…\n让对方觉得自己已经取得了一定进步 (make people feel as if they’ve already made progress toward a goal)。例如以下两种推销洗车会员卡服务的方法，方法2的顾客保持率是方法1的两倍。\n\n洗八次赠一次\n洗十次车赠一次，第一次算免费赠送\n\n\n\n原文link\n (20 人打了分，平均分： 3.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "（麻省理工免费课程）C语言内存管理和C++面向对象编程",
    "url": "https://coolshell.cn/articles/2474.html",
    "date": "2010-05-23T08:15:05+08:00",
    "description": "\n此课程有全部讲义和习题。\n课程描述实在得令人发指。翻译如下：\n您是否由于自己的Python程序比同僚们的C程序慢而垂头丧气？你是否想不用JAVA实现面向对象？加入我们，学习C和C++吧！我们带您从简单的C程序入手，深入C语言的内存管理，简介C++里的面向对象，深入C++面向对象的高级功能以及STL。我们还教您一些以后面试用得着的技巧和知识。\n原文：\nEver hang your head in shame after your Python program wasn’t as fast as your friend’s C program? Ever wish you could use objects without having to use Java? Join us for this fun introduction to C and C++! We will take you through a tour that will start with writing simple C programs, go deep into the caves of C memory manipulation, resurface with an introduction to using C++ classes, dive deeper into advanced C++ class use and the C++ Standard Template Libraries. We’ll wrap up by teaching you some tricks of the trade that you may need for tech interviews.\n麻省理工开放课程里有很多计算机科学的宝贝。不仅有一流的教程，还有习题和答案。适合英语不错的程序员平时充电。\n课程地址（英文）\n (20 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "Google吃豆游戏Logo的源码",
    "url": "https://coolshell.cn/articles/2466.html",
    "date": "2010-05-22T23:42:10+08:00",
    "description": "\n这两天，Google的logo换成了那个经典的吃豆游戏，很强大，也引发了大众的热议。如果你想要其源代码的话，你可以到这里下载：http://github.com/macek/google_pacman。而在线演示在这里：http://macek.github.com/google_pacman/。\nGoogle 吃豆游戏 Logo\n需要注意的是，那个源程序在你的本机是不会有声音的，因为这跟flash的设置有关系，如果你需要有游戏声音，你还需要有以下的设置：\n  1. 打开 Adobe Flash Control Panel:\n     http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html\n  2. 点击 Edit Locations\n  3. 点击 Add Location\n  4. 浏览你的 google_pacman 目录\n  5. 点击 Add\n需要注意的是，这个源程序并不是Google官方发布的，只不过是某些好事者的网友发布的，不知道在日后的Google的Logo归档中是否会见到这个Logo。顺便说一下，根据 Google官方BLOG，这个程序是由 Marcin Wichary 和 Ryan Germick做的。真是又应了那句话——“如果一个应用能被Javascript实现，那么其最终会被Javascript实现”。\n (11 人打了分，平均分： 3.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "Twitter的禁用口令",
    "url": "https://coolshell.cn/articles/2451.html",
    "date": "2010-05-20T08:58:44+08:00",
    "description": "\n打开Twitter的注册页面，https://twitter.com/signup，查看一下源码，你会看到一个很长的禁用口令列表（见本文最下面），其中的某些口令的确很雷人。你可以参看本站的《如何管理并设计你的口令》来设计和管理你的口令。其中的某些口令需要向你解释一下：\n\nncc1701 这是星际迷航中的战舰号。\nthx1138 这是乔治卢卡斯的第一个电影，1971年，其学生时代的作品。\nqazwsx 这是键盘的布局顺序键。\n666666 这是6个6\n7777777 这是7个7\nou812 这是1988范 海伦Van Halen 专辑\n8675309 这是 1982 Tommy Tutone song歌中提到的数字。这首歌导致人们开始播打电话867- 5309 寻找 “Jenny”\n\n经过统计，9个人里就有1个人会使用下面这个列表中的一个口令，而50个人就会有1个人使用top 20里的一个口令。你可能会问，top20是怎么来的？而twitter这个列表又是哪里来的？请看下面的表格。这是top 500最烂的口令列表。其来源是这里。\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "黑客的价值观",
    "url": "https://coolshell.cn/articles/2439.html",
    "date": "2010-05-19T08:50:50+08:00",
    "description": "\n黑客，可能在大家的眼里是那些入侵别人计算机搞破坏的人，其实并不是那样的。如果你这样认为了，只能说明你对计算机文化并不了解，真正的黑客是一种自由的象征，他们挑战权威，追求自由，并和很多非人类的行为作斗争。如果你想了解黑客文化，你一定要去看看我写的《Unix传奇，上篇，下篇》。你会对正宗的计算机文化以及黑客文化有所了解的。而那些只懂得入侵别人计算机搞破坏活动的“黑客”只能称为是街头的小混混，他们根本就不配称黑客。\n下面有四篇关于“Hacker’s Code”文章，我觉得相当的不错，可以让你明白什么是黑客的行为规范，道德准则，以及黑客的历史使命，希望能对你有启发。但是翻译水平有限，所以我请Mailper同学帮忙翻译了一下，但还是觉得原文更为传神，尤其是原文中的押韵，双意以及朗朗上口，所以，下面提供了中英文对照。如果有翻译得不好的还请大家指正。\n \nThe Hacker’s Code\nhttp://muq.org/~cynbe/hackers-code.html\n“A hacker of the Old Code.”\n\nHackers come and go, but a great hack is forever.\n黑客们来来往往，但是只有黑客的壮举是永存的\n\n\nPublic goods belong to the public.*\n公众的东西是属于大众的\n\n\nSoftware hoarding is evil.\nSoftware does the greatest good given to the greatest number.\n圈养软件是邪恶的，最好的软件是有最多人使用的\n\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 4.06 )Loading...\n"
  },
  {
    "content": "",
    "title": "碰触，合作和团队绩效",
    "url": "https://coolshell.cn/articles/2440.html",
    "date": "2010-05-19T08:40:39+08:00",
    "description": "\n公司有时候会举行团队建设活动，让大家出去跋山涉水，一起做有肢体接触游戏（例如用废报纸和胶布搭建一个能把所有人容下的遮阳棚）。这其中是有道理的。\n今日读到一篇加州伯克利大学的文章 touch, cooperation, and performance, 用科学的研究方法解释了为什么NBA球员们为什么要“high five（击掌）”，并用统计方法论证了碰触行为可以导致更好的比赛成绩。其实想想，其实人们握手，鼓励式地拍肩膀，引导别人进门的时候好客地推别人的背，道理都是一样。身体接触（符合社交礼仪范围的）是建立信任的一种微妙行为。这些大多不会写在领导力的书里。\n猴子之间互相捉虱子梳理毛发不是为了营养，而是增进群体的凝聚力。人类口头上的语言的第一功能不是为了表达知识，而是为了促进社会联系，其内容并不需要都是重要信息。这就是为什么我们一天之内说话内容的80%其实都是扯淡，八卦和闲聊。\n（注意：职场上有社交礼仪，此方法需要适度）\n (10 人打了分，平均分： 3.20 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何管理并设计你的口令",
    "url": "https://coolshell.cn/articles/2428.html",
    "date": "2010-05-18T08:42:41+08:00",
    "description": "\n在互联网上，需要我们输入用户名口令的地方实在是太多了，多得都让人记不过来了，N个电子邮件帐号，QQ， MSN，校内，开心，facebook，Blog，各种论坛，网银，淘宝，电子相册……，太多了，想想看，你要用多少用户名口令，相信很多人可能会这样做，用几乎一样的口令和用户名来申请所有的这些帐号，我估计这是大多数人的做法。当然，这样一来，你就需要保管好你的用户名和口令了，因为只要被破解了，就相当于你所有的帐号被破解了，这是多数恐怖的一件事情啊。你可能觉得别人破解你的口令很难，但我告诉你也许会非常容易，因为，如果你只使用一样的用户名和口令的话，也许某天，你注册了一个不知名的小网站，可能会意味着你所有的用户名和口令都被人获取了，要小心啊。\n对我来说，我通常会有几组组帐号和密码，\n\n一个帐号/密码是用于一些大的可以依赖的站点，如：MSN，gmail，linkedin，facebook，hotmail等，因为我相信这些站点应该可以足够信任不会出卖用户信息，也有足够的能力不会让用户信息和口令外泄。\n一个帐号/密码用于一些国内的一些大的网站，如：QQ，开心，CSDN，Sina，网易，Blog，同学录等，因为这些站点必竟还受到国家的监管，以及其内部不良员工可能会倒卖我的信息，指不定什么时候我的用户信息就会外泄。\n一个帐号/密码用于我的一些经济活动，如网银，淘宝，支付宝什么的。\n最后一个帐号/密码用于登录那些必需要注册的破站点，一个最简单的用户名口令。\n\n真烦啊。在这样的一个社会里，忘记密码绝对是一件最普通不过的事情了。就算是我这样的分组归类，同样需要超强的记忆力。不知道你会不会把你的密码写在某处呢？是啊，我也是想写啊，但那岂不是相当的危险，不丢则已，一丢就全丢了。\n今天，在国外的某论坛里看到了这样的一个设计方法，好像很不错，分享给大家。\n …\n 阅读全文 Read More\n\n (31 人打了分，平均分： 4.32 )Loading...\n"
  },
  {
    "content": "",
    "title": "十条不错的编程观点",
    "url": "https://coolshell.cn/articles/2424.html",
    "date": "2010-05-14T08:50:24+08:00",
    "description": "\n在Stack Overflow上有这样的一个贴子《What’s your most controversial programming opinion?》，翻译成中文就是“你认为最有争议的编程观点是什么？”，不过，在400多个主回贴，以及千把个子回贴中，好像并不是很有争议，而是令人相当的茅塞顿开，下面罗列一些，并通过我自己的经历和理解发挥了一些，希望对你有帮助。\n1） The only “best practice” you should be using all the time is “Use Your Brain”.\n唯一的“Best Practice”并不是使用各种各样被前人总结过的各种设计方法、模式，框架，那些著名的方法、模式、框架只代码赞同他们的人多，并不代表他们适合你，你应该更多的去使用你的大脑，独立地思考那些方法、模式、框架出现的原因和其背后的想法和思想，那才是“best practice”。事实上来说，那些所谓的“Best Practice”只不过是限制那些糟糕的程序员们的破坏力。\n2）Programmers who don’t code in their spare time for fun will never become as good as those that do.\n如果你对编程没有感到一种快乐，没有在你空闲的时候去以一种的娱乐方式去生活，无论是编程，还是运动，还是去旅游，那么你只不过是在应付你的工作，无时无刻不扎在程序堆中，这样下来，就算是你是一个非常聪明，非常有才华的人，你也不会成为一个优秀的编程员，要么只会平平凡凡，要么只会整天扎在技术中成为书呆子。当然，这个观点是有争议，热情和能力的差距也是很大的。不过我们可以从中汲取其正面的观点。\n3）Most comments in code are in fact a pernicious form of code duplication.\n注释应该是注释Why，而不是How和What，参看《惹恼程序员的十件事》，代码告诉你How，而注释应该告诉你Why。但大多数的程序并不知道什么是好的注释，那些注释其实和code是重复的，毫无意义。\n …\n 阅读全文 Read More\n\n (51 人打了分，平均分： 4.49 )Loading...\n"
  },
  {
    "content": "",
    "title": "老手是这样教新手编程的",
    "url": "https://coolshell.cn/articles/2420.html",
    "date": "2010-05-13T08:43:19+08:00",
    "description": "\ncomp.lang.c全球最大的C语言新闻组，其Google的链接是：http://groups.google.com/group/comp.lang.c/ 可惜被GFW了。在comp.lang.c新闻组，有一个日本网友发了个贴子，说他正在学习一个在线的C语言课程，要完成一个作业，用程序输出如下的结果，而他的老师在美国，因为时差问题，他无法和他联系，所以只有上这里来寻求帮助。\n    *\n   ***\n  *****\n *******\n*********\n*********\n *******\n  *****\n   ***\n    *\n很明显，在comp.lang.c上发这种贴子是一定会被拍的很惨的，这样的事，以前在SUN的论坛上也发生过，详情请看这里。还有一个去软件官网上要一个盗版序列号的。果不然后，我看到了这样的一个回贴。提供这样的一段代码：\n …\n 阅读全文 Read More\n\n (31 人打了分，平均分： 4.39 )Loading...\n"
  },
  {
    "content": "",
    "title": "HTML 安全列表",
    "url": "https://coolshell.cn/articles/2416.html",
    "date": "2010-05-12T08:57:38+08:00",
    "description": "\n下面这个网站罗列了，几乎所有的关于HTML 5 在各种主流浏览器上的安全问题，这些安全问题很有可能将会是黑客攻击你的网上的敲门砖，他们几乎都和Javascript都有关系，你就要好好注意了。\nhttp://heideri.ch/jso/\n下面罗列几个：\n1）<table background=”javascript:alert(1)”>\nIE6，7，8，9，和Opera 8.x, 9.x, 10.x 都支持这样的语法。\n2）<meta charset=”mac-farsi”>¼script¾alert(1)¼/script¾\n这个问题会存在于所有的Firefox版本中，可以让用户进行XSS（跨站脚本）攻击\n3）<script>&amp;#x61;l&amp;#x65;rt&amp;#40;1)</script>\n在<script>和<style>的TAG间，根据标据，其可以使用这样的字符来运行脚本。这在所有版本的Firefox, Opera, 和 Chrome中都会有问题。\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "写HTML和CSS的新方法",
    "url": "https://coolshell.cn/articles/2406.html",
    "date": "2010-05-11T08:18:19+08:00",
    "description": "\nZen Coding 一个用来简化编写 HTML，XML， XSL （或是其它一些诸如此类格式的编辑器）。其主要是用一种缩写方式的语法来书写大量重复和无味的HTML，很像CSS语法。下面是一个例子：\ndiv#page>div.logo+ul#navigation>li*5>a\n展开后会成为下面这个样子：\n\n<div id=\"page\">\n        <div></div>\n        <ul id=\"navigation\">\n                <li><a href=\"\"></a></li>\n                <li><a href=\"\"></a></li>\n                <li><a href=\"\"></a></li>\n                <li><a href=\"\"></a></li>\n                <li><a href=\"\"></a></li>\n        </ul>\n</div>\n\n可以看出来，#代表ID，>代表下一层。\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "新手该学哪门编程语言",
    "url": "https://coolshell.cn/articles/2402.html",
    "date": "2010-05-10T08:46:42+08:00",
    "description": "\n在某个论坛上看到有人在问——“Which programming language should I learn first？”，看到了下面的这个回答，有点意思。\nDepends.\n\nTo program in an expressive and powerful language: Python\nTo get a website up quickly: PHP\nTo mingle with programmers who call themselves “rockstars”: Ruby.\nTo really learn to program: C.\nTo achieve enlightenment: Scheme.\nTo feel depressed: SQL\nTo drop a chromosome: Microsoft Visual Basic\nTo get a guaranteed, mediocre, but well paying job writing financial applications in a cubicle under fluorescent lights: Java.\nTo do the same thing with certifications and letters after your name: C#\nTo achieve a magical sense of childlike wonder that you have a hard time differentiating from megalomania: Objective C\n\nI could go on… but I’m not feeling hateful enough today.\n翻译如下：\n …\n 阅读全文 Read More\n\n (29 人打了分，平均分： 4.24 )Loading...\n"
  },
  {
    "content": "",
    "title": "九个PHP很有用的功能",
    "url": "https://coolshell.cn/articles/2394.html",
    "date": "2010-05-06T08:37:49+08:00",
    "description": "\n下面是九个PHP中很有用的功能，不知道你用过了吗？\n1. 函数的任意数目的参数\n你可能知道PHP允许你定义一个默认参数的函数。但你可能并不知道PHP还允许你定义一个完全任意的参数的函数\n下面是一个示例向你展示了默认参数的函数：\n\n// 两个默认参数的函数\nfunction foo($arg1 = '', $arg2 = '') {\n\n\techo \"arg1: $arg1\\n\";\n\techo \"arg2: $arg2\\n\";\n\n}\n\nfoo('hello','world');\n/* 输出:\narg1: hello\narg2: world\n*/\n\nfoo();\n/* 输出:\narg1:\narg2:\n*/\n\n现在我们来看一看一个不定参数的函数，其使用到了?func_get_args()方法：\n…\n 阅读全文 Read More\n\n (18 人打了分，平均分： 4.22 )Loading...\n"
  },
  {
    "content": "",
    "title": "McAfee误杀svchost.exe",
    "url": "https://coolshell.cn/articles/2376.html",
    "date": "2010-04-23T08:45:21+08:00",
    "description": "\n这两天，杀毒软件又出事了。还记得2007年5月，那次是Norton把简体中文Windows下的netapi32.dll 和 lsasrv.dll。最近的一次是，2008年11月，AVG把user32.dll给干掉了。\n这次是McAfee的5958版病毒库，导致McAfee误杀了Windows XP SP3下的svchost.exe，这最终导致了Windows不断地重复启动，据说有数十万PC成了小白鼠。简单地到Twitter和各国外技术社区看看，真是受灾严重啊。\n下面是出错信息：\nThe file C:WINDOWS\\system32\\svchost.exe contains the W32/Wecorl.a Virus.\nUndetermined clean error, OAS denied access and continued.\nDetected using Scan engine version 5400.1158 DAT version 5958.0000.\n其实，可能大家都误解了，McAfee把svchost.exe识别为一个恶意程序，我觉得这是一种“实事求是”的态度啊，svchost.exe难道不是Windows下的万恶之源吗？多少年来，svchost.exe成为了多少病毒，木马和流氓程序的温床，这么多年过去了，Windows用户们默默地承受着svchost.exe所带来的痛苦，经过这么长的时间，只有McAfee不惧M$的淫威第一个站出来把svchost.exe揪出来办了，这是一种什么样的精神啊……\n (22 人打了分，平均分： 3.95 )Loading...\n"
  },
  {
    "content": "",
    "title": "谷歌Chrome取消”http://”",
    "url": "https://coolshell.cn/articles/2367.html",
    "date": "2010-04-22T11:12:24+08:00",
    "description": "\n谷歌下一个版本的Chrome浏览器软件将缺少一个在近20年来一直是浏览器的一个特点的功能：在地址栏中的“http://”。目前开发人员版本的Chrome浏览器已经做了这种改变。这个变化虽然看起来很小，但是，已经在Chrome网站引起了程序员们很大的争议。\n\n在Google Chrome的开发站点上，又有了一个很热的BUG——Issue  41467（上一次的一热议的BUG是的《Go语言更名Issue 9》），这个BUG目前已被关闭。不过在其它地方还在热议中，如：Reddit.com。基本上来说，90%以上的程序员反对的，他们希望Google的Chrome可以给一个设置关闭或打开这一功能。\n一些程序员觉得这是违反了RFC，并且觉得这是在向End User传播一种很不好的东西，那就是网址可以不用http://，这样一来会给程序员增加很多麻烦，比如：他们的程序无法使用http://这一关键字来检查用户的输出，等等。\niPhone浏览器的也是这样的， 不过当你把光标放到地址栏中，其会显示http://，广大程序员希望Chrome也实现这一方案。然而，Issue  41467目前的状态是“WontFix”，呵呵。\n有人说，如果你在地址栏中直接输入网址，没有协议前缀，默认就是http://，Google用的就是这个特性，然后，你可以试试在地址栏中输入“ftp.gnu.org/gnu”，你会发现，自动加入的不是http://而是ftp://，呵呵。\n有人说，既然你要省，不如也把www.和后面的.com加上/也省了，因为这些都是默认的嘛。直接打google就OK了。Chrome开发团队说，没有www.和.com/只能算是一个主机名，不能算是DNS域名。呵呵。\n还有人说，搞这种隐藏的最恶心的就是Windows，隐藏文件后缀名，隐藏系统文件，太扯了，于是，像sexy_girls.jpg.exe，huge-tits.jpg.src这样玩意儿让某些电脑知识薄弱意志不坚定的人深受其害。\n如果有空，请留下你的观点。\n (10 人打了分，平均分： 3.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "两个C++的资源",
    "url": "https://coolshell.cn/articles/2365.html",
    "date": "2010-04-19T09:17:19+08:00",
    "description": "\n第一个是一个C++第三方类库的A-Z：（http://www.trumphurst.com/cpplibs/cpplibs.php）其中包含了：\n\n开源的C++的第三方类库列表\n商业的C++的第三方类库列表\n一些经典的C++的随书源码\n一些C++相关的工具\n\n不过，这个网站好像最新更新是在2008年。\n第二个是Boost C++的一个教程：（http://en.highscore.de/cpp/boost/）\n\nChapter 1: Introduction\nChapter 2: Smart Pointers\nChapter 3: Function Objects\nChapter 4: Event Handling\nChapter 5: String Handling\nChapter 6: Multithreading\nChapter 7: Asynchronous Input and Output\nChapter 8: Interprocess Communication\nChapter 9: Filesystem\nChapter 10: Date and Time\nChapter 11: Serialization\nChapter 12: Parser\nChapter 13: Containers\nChapter 14: Data Structures\nChapter 15: Error Handling\nChapter 16: Cast Operators\n\n这个教程可能是写得比较不错的了，不过是英文的。\n (12 人打了分，平均分： 3.42 )Loading...\n"
  },
  {
    "content": "",
    "title": "MSDN中的两个命名",
    "url": "https://coolshell.cn/articles/2363.html",
    "date": "2010-04-19T08:45:12+08:00",
    "description": "\n第一个叫：DestroyPhysicalMonitor\nhttp://msdn.microsoft.com/en-us/library/dd692936(VS.85).aspx\n在你的程序中调用这个函数，不知道你敢不敢在运行程序。呵呵。\n第二个叫：INITCOMMONCONTROLSEX –\nhttp://msdn.microsoft.com/en-us/library/bb775507(VS.85).aspx\nInitialize Common Control Sex ??? 真是淫者见淫啊。呵呵\n不知道还有没有其它有趣的？欢迎大家跟贴。\n (6 人打了分，平均分： 2.17 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个jQuery的插件",
    "url": "https://coolshell.cn/articles/2357.html",
    "date": "2010-04-14T13:42:36+08:00",
    "description": "\njQuery这个强大的玩意我就不多说了，不知道可以上网搜搜看。IE6我也不多说了，这可能是史上骂名最多的一个浏览器，网上有N多的声讨IE6的文章，你也可以参看本站的《9个最常见IE的Bug及其fix》和《IE的CSS相关的BUG》，如果你今天还在用IE6，或是IE类浏览器，那请让我小小的BS你一下。\n这个jQuery的Plugin可能是有史以来所有plugin中最有个性的一个，因为这个plugin什么也不干，其会用户的IE6版的浏览器直接Crash掉。这个plugin叫jQuery Crash，其网页链接在下面，是一个四星级的插件，仅仅435个字节。\nhttp://plugins.jquery.com/project/crash\n其是这样介绍自己的，有脏话，我就不翻译了。\nA jQuery plugin for crashing IE6. That’ll teach those motherf!%@*#s to upgrade their s#*t.\n其它，让IE系例的浏览器挂掉，并不需要Javascript，你可以尝试点击下面这个页面，这是一个纯HTML的页面，没有任何的CSS，或是JS的东西，只有HTML。请小心打开（如果在Firefox中打开也可能会挂，Chrome中没事）\nhttp://www.gregmerideth.net/html/iecrash.html\n这个纯HTML的来源是本来是作者写了一个程序生成了一个N层嵌套的表格，结果在IE5中导致了IE5不响应直到Crash并使用了100%的CPU资源，这么多年过去了，还是老样子，在我的dual-core+IE7上，也是一样，占了50%的CPU，而且还有很高的内核使用，最后只能把进程给kill了。BT啊，纯HTML都会让IE这样。\n (12 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "telnet的一个Bug",
    "url": "https://coolshell.cn/articles/2352.html",
    "date": "2010-04-14T09:10:20+08:00",
    "description": "\n下面这个链接是Linux分发包Ubuntu的关于Telnet命令的Man Page，\nhttp://manpages.ubuntu.com/manpages/karmic/man1/telnet-ssl.1.html\n打开这个Man Page，把页面拉到最后一行，你会看到下面这个BUG（“BUGS：源代码不易读！”）\n     The source code is not comprehensible.\nTelnet的源代码在这里：http://packages.ubuntu.com/source/dapper/netkit-telnet，下载下来一看，还真是不易读，简单地看了一下代码，发现至少有这样一些问题：\n\n空格和Tab键混用的缩进，导致很多代码在没有缩进。\n大量的#if #else以及大量的各种预编译宏。以及一些怪异的宏。如：\n\n#ifndef B19200\n#define B19200 B9600\n#endif\n#ifndef B38400\n#define B38400 B19200\n#endif\n\n什么叫在C中写C++，第一次见。（在terminal.cc中间居然出现了几个class）\n变量命名很不直观，大量的old, tmp, c1, c2, s1, s2, s3 等学校里用的变量名，只有作者自己知道是什么意思。函数命令的风格也不一致，编程风格也很不一致，基本没有编程规范。\n\n的确很不易读。不管怎么样，很欣赏在man page中把源码的易读性列为BUG的这种作法。\n (10 人打了分，平均分： 3.10 )Loading...\n"
  },
  {
    "content": "",
    "title": "Unix传奇(上篇)",
    "url": "https://coolshell.cn/articles/2322.html",
    "date": "2010-04-09T08:45:27+08:00",
    "description": "\n【本文曾于2007年3月于我在CSDN上的BLOG发布，现在我把其搬到酷壳来，一来是觉得这段历史相当传奇，值得大家再看看，二来也和我在酷壳上发布的一些文章相互链接。】\n\n了解过去，我们才能知其然，更知所以然。总结过去，我们才会知道我们明天该如何去规划，该如何去走。在时间的滚轮中，许许多的东西就像流星一样一闪而逝，而有些东西却能经受着时间的考验散发着经久的魅力，让人津津乐道，流传至今。要知道明天怎么去选择，怎么去做，不是盲目地跟从今天各种各样琳琅满目前沿技术，而应该是去 —— 认认真真地了解和回顾历史。 \nUnix是目前还在存活的操作系统的元老了，走过了40年的历程（参看《Unix 40年：Unix年鉴》、《Unix 40年：昨天，今天和明天》）。在技术更新如此迅速的计算机世界的今天，Unix始终保持它那神圣的光环，它那曲折和令人叹息的历史，以及由它引发的思想变革，对当今计算机文化造成的深远影响，这40年所产生的人和事，让它成为了一个传奇，不能不让人为之惊叹。\n这是一段所有从事计算机行业人员尤其是软件开发人员需要了解的历史。Unix的传奇历史是整个计算机世界文化最具代表性的，它对整个计算机世界文化的影响也是最巨大，最深远的。他给人带来的不单单的对过去的回味，更为我们带来了计算机世界的新思潮。\n了解这段的历史的人，才能体会计算机世界变迁过程中的是是非非，才能了解计算机世界中的文化，从而才能参与到整个计算机革命的大潮中。希望这段历史，这篇文章能让你感受到计算机世界那强力的脉搏，从而让你踏上这条令人充满激情的道路。\n上篇\n\nUnix起源\nUnix分裂\nUnix的法律纠纷\nGNU开源组织\nLinux横空出世\nLinux今天的领袖\n\n …\n 阅读全文 Read More\n\n (28 人打了分，平均分： 4.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "Unix传奇(下篇)",
    "url": "https://coolshell.cn/articles/2324.html",
    "date": "2010-04-09T08:44:57+08:00",
    "description": "\n\n【本文曾于2007年3月于我在CSDN上的BLOG发布，现在我把其搬到酷壳来，一来是觉得这段历史相当传奇，值得大家再看看，二来也和我在酷壳上发布的一些文章相互链接。】\n\n<<<<   Unix传奇（上篇）\n\nUnix是目前还在存活的操作系统的元老了，走过了40年的历程（参看《Unix 40年：Unix年鉴》、《Unix 40年：昨天，今天和明天》）。由它引发的思想变革，对当今计算机文化造成的深远影响。这是一段所有从事计算机行业人员尤其是软件开发人员需要了解的历史。Unix的传奇历史是整个计算机世界文化最具代表性的，它对整个计算机世界文化的影响也是最巨大，最深远的。他给人带来的不单单的对过去的回味，更为我们带来了计算机世界的新思潮。\n\n\n下篇\n\nUnix与黑客文化\nUnix的历史教训\nUnix 家族谱\nUnix的特点\nUnix的影响和哲学\nUnix痛恨者手册\n\n\n …\n 阅读全文 Read More\n\n (49 人打了分，平均分： 4.57 )Loading...\n"
  },
  {
    "content": "",
    "title": "史上最糟糕的网站",
    "url": "https://coolshell.cn/articles/2313.html",
    "date": "2010-04-07T09:35:00+08:00",
    "description": "\n下面罗列了一些可能是史上最糟糕的网站，当你打开这些网站的时候，请不要太过惊讶，你可以尝试着欣赏一下，不可否认，如果你使劲全力去欣赏，你还是可以找到一些亮点的。呵呵。\n\nhttp://www.shufsd.org/，这个网站让我想到了我97年在大学里开始学习HTML的时光，该网页的风格可能比当时我做的还要好一些，不过基本上是很类似的。\nhttp://www.havenworks.com/，这个网站呢？先介绍这个网站主要是让你对后面的网站有个过渡，老实说，这个网站比起后面的来说，还算可以了。这个网站教会我们如何分类网页上的信息\nhttp://www.arngren.net/，这个网站教你如何在固定空间的网页上放置更多的信息。这好像是我们日常生活当中经常出现的问题，如何把更多的东西放进一个固定的箱子里，我们不停地调整着物品摆放的位置和顺序……\nhttp://www.team2stool.com/，开始了，这个网站教会我们如何把图片无序地组织起来。\nhttp://yvettesbridalformal.com/index.htm，嗯，初看起来吓一大跳，这个网页教你如何制作一个惊悚的网页，不过往细里看，看久一会，你会发现，这个网页设计得很的印象派的风格，也许是一种艺术。\nhttp://www.dokimos.org/ajff/，什么叫炫，这就叫炫，太炫了，眼睛就炫花了。打开这个网页的时候，要注意浏览器上边的提示条，耶稣真的很强大啊。\nhttp://www.belladesoto.us/，打开这个网页要小心啊，因为这个网页可能比BT下载还猛，据说可能会占用你半GB的带宽。小心啊。\nhttp://www.superbad.com/，这可能是史上最无厘头的网页了，不知道这个网站要干什么，找到可以点的地方点吧，打开一个网页，再点击其中的链接，又打开一个网页，不一会儿你就会在一层又一层的网页中迷路了，好在每次打开的网页都风格迥然，倒也不会觉得单一。\n\n你还知道一些BT的网站吗？欢迎和我们一样分享。\n (37 人打了分，平均分： 4.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "微软的安全补丁分析",
    "url": "https://coolshell.cn/articles/2305.html",
    "date": "2010-04-06T08:42:44+08:00",
    "description": "\n截止至2009年底，大约有90%的微软安全补丁是把管理员权限给disable了。根据 BeyondTrust的报告，到今年3月分，Windows 7 有57%的安全补丁是以移除管理员权限作为解决方法的，相比较而言，Windows 2000 是 53%，Windows XP 是 62%，Windows Server 2003 是 55%，Windows Vista 是 54% 以及 Windows Server 2008 是 53%，而最牛的要算是 —— 100% 的 Microsoft Office 和 94%  Internet Explorer （其中100% 的 IE8 ）的安全补丁是移除管理员权限。\n这对于某些公司的IT部门来说是个好消息，因为这些公司的IT部门通常是不会让公司的员工有本机的管理员权限的，根据微软大量的安全补丁是移除某些管理员权限的这一特性，这意味着对于本机只有一般用户权限IT管理，将会防住很大一部份的恶意攻击。\nPaul Cooke, Windows Client Enterprise Security主管说：“我们相信，如果你只是用一般用户来操作Windows的话，这会是一种很好的方式”。而这一提法，相对于Unix的尽可能的不用root用户操作系统这一观点，整整落后了几十年，Windows的用户很习惯于在Administrator下操作系统，这样，一旦中招，任何程序都以系统管理员的权限运行，所以结果也是毁灭性的。这样操作电脑的方式对于Unix的用户来说简直是不可想像的，因为在Unix下，99%的情况下，操作者都不会使用管理员的账号。\n还记得以前和朋友的一段对话：\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.47 )Loading...\n"
  },
  {
    "content": "",
    "title": "Google居然在阻止人们自杀？",
    "url": "https://coolshell.cn/articles/2296.html",
    "date": "2010-04-01T12:57:29+08:00",
    "description": "\n中文的Google会不会出onebox来劝阻人们翻墙？\n suicide prevention onebox\npoison control onebox\n\n (11 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++ 程序员自信心曲线图",
    "url": "https://coolshell.cn/articles/2287.html",
    "date": "2010-04-01T09:02:15+08:00",
    "description": "\n学习C++很长时间了，也看过很多程序员学习C++的历程。总体来说，C++是一个“双刃剑”式的语言，只有那些熟悉他的人才能把C++这门语言用好。Linus曾说过：“C++是一门很恐怖的语言，而比它更恐怖的是很多不合格的程序员在使用着它”。是的，C++并不是一门速成的语言，其是一门需要长时间磨练和学习的语言，那些说自己熟悉C++语言的程序只能算是轻浮的。详见“21天教你学会C++ ”。\n下面是一个C++程序员在学习过程序中的一个自信心曲线图：\n \n程序员在一开始学习C++的时候，用C++的语法写C觉得很牛，也会觉得自己很快掌握了C++语言，对一切都充满了信心。他们告诉你他们懂C++，其它他们错误，但我们不能说他们在撒谎，因为人总是不知道自己不知道什么。此后，当他们在C++的学习历程中，发现了很多很多稀奇古怪的东西，还有很多相当底层和复杂的东西，他们的将会变得很受挫，很沮丧，还始变得怀疑起，自信心开始下降，甚至有时候他们靠人品来编程。只到有一天，开始开窃，觉得C++的世界不能乱来，需要一定的规则，一定的方法，于是通过大量的错误不停地总结和反省，最终自信心又会被建立起来，经历多年的历练后，才能恢复自信。\n对于大多数的自称自己熟悉C++的程序员来说，基本上来说他们都是用C++的语法来写C。\n (28 人打了分，平均分： 4.46 )Loading...\n"
  },
  {
    "content": "",
    "title": "又一个Javascript试验田",
    "url": "https://coolshell.cn/articles/2276.html",
    "date": "2010-03-31T12:41:32+08:00",
    "description": "\n以前本站发布过一篇《哥是玩程序的》文章向大家展示了用Javascript干的些怪异的事。看来，这样的人并不在少数，这不，我又发现了一个，这回这个好像更有技术含量一些，下面是其试验程序的列表：\nhttp://www.andrew-hoyer.com/experiments\n\n\n\n\n\n\nSimple Sudoku Solver 这是一个“数独游戏”，其在你游戏的过程中可以在空格处提示你可能的数字。\nFebruary 2010\n\n\n\n\n\n\nCloth Simulation 这是一个极端的布料仿真程序。使用鼠标拖曳，按着g键拖曳可以把布悬挂起来。\nAugust 2009\n\n\n\n\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "Emacs配色在线生成器",
    "url": "https://coolshell.cn/articles/2271.html",
    "date": "2010-03-31T09:15:19+08:00",
    "description": "\nhttp://alexpogosyan.com/color-theme-creator/\n点击“Generate config file”，你可以看到生成的Emacs配色配置。\n\n (6 人打了分，平均分： 2.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "“21天教你学会C++”",
    "url": "https://coolshell.cn/articles/2250.html",
    "date": "2010-03-30T08:27:27+08:00",
    "description": "\n下面是一个《Teach Yourself  C++ in 21 Days》的流程图，请各位程序员同仁认真领会。如果有必要，你可以查看这个图书以作参照：http://www.china-pub.com/27043\n\n看完上面这个图片，我在想，我学习C++有12年了，好像C++也没有学得特别懂，看到STL和泛型，还是很头大。不过，我应该去考虑研究量子物理和生物化学，这样，我才能重返98年杀掉还在大学的我，然后达到21天搞定C++的目标。另外，得要特别提醒刚刚开始学习C++的朋友，第21天的时候，小心被人杀害。呵呵。\n当然，上面只是一个恶搞此类图片，学习一门技术，需要你很长的时间，正如图片中的第三图和第四图所示，你需要用十年的时间去不断在尝试，并在错误中总结经验教训，以及在项目开发中通过与别人相互沟通互相学习来历练自己。你才能算得上是真正学会。\n这里有篇文章叫《Teach Yourself Programming in Ten Years》，网上有人翻译了一下，不过原文已被更新了，我把网上的译文转载并更新如下：\n …\n 阅读全文 Read More\n\n (125 人打了分，平均分： 4.78 )Loading...\n"
  },
  {
    "content": "",
    "title": "JAVA的字符串拼接与性能",
    "url": "https://coolshell.cn/articles/2235.html",
    "date": "2010-03-28T09:42:14+08:00",
    "description": "\n概述：本文主要研究的是JAVA的字符串拼接的性能，原文中的测试代码在功能上并不等价，导致concat的测试意义不大。不过原作者在评论栏给了新的concat结果，如果有兴趣的同学建议自己修改代码测试。\n原文出处:http://www.venishjoe.net/2009/11/java-string-concatenation-and.html\n在JAVA中拼接两个字符串的最简便的方式就是使用操作符”+”了。如果你用”+”来连接固定长度的字符串，可能性能上会稍受影响，但是如果你是在循环中来”+”多个串的话，性能将指数倍的下降。假设有一个字符串，我们将对这个字符串做大量循环拼接操作，使用”+”的话将得到最低的性能。但是究竟这个性能有多差？如果我们同时也把StringBuffer,StringBuilder或String.concat()放入性能测试中，结果又会如何呢？本文将会就这些问题给出一个答案！\n…\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "DEMO Spring 2010 获奖产品",
    "url": "https://coolshell.cn/articles/2191.html",
    "date": "2010-03-28T07:44:21+08:00",
    "description": "\n文章来源 mashable.com\n在刚刚结束的 DEMO Spring 2010 中，执行制作人 Matt Marshall 宣布了获得 DEMO 大奖的各类 IT 产品，以及由大众评选出的最佳产品，作为奖品， DEMO 将为该产品提供价值100万美元的 IDG 广告宣传。以下是各类奖项的归属：\n 移动产品 Zosh\nZosh 是一个 iPhone 应用。有了Zosh，你无需使用扫描仪或者传真机即可实现对文档签名，Zosh支持的文档格式有：PDF，Office，以及图像文档。点此处查看 产品详情。\n具体操作方法：\n1. 打开邮件中的附件文档，将其发送至Zosh（本地）。\n2. 在Zosh中打开该文档，使用手写输入签名。\n3. 将签名作为一个“图层”合并到文档中。\n社交和媒体产品 Everloop\nEverloop 是一个网络社交应用，目标用户是8到13岁的儿童。其现在是一个 White Label 产品（由一个公司开发，但由其他公司进行再包装和市场营销的产品），很快将会独立运营。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "别只谈系统备份，谈谈怎样恢复系统吧！",
    "url": "https://coolshell.cn/articles/2155.html",
    "date": "2010-03-25T08:16:20+08:00",
    "description": "\n文章来源 JoelOnSoftware.com\n很久以前就看到这篇文章，它给了我很深刻的印象，搜索了一下 JoelOnSoftware 的中文 Wiki，似乎也没有此文的中文版，那就让酷壳来完成吧。\n\n你备份你的系统了吗？\n你备份服务器了吗？\n你的备份是否存放在另一台机器中？\n你是否有异地备份？\n\n以上都是非常好的问题，也都是很好的备份习惯。\n不过，让我们别再只谈备份了，因为仅仅备份是远远不够的。资深的系统管理员们都会告诉你他们有完美的备份计划，但是问题往往发生在当你需要恢复系统的时候：\n\n备份文件被密钥加密，而遗失或损坏的恰恰就是存放密钥的那台机器。\n存放着大量配置信息的 IIS 元数据库恰好没有备份。\n备份文件一直被拷贝到一个限量2GB的FAT分区，多出来的数据被默默地抛弃掉了。\n你的备份都在一个LTO磁带上，磁带已经和数据中心一起遗失或损坏了（911？）。\n即便你有了备份，仍有可能遇到许许多多的意外情况。\n\n所以，保证基本的系统安全不仅仅取决于你做了备份，还在于你是否能够成功恢复备份。如果你在运营一个 WEB 服务，你需要向我展示你能够在合理的时间内，在一台新的服务器或者是和原来的数据没有任何关系的服务器上，使用近期备份的数据还原出整个网站。\n让我们不要再问人们是否做了系统备份，而是问他们是否能够恢复系统。\n (11 人打了分，平均分： 3.64 )Loading...\n"
  },
  {
    "content": "",
    "title": "BT工作原理演示",
    "url": "https://coolshell.cn/articles/2184.html",
    "date": "2010-03-16T15:09:35+08:00",
    "description": "\n下面这个网站使用Javascript编写了一个BT工作原理演示动画程序。当然，你可能需要使用Chrome浏览器打开，因为他真的很耗CPU。在我的双核（2GHz）T60电脑上用Chrome打开CPU一下就被耗了50%左右。\nhttp://mg8.org/processing/bt.html\n下面是我截的一个图，每个圆代表一个结点，其会通过其它结点下载需要的文件段。结点中间的那个Bar有点类似于eDonkey中的下载进度条。至于为什么要用像彩虹一样的颜色，主要是为了让你看到不同的段是从不同的结点下载的。\n你可以按热键S来加入一个下载完了的结点，用P来加入一下空结点，按R来删除一个结点（有点慢，要等10秒左右吧）。\nBT工作原理演示动画\n关于其它Javascript的一些小玩意，你可以看看这篇文章。\n (7 人打了分，平均分： 2.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "中国仍然是一个很穷的国家",
    "url": "https://coolshell.cn/articles/2179.html",
    "date": "2010-03-14T20:51:49+08:00",
    "description": "\nGoogle最近发布了一个全世界可以开放查询的数据平台，其中包含了多种宏观数据，并且有很方便的作图方式。\nhttp://www.google.com/publicdata/directory\n其中有一项是世界各国人均GDP\n虽然最近一些中国城市房价已经超越我们的想象力，但是从这张图里还是可以看到，我们仍是一个人均非常穷的国家。\n\n (27 人打了分，平均分： 4.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "Martin Fowler 在 ThoughtWorks 内部关于版本控制工具的调查",
    "url": "https://coolshell.cn/articles/2135.html",
    "date": "2010-03-13T06:31:02+08:00",
    "description": "\n文章来源 martinfowler.com\n从2010年2月23日至3月3日，Martin Fowler 在 ThoughtWorks 内部通过开发人员邮件列表进行了一个关于版本控制工具的小调查，共收到99个回复。下面是调查选项定义和调查结果：\n\n非常好 （如果不是最好也非常接近了）\n还行 （不是最好，但是我还是愿意使用）\n问题多多 （我可能会因此强烈建议我的团队使用其他同类工具）\n危险 （非常糟糕的工具，我认为 ThoughtWorks 不应该使用它）\n不知道 （我还没有使用过此工具）\n回复数 （对此工具的回复总数，包括“不知道”选项）\n好评率 （(“非常好”+“还行”)/回复数）\n\n\n\n\n名称\n非常好\n还行\n问题多多\n危险\n不知道\n回复数\n好评率\n\n\nSubversion\n20\n72\n6\n1\n0\n99\n93%\n\n\ngit\n65\n19\n1\n0\n14\n85\n99%\n\n\nMercurial\n33\n27\n2\n0\n36\n62\n97%\n\n\nClearCase\n0\n3\n14\n41\n41\n58\n5%\n\n\nTFS\n0\n0\n32\n22\n44\n54\n0%\n\n\nCVS\n0\n14\n59\n11\n15\n84\n17%\n\n\nBazaar\n1\n13\n3\n0\n80\n17\n82%\n\n\nPerforce\n1\n26\n16\n1\n54\n44\n61%\n\n\nVSS\n1\n1\n11\n64\n22\n77\n3%\n\n\n\nMartin Fowler 补充道：\n\nSubversion，git，和 Mercurial 都得到了较高的好评率，git 得分最高。\n大部分人认为 VSS 很危险，不过也有一两个人认为它还不错。\n大家都不太喜欢 TFS 和 ClearCase，并认为 ClearCase 更为危险。\n我们不用太拘泥于具体数据，特别是对于那些不好的工具的差评都无太大区别，而对于那些优秀的工具的好评却很有一些不同。\n\nMartin Fowler 反复强调这只是一个公司内部的调查，并无误导市场的意思，大家如果感兴趣的话可以点击 文章来源 阅读原文，以及另一篇关于版本控制的文章 VersionControlTools。\n (6 人打了分，平均分： 2.17 )Loading...\n"
  },
  {
    "content": "",
    "title": "Titanium – 桌面和移动应用开发平台",
    "url": "https://coolshell.cn/articles/2117.html",
    "date": "2010-03-10T18:47:43+08:00",
    "description": "\n文章来源 www.readwriteweb.com\n\n\n2010年3月8日，Appcelerator 公司发布了 Titanium 的 1.0 版本。 Titanium 是一个桌面和移动应用程序开发平台，基于此平台，开发人员可以使用标准的 WEB 技术如 HTML，JavaScript，和 CSS 来开发桌面和移动应用程序。\n和其他开发平台所宣传的开发移动应用无需理解本机代码不同， Titanium 允许开发人员使用他们熟悉的编程技术来开发本机（native）移动应用，同时效果和功能与那些使用平台特定语言编写的应用相同，如可以操纵内置相机、播放视频流等等。 Titanium 的产品代码在近几个月内得到了优化，在性能方面得到了多处改进，加载时间由原来的10-20秒下降为3秒，页面切换非常迅速，处理速度提高了5倍。同时还增加了一些新的功能，如超过100个本机界面控件，2D 和 3D 动画及媒体处理机能。有了这些方面的增强，开发人员可以在 Titanium 支持的平台上开发品牌化应用， 休闲游戏， 以及增强现实应用。\n当被问到 Titanium 与其他开发平台的不同之处在哪里时，公司的营销副总裁 Scott Schwarzhoff 解释道：“很多我们的竞争者经仅仅是将 WEB 应用曲解为本机应用提供给客户，而没有提供真正的本机应用解决方案”。提供本机界面（超过100个本机API）的只有我们一家公司，同时我们还提供推通知服务，本机地图，Facebook连接，应用数据分析，增强现实应用，将来还会有更多特性。\n自2009年6月以来，Titanium 开发平台吸引了超过27000名开发人员对公司所谓“本机优势”概念的兴趣（阅读详情）。其中包括对本机控件的支持，基于位置的服务，社交共享，HTML 5，在线和设备内置数据库，集成数据分析，丰富的多媒体等等。\nAppcelerator 承诺在3月份的第三周支持苹果的新平板设备，包括几周后即将发布的 iPad。对黑莓的支持将于五月或六月间发布。Titanium 的社区版本完全免费，专业版本不免费，但是提供技术支持，数据分析以及对新版本的预览。\nTitanium 支持的平台包括： PC， Mac，Linux，最新版本则支持 iPhone 和 Android，Appcelerator 公司即将发布对黑莓和苹果 iPad 的支持。\n (7 人打了分，平均分： 2.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "erlang打包独立环境",
    "url": "https://coolshell.cn/articles/2111.html",
    "date": "2010-03-04T02:55:13+08:00",
    "description": "\n最近公司代码需要在非erlang的系统上执行，需要能在独立的环境里运行erlang。研究甚久，于是写下这篇博文。国内用erlang的朋友不多，希望这篇blog能对有需要的朋友起到参考作用。\nApplication-Vsn/ebin\n/include\n/priv\n/src\n/Application-Vsn.rel\n以上是代码的目录表.\n{release, {“nextim”, “2.0”},\n{erts, “5.7.5”},\n[{kernel, “2.12.3”},\n{stdlib, “1.15.3”},\n{sasl, “2.1.5.3”}]\n}.\n以上是Application-Vsn.rel的内容,[]中是代码本身需要的lib。\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 2.73 )Loading...\n"
  },
  {
    "content": "",
    "title": "Python处理encoding的小技巧",
    "url": "https://coolshell.cn/articles/2109.html",
    "date": "2010-02-08T22:06:00+08:00",
    "description": "\n用Python写过处理文本经常会遇到需要decoding或者encoding, 尤其是处理中文的时候。\nencoding的问题处理起来是个脏活儿，报错不太容易看懂，网上相关资料不太好查。有同感？请继续读下去。\n常规做法是读取文件的时候立刻decode, 所有的处理工作都用unicode，写会文件的时候encode. 但是等到读取的时候在处理的代码读/写起来都很别扭，感觉像穿上鞋以后袜子滑下来了…Python 3.1.1以上的版本解决了该问题。在Python 3.1.1中，打开文件可以加入encoding的参数：\nfile = open(filename, encoding='xxx')\n啊，这样看起来终于舒坦了。 不同写如下的code了\nfile = open(filename)\nfor line in file:\n    decoded_line = line.decode('xxx')\n    do something else\n提倡使用utf8\n (15 人打了分，平均分： 2.87 )Loading...\n"
  },
  {
    "content": "",
    "title": "分享：我的Reader订阅",
    "url": "https://coolshell.cn/articles/2105.html",
    "date": "2010-02-08T21:47:50+08:00",
    "description": "\n应网友workout和其他热心读者的要求，我罗列一些自己觉得值得推荐的feed。用纯文字罗列如下，想找到以下的话可以通过Google。希望大家在此互相分享。\n适合读者：广谱技术爱好者，国外互联网信息爱好者，用户行为和设计爱好者， 语言爱好者，阅读狂。\n技术类\n\nCoding horror\nJoel on software\nunified Python planet\n\n业界信息\n\n谷歌黑板报\nSearch Blog: Bing\nSearch\n百度爱好者\nsilicon valley watcher\nGoogle Blogscoped\nGoogle Code Blog\n月光博客\napple4us\n古奥\n望月的博客\nGoogle Operating System\n\n杰出个人博客\n\nPaul Graham Essays\nPure Pleasure – lixiaolai.com\nThe noisy channel\n李开复新浪博客\n韩寒博客\nthe trump blog\nMatt Cutts\nLinus blog\nPaul Buchheit (Gmail创始人)\nPeter Norvig (人工智能大儒， Google 研究总监)\ntoo (Google 创始人博客）\nAlon Halevy’s Blog\nDaniel Lemire’s blog\nClay Shirky\nEarning My Turns\nHow to change the world\n\n …\n 阅读全文 Read More\n\n (20 人打了分，平均分： 3.75 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何修改微软人体工学键盘的Zoom键",
    "url": "https://coolshell.cn/articles/2097.html",
    "date": "2010-02-07T10:08:44+08:00",
    "description": "\n如果你不是订阅本站的用户，你很肯能可能是通过搜索引擎的魔力来到本文的。\n微软的软件产品咱们暂且不谈，他们生产的键盘鼠标确实很不错。例如，经典的 microsoft natural ergonomic keyboard 4000 （见图）。著名Google工程师博主Matt Cutts用的就是这个（参考链接）。\n可是每个入手该键盘的geek都会觉得，这个弱智的设计师把zoom键放在中间干嘛，应该用来当上下滚轮嘛。\n\n无独有偶，该问题已经被先辈们解决，笔者只搜到了英文文章\n为了让中文读者方便找到并使用，暂且将关键步骤翻译如下：\n\n下载微软键盘驱动 http://www.microsoft.com/hardware/download/download.aspx?category=MK\n找到command.xml文件，应该是在 C:\\Program Files\\Microsoft IntelliType Pro\\\n编辑command.xml文件（建议之前备份），替换所有 <C319 Type=”6″ Activator=”ZoomIn” /> 为<C319 Type=”6″ Activator=”ScrollUp” />,  所有 <C320 Type=”6″ Activator=”ZoomOut” /> 替换为 <C320 Type=”6″ Activator=”ScrollDown” /> 用Notepad或者记事本可以实现，应该是10个左右。\n重启电脑（貌似这一步不能省）\n\n图例：修改前\n\n图例：修改后\n\n这样你就可以用Zoom来替代鼠标滚轮了。\n (9 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "分享：我是如何使用Google Reader的",
    "url": "https://coolshell.cn/articles/2091.html",
    "date": "2010-02-07T09:35:01+08:00",
    "description": "\n相信不少读者都是通过Google Reader (貌似没有中文名) 看到本文的，而多数Google Reader的爱好者都是贪婪的。如果你像我一样，估计未读数量从来都是1000+。遇到强迫症就麻烦了。下面一个方法能让阅读变得有“轻重缓急”。\n\n承认不是所有种子一样重要，有些更新你想立刻知道（例如某新闻类的博客：古奥），有些只是希望不要错过（例如某经典博客：Joe l on Software），还有一些可能只是娱乐用的（例如：煎蛋）\nReader是可以为种子建文件夹的，所有“重要而必读”的种子都可以放在一个文件夹里，文件夹的名称最好是用“_” 开头，这样排序的时候可以在最前面（见图解）\n每当打开Google Reader的时候，先看重要的种子即可，其他的有时间再读。\n\n笔者的Reader界面（献丑了）\n\n\n (12 人打了分，平均分： 2.92 )Loading...\n"
  },
  {
    "content": "",
    "title": "iPad进化图",
    "url": "https://coolshell.cn/articles/2086.html",
    "date": "2010-02-06T10:53:27+08:00",
    "description": "\n\n (35 人打了分，平均分： 3.89 )Loading...\n"
  },
  {
    "content": "",
    "title": "Python程序员的进化",
    "url": "https://coolshell.cn/articles/2082.html",
    "date": "2010-02-01T17:42:48+08:00",
    "description": "\n以前本站发布过一篇《程序员的进化》，以一种幽默的代码展现方式调侃了程序。下面这篇是关于Python程序员的。以阶乘为例，很有意思。\n新手程序员\ndef factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\nprint factorial(6)\n\n第一年的刚学完Pascal的新手\ndef factorial(x):\n    result = 1\n    i = 2\n    while i <= x:\n        result = result * i\n        i = i + 1\n    return result\nprint factorial(6)\n …\n 阅读全文 Read More\n\n (40 人打了分，平均分： 4.28 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何防范密码被破解",
    "url": "https://coolshell.cn/articles/2078.html",
    "date": "2010-02-01T17:18:36+08:00",
    "description": "\n你会用什么样的算法来为你的用户保存密码？如果你还在用明码的话，那么一旦你的网站被hack了，那么你所有的用户口令都会被泄露了，这意味着，你的系统或是网站就此完蛋了。所以，我们需要通过一些不可逆的算法来保存用户的密码。比如：MD5, SHA1, SHA256, SHA512, SHA-3,等Hash算法。这些算法都是不可逆的。系统在验证用户的口令时，需要把Hash加密过后的口令与后面存放口令的数据库中的口令做比较，如果一致才算验证通过。\n但你觉得这些算法好吗？我说的是：MD5, SHA1, SHA256, SHA512, SHA-3。如果你使用的是MD5算法来加密你的口令，如果你的口令长度只有小写字母再加上数字，假设口令的长度是6位，那么在目前一台比较新一点的PC机上，穷举所有的口令只需要40秒钟。而据我们了解，几乎有90%以上的用户只用小写字母和数字来组织其口令。对于6位长度的密码只需要最多40秒就可以破解了，这可能会吓到你。\n如果你愿意花2000美金和一周的时间来构建一个CUDA，那么，你可以在你组建的这个集群中使用进行密码穷举运算，其速度是，1秒钟可以计算7亿个口令。对于目前实际当中使用的比较复杂的口令，其破解率也可以高达每秒一个。当然，这里说的算法是MD5，SHA之类的算法。\n那么，对于这样的一种情况来说，我们怎么办？我们还是有办法的。\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个浏览器市场占有量的图",
    "url": "https://coolshell.cn/articles/2069.html",
    "date": "2010-01-25T14:24:18+08:00",
    "description": "\n下面这个网站是一个关于Web浏览器的市场占有量的图：\nhttp://www.michaelvandaniker.com/labs/browserVisualization/\n这个图是从2002年到2009年，也许未来还会更新，把鼠标移到每个弧上你可以看到那个浏览器的的占有量的百分比。如下图：\n \n这个图本来没有什么，但制作者把其做成了一个圆弧形，这样，看下来就有些不一样了。你还没有看出来？让我们来对比一下这个图和FireFox的logo吧。\n\n (18 人打了分，平均分： 3.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个Windows 3.1的Web网站",
    "url": "https://coolshell.cn/articles/2065.html",
    "date": "2010-01-25T13:50:02+08:00",
    "description": "\n啥也不说了，请大家围观下面这个网站吧。\nhttp://www.michaelv.org/\n打开这个网站，你会看到N年前DOS时代的Windows 3.1的界面，居然还可以扫雷，呵呵。真应了那句话——“只要是可以被Javascript实现的应用或程序，最终都会被Javascript所实现”。另，关于其它Web上更为疯狂的程序，可以查看本站的这篇文章。还有这个在线的IDE。下面是win3.1的截图：\n \n (11 人打了分，平均分： 3.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "各种流行的编程风格",
    "url": "https://coolshell.cn/articles/2058.html",
    "date": "2010-01-22T08:39:24+08:00",
    "description": "\n在过去的N年中，我遇到了很多使用囧然不同风格的开发者，下面是我所知道的一些，你还知道其它的吗？\n散弹枪编程\n这种编程风格是一种开发者使用非常随意的方式对待代码。“嗯，这个方法调用出错了……那么我会试着把传出的参数从 false 变成 true!”，当然依然出错，于是我们的程序员会这样：“好吧，那我就注释掉整个方法吧”，或是其它更为随意的处理方式，直到最后让这个调用成功。或是被旁边的某个程序员指出一个正确的方法。\n如果我们把一个正规的程序员和一个撞大运的程序员放在一起做结地，那么，那个正规的程序可以马上变得发疯起来，并且，可以把正规的程序员的智商降到最低。两个撞大运的程序员不应该在一起做结对编程，这是因为他们破坏性的才能会造成的伤害会比只有一个还差。\n撞大运编程\n这是一种比散弹枪编程要温和一些的编程方式，我相信这种方式可能会是大多数程序员都会使用的方式。这种编程方式经常出现于程序员并不确切知道他们在干什么，也不知道所写的程序的本质和实际，但是可以让程序工作起来。他们以一种撞大运的方式在写程序，某些时候，他们根本就不知道某个错误的原因，就开始稀里糊涂地修改代码。一旦出现问题，他们会用两条路：1）停下来，理解一下程序，找到出错的原因。2）使用散弹枪编程方式开始解决问题。\n测试驱动开发（Test Driven Development）是一种可以用来拯救上百万的撞大运编程的程序员。于是，他们有了一个更为NB的借口：只要我的程序通过测试了，你还有什么话好说？别骂我，测试驱动开发是一个不错的事物，其主要是用来控制撞大运开发所带来的问题。\n …\n 阅读全文 Read More\n\n (51 人打了分，平均分： 4.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "最为奇怪的程序语言的特性",
    "url": "https://coolshell.cn/articles/2053.html",
    "date": "2010-01-21T08:16:18+08:00",
    "description": "\n这些最为奇怪的程序语言的特性，来自stackoverflow.com，原贴在这里。我摘选了一些例子，的确是比较怪异，让我们一个一个来看看。 \n1、C语言中的数组 \n在C/C++中，a[10] 可以写成 10[a] \n“Hello World”[i] 也可以写成 i[“Hello World”] \n这样的特性是不是很怪异？如果你想知道为什么的话，你可以看看本站的这篇文章——《C语言的谜题》中的第12题。 \n2、在Javascript中 \n ‘5’ + 3 的结果是：’53’\n ‘5’ – 3 的结果是：2 \n3、C/C++中的Trigraphs \nint main() {\n   cout << \"LOL??!\";\n}\n上面的这段程序会输出： “LOL|”，这是因为 ??! 被转成了 | ，关于Trigraphs，下面有个表格： \n …\n 阅读全文 Read More\n\n (26 人打了分，平均分： 4.27 )Loading...\n"
  },
  {
    "content": "",
    "title": "“第六感装置”的惊人潜力",
    "url": "https://coolshell.cn/articles/2047.html",
    "date": "2010-01-09T12:10:09+08:00",
    "description": "\n我们总是在于“现实生活”和“电脑的数字生活”中的差异，这两个世界难道不可以合并吗？美国MIT Media Lab（麻省理工学院媒体实验室）的天才学生普拉纳夫- (Prarnav Mistry)，发明了一项结合实体世界和虚拟世界的科技，令人惊喜，感叹创造力的惊人。下面是视频。翻译还OK。\n\n (29 人打了分，平均分： 4.21 )Loading...\n"
  },
  {
    "content": "",
    "title": "PI小数点位数的新纪录",
    "url": "https://coolshell.cn/articles/2043.html",
    "date": "2010-01-08T08:28:48+08:00",
    "description": "\nPI小数点后的位数据个数据的纪录被刷新了，被一台PC机刷新的。新的纪录把PI的小点数后面的位数整到了近2.7万亿位，太BT了。下面的链接是本次经录的通告：\nhttp://bellard.org/pi/pi2700e9/announce.html\n这个通告宣称：\n\n\nPI后的小数点位数被计算到了2,699,999,990,000位。\n\n\n为了保存计算结果，一共花了，1137GB的硬盘空间。\n\n\n本次计算使用了价值2000欧元左右的PC机，CPU是Core i7 CPU at 2.93 GHz ，内存6GB，5个1.5TB的希捷硬盘。\n\n\n操作系统使用的是Linux  64 bit Red Hat Fedora 10 distribution，7.5TB的硬盘被做成了RAID-0阵列，使用了ext4文件系统。\n\n\n整个计算时间花了131天（4个半月），其中，103天用于计算PI的二进制结果，13天用于验证二进制结果，花了12天把二进制转成十进制，最后花了3天再验证了转换。\n\n\n上一次的记录是2.577 万亿小数位，于2009年8月17日创造。其使用了超过百万欧元的超级计算机（Appro Xtreme-X3 Server）。\n\n\n相关的技术细节请看这里：http://bellard.org/pi/pi2700e9/pipcrecord.pdf\n我想了想，算这个玩意花了多少度电，产生了多少废气，太不环保了。呵呵。\n (8 人打了分，平均分： 3.75 )Loading...\n"
  },
  {
    "content": "",
    "title": "CPU的性价比",
    "url": "https://coolshell.cn/articles/2039.html",
    "date": "2010-01-08T08:09:00+08:00",
    "description": "\n下面这个网站是关于CPU的性价比的，其中的性能数据来源于cpubenchmark.net，而价格数据来源于：newegg.com。\nhttp://paulisageek.com/compare/cpu/\n于是，得出了目前性价比最差的是：Intel Xeon X5570 @ 2.93GHz，最好的是：AMD Phenom 9850 Quad-Core，下面是一个性价比表格。\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.92 )Loading...\n"
  },
  {
    "content": "",
    "title": "2010 = 1+2-(3-4-5)*6*7*8-9",
    "url": "https://coolshell.cn/articles/2036.html",
    "date": "2010-01-07T08:22:13+08:00",
    "description": "\n 这是一个数字游戏，使用123456789，并按照123456789的顺序，使用加减乘除以及括号，进行操作使其结果等于2010（原来的游戏是使其值为100，请看这里），那么会有多少种解法呢？下面是924种解法，其让我想起了“24点游戏”。\n这里，如果让你写一段程序来生成所有的可能，你知道怎么写这段程序吗？\n使用单个数\n2010 = 1+2-(3-4-5)*6*7*8-9\n2010 = 1-(2+(3-4-5)*6*7)*8+9\n2010 = 1+2+(3+4*(5+6*7+8))*9\n2010 = 1+2*(3*4*(5+6)-7)*8+9\n2010 = 1*2*3*(4*(5*6+7*8)-9)\n2010 = 1+2+(3+4*(5-6+7*8))*9\n2010 = (1-2-3+4*(5/6+7*8))*9\n2010 = (1+2+3*4)*(5-6+(7+8)*9)\n2010 = 1+2+((3*(4+5)+6)*7-8)*9\n2010 = (1+2+3)*(4*(5*6+7*8)-9)\n2010 = 1+2+3*(4*(5+6)*(7+8)+9)\n2010 = (1*2/3)*((4+5)*6*7*8-9)\n2010 = (1-2-3)*((4+5)/6-7*8*9)\n2010 = (1*2+(3-4*(5/6-7))*8)*9\n2010 = 1*(2+(3-4*(5/6-7))*8)*9\n2010 = (1+2*(3+4))*(5-6+(7+8)*9)\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 3.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序命名的一些提示",
    "url": "https://coolshell.cn/articles/1990.html",
    "date": "2010-01-06T08:24:41+08:00",
    "description": "\n选择一个正确的名字是编程中最重要的事。以前酷壳向大家推荐过两篇文章《编程命名中的7+1个提示》 和《编程中的命名设计那点事》，今天再向大家推荐一篇。一个正确的命名可以让你更容易地理解代码的程序，好的命名可以消除二义性，消除误解，并且说明真实的意图，甚至可以让你有清新的气息以让你更能吸引异性。;-)\n方法，类和变量\n正确的名字可以让你的程序顾名思义，下面是一些提示：\n\n不要使用”ProcessData()“这样的命名\n你如果在你的程序生涯中使用这样的函数名，那么这意味着你将是一个不合格的程序员而会被淘汰或解雇。请明确实际的功能。比如：ValidateUserLogin（验证用户登录） 或 EliminateDuplicateRequests（去除重复请求） 或 ComputeAverageAge（计算平均年龄），等等。\n让命名来帮你设计程序\n让我们假装有这么一条规则是——“任何的函数是有输入/输出的”，那么，你需要思考的是所有的把input变成ouptut的步骤，然后，你可以选择一个简短的句了来说明你的这段程序，然后，把这个短句再精练一下，最终成为你的函数名，而那个短句则成了你程序的结构。\n\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.58 )Loading...\n"
  },
  {
    "content": "",
    "title": "google的免费dns服务器",
    "url": "https://coolshell.cn/articles/2015.html",
    "date": "2009-12-28T19:03:34+08:00",
    "description": "\ngoogle推出了自己的免费dns服务器，以供公众使用。服务器地址是：\ndns1: 8.8.8.8\ndns2: 8.8.4.4\n我在我的机器上测试了一下：\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.08 )Loading...\n"
  },
  {
    "content": "",
    "title": "推荐几个镜像站点",
    "url": "https://coolshell.cn/articles/2011.html",
    "date": "2009-12-27T21:06:26+08:00",
    "description": "\n搜狐的：http://mirrors.sohu.com\n网易的：http://mirrors.163.com\n上海交通大学FTP：http://202.38.97.230\n如果你是教育网的用户，上海交通大学FTP访问速度非常的快。\n:)\n (9 人打了分，平均分： 2.89 )Loading...\n"
  },
  {
    "content": "",
    "title": "粉丝眼中的操作系统",
    "url": "https://coolshell.cn/articles/1998.html",
    "date": "2009-12-24T14:50:46+08:00",
    "description": "\n在发布完《程序员眼中的编程语言》一文后，发现网上还有一个关于操作系统的。如下所示。\n\n图片的横轴是三大操作系统。\n纵轴是各操作系统的粉丝和信徒。\n中间的各个小图片则是，粉丝眼中的操作系统的形象。\n\n关于操作系统，还有这一张图也很有意思。\n\n (52 人打了分，平均分： 4.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员眼中的编程语言",
    "url": "https://coolshell.cn/articles/1992.html",
    "date": "2009-12-24T14:31:25+08:00",
    "description": "\n下图是一个搞笑的图片——程序员眼中的编程语言。\n\n图片的横轴是编程语言。\n纵轴是各语言的程序员、粉丝、信徒。\n中间的各个小图片则是，粉丝眼中的编程语言的形象。\n\n比如说，\n\n第一行第一列，是Java程序员看Java语言的样子，一幢现代化的大厦。\n第一行第二列，是Java程序员看C语言，一个年老过时的骨灰级老头。\n当然，C程序员看Java语言也比较搞，见第二行第一列。呵呵。\n\n其它的大家自己看吧。还有另外一个关于操作系统的《粉丝眼中的操作系统》\n\n \n\n (26 人打了分，平均分： 4.31 )Loading...\n"
  },
  {
    "content": "",
    "title": "C语言的演变史",
    "url": "https://coolshell.cn/articles/1984.html",
    "date": "2009-12-21T08:12:10+08:00",
    "description": "\n1972 – C语言的先驱——B语言，被贝尔实验室开发。B语言是一个很快速的，容易维护的，而且对于从系统到应用开发是很好用的。设计这门语言的整个团队被马上解雇了，因为他们干了一件和电话通讯不相干的事情。最后这个项目转给了 Dennis Ritchie。他把这个语言变得不容易理解，很难维护，而且，只能用于系统方面的编程。而且，他还设计了一个指针系统，保让每一个程序都超过500行，并可以使用操作系统的指针。\n1982 – 大家发现有97% 的C程序调用产生了“缓冲区溢出”问题。于是，C 程序员们开始意识到，就算是不必要也必需要初始化变量。然而，强制性的变量初始化这个明智的决定，很难影响了当时已经写成了的97%的C程序，所以结果什么也没有发生。 \n1984 – 操作系统出现了“错误指针”的问题数量开始戏剧性地增涨。 \n1985 – 一系列的让C语言有面向对象能力的解决方法出现了，一个叫“C With Classes”正准备商业化。然而，大家觉得名字“C With Classes”太清楚和容易被理解了，所以，最终的商业版本叫做—— C++。\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 3.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "【问题】传球问题",
    "url": "https://coolshell.cn/articles/1976.html",
    "date": "2009-12-20T17:41:11+08:00",
    "description": "\n有a,b,c,d,四个人\n互相传球\n从a开始传出\n经过5次传球后\n球回到a的手里\n算总共有多少种传球的方法\n (9 人打了分，平均分： 3.22 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个“精湛”的JS程序",
    "url": "https://coolshell.cn/articles/1973.html",
    "date": "2009-12-18T17:20:44+08:00",
    "description": "\n下面是一个很“精湛”的JS程序：\nhttp://rmd.atdmt.com/tl/DocumentDotWrite.js\n这个JS文件中“精湛”之处在于，其只有一行代码，如下所示：\nfunction DocumentDotWrite(s){document.write(s);}\n下面这个贴子讨论了这个JS文件：\nhttp://forums.thedailywtf.com/forums/p/7872/147330.aspx\n大家都在猜测为什么那个程序员要这么干，下面是一些猜测：\n\n网友superjer说：这是一个伟大的创造，解决了你的键盘“.”键损坏的情况。\n网友Heron说：这是从Character Map上拷贝粘贴下来的。\n网友mfah说：这是世界上第一个用C来包装Javascript的示例。\n网友djork说：我是一个用手机编程的人，这个方法可以让人在手机上更容易输入我的代码。\n网友PSWorx说：可能他们想把document.write作为一个回调函数，但直接把document.write传进去不行。\n还有一个网友说：这么做或者可以阻止网页上的广告阻截器。\n\n呵呵，看来，“超级天才”和“极端愚蠢”可能只是一线之差，只有写这段程序的那个程序员才知道为什么要这么干了。也许，他的键盘的那个键真的是坏了也不一定。\n (12 人打了分，平均分： 3.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "Java异常另类手册",
    "url": "https://coolshell.cn/articles/1970.html",
    "date": "2009-12-17T16:44:15+08:00",
    "description": "\n在这个页面上http://rymden.nu/exceptions.html，你会看到Java的各种异常，不过，你看看各个异常的解释，你会发现非常有趣，下面例举几个吧：\njava.lang.ArithmeticException\n你正在使用计算解决一个你不能自己解释的数学问题，请你重新读一下你的程序，然后，再试一次。\njava.lang.ClassNotFoundException\n你应该是发明创造了一个你自己的类，目前，Java中还没有实现“种姓制度”，但是Java明显使用了巴厘岛的种姓制度。也就是说，如果你是一个武士（wesia），也就相当于印度种姓制度中的第三层——吠舍（vaishya）\njava.lang.IllegalAccessException\n你是一个正在运行Java程序入室盗窃的小偷，请停止对电脑的盗窃行为，离开房子，然后再试一次。\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "纯CSS做的3D效果",
    "url": "https://coolshell.cn/articles/1962.html",
    "date": "2009-12-16T14:04:32+08:00",
    "description": "\n下面是一个用CSS做的一个3D的效果。你可以使用鼠标在图片中移动来显示这个效果。其实，这个效果只是能过移动图片来产生的。其可以工作在Internet Explorer 8, Firefox 3, Opera 9, Safari 3, Chrome 4 和 Konqueror 3.5下。网页在这里：http://www.romancortes.com/ficheros/meninas.html\n\n (25 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "Web程序的最佳测试数据",
    "url": "https://coolshell.cn/articles/1957.html",
    "date": "2009-12-15T15:50:35+08:00",
    "description": "\n这里有一篇Matthias写的关于转义字符文章-“The art of escaping”，这篇文章告诉你有一些比较特殊的字符需要你去认真的处理，不然，你的网站程序轻则出错，重则被人黑了。这些物殊的字符是[<\"@%'&_\\?/:;,>কী €] ，你可以使用这个字符串到任意一个可以输入的Web程序上去做测试。\n下面这个表格告诉你为什么这些字符很特殊。这个列表不会是完整的，而且也永远不会完整。\n\n\n\n\n相关领域\n转义字符\n\n\n\n\nHTML\n< , > , &\n\n\nJSON\n“\n\n\nSQL in mySql\n字符串 “, ‘, 通配符 %, _\n\n\nrfc 1738 for URL-parameter\n;, /, ?, :, “, @, =, & 空格\n\n\n\n\n把这些转义字符放在一起，然后再整些 utf-8 的一些特殊字符。这些utf-8的字符你可以参看本站的Unicode字符预览表一文，并从中获取。另外，你还可以使用下面的这些工具来对你的程序进行调试或检查：\n\n一个高级Web调试插件： firebug\n标准的请求/响应插件： Live HTTP headers\n一些抓包程序： HTTPfox or tamper data\nIE的开发者可以试试这个：Fiddler.com\n\n如果上面的工具都不能帮助你的话，你可能需要打调试日志，或是使用一个透明的代理服务器：如： Charles Web Debugging Proxy （Windows）\n（全文完）\n (9 人打了分，平均分： 3.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "Java读写Excel",
    "url": "https://coolshell.cn/articles/1954.html",
    "date": "2009-12-15T09:36:21+08:00",
    "description": "\n本文主要向你演示如何使用JavaExcel API来读写Excel文件。关于JavaExcel API，这是一个开源的lib库。其相关的feature如下：\n支持Excel 95, 97, 2000, XP, 2003 的制表页。\n可以读写相关的Excel公式 （仅支持Excel 97 及以后版本）\n可以生成 Excel 2000 格式的xls文件。\n支持字体，数字和日期格式。\n支持单元格的阴影，边框和颜色。\n可以修改已存在的制表页。\n国际化多语言集。(公式目前支持，英文，法文，西班牙文和德文）\n支持图表拷贝。\n支持图片的插入和复制。\n日志生成可以使用Jakarta Commons Logging, log4j, JDK 1.4 Logger, 等。\n更多……\n你可以在这里下载：http://jexcelapi.sourceforge.net/，然后，把jxl.jar加到你的Java的classpath中。\n下面是两段例程，一段是如何创建Excel，一段是如何读取Excel。\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 2.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "Web中的省略号",
    "url": "https://coolshell.cn/articles/1949.html",
    "date": "2009-12-15T08:43:59+08:00",
    "description": "\n在Web开发中，对于一种情况很常见。那就是，文本太长，而放置文本的容器不够长，而我们又不想让文本换行，所以，我们想使用省略号来解决这个问题。但是，在今天HTML的标准中并没有相关的标识或属性让你可以简单地完成这个事。但是我们可以使用CSS样式表来完成这个事，在IE，Safari，Chrome，Opera中都可以。但在Firefox中却不行，但我们可以使用jQuery来解决Firefox不兼容的问题。下面是相关的代码示例。\n使用CSS设置省略号\n\noverflow: hidden;\ntext-overflow: ellipsis;\n-o-text-overflow: ellipsis;\nwhite-space: nowrap;\nwidth: 100%;\n\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员的相关笑话（二）",
    "url": "https://coolshell.cn/articles/1941.html",
    "date": "2009-12-14T12:10:44+08:00",
    "description": "\n前面发表过《程序员的相关笑话（一）》现在继续一些相关的笑话。\n牧羊人与IT顾问\n从前，有一个牧羊人，他有很多的羊。一天他赶着他的那群羊到了一条公路边上。突然，有一辆保时洁急驶过来，上面坐着一个年轻人人，穿着Armani的衣服，和Cerutti的皮鞋，Ray-Ban的太阳眼镜，TAG-Heuer的手表，以前Versace的领带。\n他走到牧羊人面前问牧羊人：“如果我能说出你有多少只羊，你能给我一只吗？”\n牧羊人看了看他那一大群数都数不过来的羊，说：“可以！”。\n那个年轻人，于是打开了他的笔记本电脑，接上手机，进入了NASA Webster，通过GPS定位，开始扫描。然后打了40多页充满各位对数微积分的公式的Excel表格，最后通过他的那个高科技迷你打印机打出了150多页的分析报告，然后，他看了看报告，走到牧羊人前说：“你一共有1586只羊！”\n牧羊人拍手道：“牛啊，你说的一点也没错，你挑一只吧”。\n于是，那个年轻人挑了一只，并准备从他的保时捷中拿出一些文档给牧羊人，这时，牧羊人说：“如果我能猜出你是干什么的，我能不能要回我的那只羊？”\n年轻人说：“为什么不呢？”\n牧羊人说：“你是一个IT咨询顾问”\n年轻人说：“你是怎么知道的？”\n牧羊人说：“很简单。首先，我并没有叫你，你就来了。然后，你开始用一些我已经知道的东西向我收费。第三，你根本就不了解我的业务……，所以，现在请你把我的牧羊狗还给我。”\n …\n 阅读全文 Read More\n\n (31 人打了分，平均分： 4.35 )Loading...\n"
  },
  {
    "content": "",
    "title": "哥是玩程序的",
    "url": "https://coolshell.cn/articles/1932.html",
    "date": "2009-12-14T08:35:31+08:00",
    "description": "\n下面一组有趣的Web示例，这些示例使用Web的一些很“土”控件做出一些很有趣的玩意儿。原来，编程是可以用来玩的，看看这些玩程序的人搞出的这些有意思的玩意，简直是玩得太有意思了。不过，请注意，这些东西只能使用Chrome打开，不然，你看不到相关的效果。\n用滚动条做的时间\nhttp://toki-woki.net/p/scroll-clock/，下面的抓图只显示了时和分，后面还有不停跳动的秒。可以在IE，Fireforx和Chrome中查看。\n\n用CheckBox做成一个水滴效果\nhttp://the389.com/works/drops/，这个示例的整个页面由Checkbox构成，你用鼠标点一下其中一个CheckBox，你会看到一个巨大的水滴滴了下去。Chrome中效果更好。\n\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何使用Python操作摄像头",
    "url": "https://coolshell.cn/articles/1928.html",
    "date": "2009-12-11T14:10:30+08:00",
    "description": "\n用过USB摄像头的都知道，你需要使用鼠标来操作它，比如截个图，录个像什么的，要点N次鼠标，对于我们那些不喜欢多次点击鼠标的人来说，这是一件很boring的事情，所以，本文将教你如何使用Python来操作摄像头。\n这里，我们需要三个Python库： VideoCapture， PIL  和 pygame。使用这三个库你可以非常容易的编写一个摄像头程序。之所以使用pygame，其目的就是因为这个库可以处理视频帧（fps）。下面是代码：\nfrom VideoCapture import Device\nimport ImageDraw, sys, pygame, time\nfrom pygame.locals import *\nfrom PIL import ImageEnhance\n\nres = (640,480)\npygame.init()\ncam = Device()\ncam.setResolution(res[0],res[1])\nscreen = pygame.display.set_mode((640,480))\npygame.display.set_caption('Webcam')\npygame.font.init()\nfont = pygame.font.SysFont(\"Courier\",11)\n\ndef disp(phrase,loc):\n    s = font.render(phrase, True, (200,200,200))\n    sh = font.render(phrase, True, (50,50,50))\n    screen.blit(sh, (loc[0]+1,loc[1]+1))\n    screen.blit(s, loc)\n\nbrightness = 1.0\ncontrast = 1.0\nshots = 0\n\nwhile 1:\n    camshot = ImageEnhance.Brightness(cam.getImage()).enhance(brightness)\n    camshot = ImageEnhance.Contrast(camshot).enhance(contrast)\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT: sys.exit()\n    keyinput = pygame.key.get_pressed()\n    if keyinput[K_1]: brightness -= .1\n    if keyinput[K_2]: brightness += .1\n    if keyinput[K_3]: contrast -= .1\n    if keyinput[K_4]: contrast += .1\n    if keyinput[K_q]: cam.displayCapturePinProperties()\n    if keyinput[K_w]: cam.displayCaptureFilterProperties()\n    if keyinput[K_s]:\n        filename = str(time.time()) + \".jpg\"\n        cam.saveSnapshot(filename, quality=80, timestamp=0)\n        shots += 1\n    camshot = pygame.image.frombuffer(camshot.tostring(), res, \"RGB\")\n    screen.blit(camshot, (0,0))\n    disp(\"S:\" + str(shots), (10,4))\n    disp(\"B:\" + str(brightness), (10,16))\n    disp(\"C:\" + str(contrast), (10,28))\n    pygame.display.flip()\n这段代码中的一些要点的解释如下：\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "Javascript 曲线表作图库",
    "url": "https://coolshell.cn/articles/1924.html",
    "date": "2009-12-11T13:44:45+08:00",
    "description": "\ndygraphs 是一个开源的Javascript库，它可以产生一个可交互式的，可缩放的的曲线表。其可以用来显示大密度的数据集（比如股票，气温，等等），并且可以让用户来浏览和解释这个曲线图。在它的主页（http://www.danvk.org/dygraphs/），你可以看到一些示例和用法。\n\n要使用这个库，很简单，只需要包括dygraph-combined.js文件，其文件尺寸很经济，也就45K。\n<script type=\"text/javascript\"\n  src=\"dygraph-combined.js\"></script>\n下面两个示例，你可以把数据写在javascript中，也可以设置一个csv文件。\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "UI的恶梦",
    "url": "https://coolshell.cn/articles/1907.html",
    "date": "2009-12-09T16:04:26+08:00",
    "description": "\nUI可能是编程中最令人头痛的事了。设计UI通常对于程序员来说是一件很痛苦的事情。下面，让我们来看一看一些可怕的UI设计吧，前面几个UI都是出于咱们程序员自己之手，把他们放在这里，希望能引起大家的注意。（国内软件的UI嘛的我就不说了，省得得罪人）下面这个例子不知道你是否让你似曾相识，呵呵，记得我上大学时，用delphi，PB经常开发这样的界面，当时觉得自己特牛！现在看上去嘛，简直就是一个垃圾。（关于UI设计，你可以查看本站的《35个强大的UI设计教程》）\n\n首先，我们先来看一个叫wGetGUI的小工具软件，这是一个100%由程序员设计的UI，如下所示：\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员的相关笑话（一）",
    "url": "https://coolshell.cn/articles/1903.html",
    "date": "2009-12-07T08:12:16+08:00",
    "description": "\n问答\nQ：你是怎么区分一个内向的程序员和一个外向的程序员的？\nA：外向的程序员会看着你的鞋和你说话时。\nQ：为什么程序员不能区分万圣节和圣诞节？\nA：这是因为Oct 31 == Dec 25！（八进制的31==十进制的25）\n \n刹车失灵\n有一个物理学家，工程师和一个程序员驾驶着一辆汽车行驶在阿尔卑斯山脉上，在下山的时候，忽然，汽车的刹车失灵了，汽车无法控制地向下冲去，眼看前面就是一个悬崖峭壁，但是很幸运的是在这个悬崖的前面有一些小树让他们的汽车停了下来，而没有掉下山去。三个惊魂未定地从车里爬了出来。\n物理学家说，“我觉得我们应该建立一个模型来模拟在下山过程中刹车片在高温情况下失灵的情形”。\n工程师说，“我在车的后备厢来有个扳手，要不我们把车拆开看看到底是什么原因”。\n程序员说，“为什么我们不找个相同的车再来一次以重现这个问题呢？”\n …\n 阅读全文 Read More\n\n (51 人打了分，平均分： 4.43 )Loading...\n"
  },
  {
    "content": "",
    "title": "Visual Studio的Vim插件",
    "url": "https://coolshell.cn/articles/1901.html",
    "date": "2009-12-04T09:55:58+08:00",
    "description": "\n前两天向大家介绍了Eclipse 和Vim相互交融的插件，今天向大介绍几个插件，可以让你在Visual Studio中使用Vim的那些操作。\n第一个是：ViEmu，下面是一个演示图片。不过这个插件是商业版的，而且还不支持VS2010。不过据其网站说很快就会支持。最夸张的是ViEmu还支持Word和Outlook，SQL Server，呵呵。\n\n如果你要用免费的的插件，没有问题，试工这个新出的插件吧：VsVim。只不过好像目前只支持VS2010。\n\n 看来Vim还是很强大的，不然，怎会有这些人把其集成到了 Eclipes 和Vistual Studio中，呵呵。Unix下的这个老得都不行了的编辑器正在影响着图形界面的编辑器。最后，让我问问你，你会用Vim吗？\n (9 人打了分，平均分： 3.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "我是怎么招聘程序员的",
    "url": "https://coolshell.cn/articles/1870.html",
    "date": "2009-12-02T08:53:36+08:00",
    "description": "\n很早以前就想写一篇和面试相关的文章了，今天在网络上看到一篇关于如何去面试程序员的英文文章，发现其中有很多和我共鸣的东西，所以仿照其标题通过自己的经历写下了这篇文章。\n工作这么多年来，即被面试过，也面试过他人，对于程序员的面试，经历过很不错的面试，很专业的面试，也经历过一些BT和令人不爽的面试，我个人觉得一个好的面试，面试官是很重要的，所以，本文想从“面试官”的角度来阐述一下。于是，有了下面这样一篇的文章，希望本文对你的职场经历有用，特别是那些正在招聘和面试程序员的朋友，我觉得这篇文章会对大家有很多启示。此外，做为被面试的人，你可以看看本站的《别的程序员是怎么读你的简历的》《程序员需要具备的基本技能》《优秀程序员的十个习惯》其它一些和程序员相关的文章。\n对于招聘方来说，在招聘程序员的时候，我估计面试应聘者时，最主要想知道的是下面三件事：\n\n这个程序员的是否够聪明？\n这个程序员能否把事情搞定？\n这个程序员能和我的团队在一起工作吗？\n\n我相信，这是所有团队经理招人要考虑的三个问题，所有的问题也基本上围绕着这三个问题。有些时候，你也许觉得程序员的技术技能可以同时解决这三个问题，一个技术能力优秀的人必然是一个聪明的，可以搞定事情的人，当然也就能和团队一起工作了。是的，感觉看起来是这个样子，但其实并不是这样的。有些人的确很聪明，但却不能处理好工作上的事情，这样人应该是你的朋友，你的顾问，但不应该是你的雇员。有的人为人很不错，和团队所有人都合得来，但并不是很聪明，但工作很刻苦很努力，这样的人可以成为你的下属，比如某个下属骨干的助手，或是整个团队的助手。如果某个人不能和团队一起工作，无论其有多聪明，解决问题的能力有多强，你都不应该和他在一起工作。人个认为，团队的和谐是一切事情的前提。\n …\n 阅读全文 Read More\n\n (97 人打了分，平均分： 4.64 )Loading...\n"
  },
  {
    "content": "",
    "title": "SQL的Where语句",
    "url": "https://coolshell.cn/articles/1889.html",
    "date": "2009-12-01T13:48:25+08:00",
    "description": "\n某DBA在查看自己的数库日志的时候，看到了数据库服务器上出现了很多很怪异的SQL的Where条件语句，是下面这个样子：（所有的where语句前都有了一个叫“1=1”的子条件）呵呵。\n\n要理解这个事情的原因其实并不难。只要你是一个编写数据库的程序员，你就会知道——动态生成where后的条件的“麻烦”，那就是条件的“分隔”-and或or。下面听我慢慢说来。\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 3.96 )Loading...\n"
  },
  {
    "content": "",
    "title": "Coderun.com 在线开发IDE",
    "url": "https://coolshell.cn/articles/1883.html",
    "date": "2009-12-01T13:41:12+08:00",
    "description": "\n相信大家都还记得我以前向大家推荐的《在线代码编译服务Codepad.org》吧。这回的这个更猛——在线的代码开发的IDE，可以编译，执行，调试。不过，主要针对Web方面的，主要是C#，ASP.NET，Javascript(JQuery)和PHP，很强大哦。那句话是怎么说来的——“如果一个软件可以用Javascript来写，那么这个软件的最终版本会是Javascript”。这个在线的IDE是：\nhttp://www.coderun.com/ide/\n\n有朋友在留言中说，这个项目可能不实用，没什么意思，而我想说，Google的Chrome OS项目可能非常喜欢这个东西。顺便说一下，这个Online的IDE是开源的，源码在这里：http://coderun.codeplex.com/。 \n (14 人打了分，平均分： 3.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "Javascript程序员嘴最脏??",
    "url": "https://coolshell.cn/articles/1850.html",
    "date": "2009-11-30T08:16:54+08:00",
    "description": "\n请看下图，我在Google Code上，针对每个程序语言都搜索了一下“fuck”一词的出现文件的个数X，以及没有出现fuck一词的文件的个数Y，然后放在Excel里求了一下百分比（X/(X+Y) * 100%），做了一个图。结果，JavaScript语言中出现的次数高达0.56%，名列全部语言之首，然后是Perl，C 和 PHP。（对于Javascript程序员的这种行为可以理解，因为IE，因为浏览器嘛，我就不多说了）\n\n相关的数据表格如下：\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.37 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程语言时间地理图",
    "url": "https://coolshell.cn/articles/1863.html",
    "date": "2009-11-30T07:33:04+08:00",
    "description": "\n 有人使用Google Map做了一个网页，把所有编程语言的时间线和地理位置，如下图，上面是一个编程语言的时间轴，下面是Google Map地图，点击编程语言，你可以查看该编程语言的发明者，发明地，和其Hello World示例（点击这里查看更多的Hello World）\nhttp://www.geospat.com/hoprola/\n\n\n（点击小星，可以看到语言的发明者和示例）\n (4 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "C 语言整型谜题",
    "url": "https://coolshell.cn/articles/1857.html",
    "date": "2009-11-29T00:45:17+08:00",
    "description": "\n如题，此篇文章是描述C语言中的整数谜题。\n假定机器字长是32位的，用2的补码表示整数。对以下C表达式，请问它们在所有情况下都正确吗？如果不是，请给出反例。\n初始化：\nint x = foo();\nint y = bar();\nunsigned ux = x;\nunsigned uy = y;\n1. 若x < 0, 则x * 2 < 0\n2. ux >= 0\n3. 若x & 7 == 7， 则(x << 30) < 0\n4. ux > -1\n5. 若x > y, 则-x < -y\n6. x * x >= 0\n7. 若x > 0 && y > 0, 则x + y > 0\n8. 若x >= 0, 则-x <= 0\n9. 若x <= 0, 则-x >= 0\n答案如下：\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "MySQL性能优化的最佳20+条经验",
    "url": "https://coolshell.cn/articles/1846.html",
    "date": "2009-11-27T18:57:33+08:00",
    "description": "\n今天，数据库的操作越来越成为整个应用的性能瓶颈了，这点对于Web应用尤其明显。关于数据库的性能，这并不只是DBA才需要担心的事，而这更是我们程序员需要去关注的事情。当我们去设计数据库表结构，对操作数据库时（尤其是查表时的SQL语句），我们都需要注意数据操作的性能。这里，我们不会讲过多的SQL语句的优化，而只是针对MySQL这一Web应用最多的数据库。希望下面的这些优化技巧对你有用。\n1. 为查询缓存优化你的查询\n大多数的MySQL服务器都开启了查询缓存。这是提高性最有效的方法之一，而且这是被MySQL的数据库引擎处理的。当有很多相同的查询被执行了多次的时候，这些查询结果会被放到一个缓存中，这样，后续的相同的查询就不用操作表而直接访问缓存结果了。\n这里最主要的问题是，对于程序员来说，这个事情是很容易被忽略的。因为，我们某些查询语句会让MySQL不使用缓存。请看下面的示例：\n\n// 查询缓存不开启\n$r = mysql_query(\"SELECT username FROM user WHERE signup_date >= CURDATE()\");\n\n// 开启查询缓存\n$today = date(\"Y-m-d\");\n$r = mysql_query(\"SELECT username FROM user WHERE signup_date >= '$today'\");\n\n上面两条SQL语句的差别就是 CURDATE() ，MySQL的查询缓存对这个函数不起作用。所以，像 NOW() 和 RAND() 或是其它的诸如此类的SQL函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。所以，你所需要的就是用一个变量来代替MySQL的函数，从而开启缓存。\n …\n 阅读全文 Read More\n\n (64 人打了分，平均分： 4.48 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程语言汽车",
    "url": "https://coolshell.cn/articles/1839.html",
    "date": "2009-11-24T18:24:22+08:00",
    "description": "\n以前酷壳发布过《操作系统航空公司》戏谑了一下如果操作系统是航空公司会怎么样的一种情况。现在，我们来YY一下编程语言，如果编程语言是汽车，又会怎么样？\nAda   这是一辆坦克。一个很厚重但很丑的坦克，从不会崩溃。如果你告诉别人你正在驾驶Ada，别人会狂笑不已。但是，你会开着一辆跑车去打战吗？[from Amit Dubey]\n汇编语言   只是一个祼露在外的引擎。你不得不自己去造车，并向其提供汽油，但你在驾车时要小心，因为他会像一只从地狱放出来的蝙蝠一样。其实，对于汇编语言，你自己才是车。[From “Subterfug” off digg.com:]\nBasic   是一辆很简单的车，对于一些短途的交通比如去一些超市商店，他是很有用的。以前这是一个对初学者很流行的车，然而，近来它蜕变成脚本，而更新的车型被抛光以应对长途旅程，但那也只是新瓶装旧酒。[from Przemyslaw Wrzos]\nC   是一辆赛车，它的速度是令人难以想象的快，可惜的是它每50公里就会损毁一次。\nCobol   号称是一辆车，但是，没有哪个“有自尊的司机”会承认以前驾驶过它。\nC#   是一个竞争性的家庭旅行车。一旦你开始使用，你就别想再使用别的竞争者的产品了。\nC++   是一个加大马力的C赛车，其有一堆新增的功能，而且，它只会每250公里损毁一次。可是，一旦它有故障，没人会知道故障发生在哪里。\n …\n 阅读全文 Read More\n\n (14 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "Eclipse 和 Vim",
    "url": "https://coolshell.cn/articles/1837.html",
    "date": "2009-11-23T09:07:40+08:00",
    "description": "\n以前，neo和发布过如何在vim中得到你最喜爱的IDE特性，这是一篇在vim中装一些插件而让Vim拥有IDE的功能，比如代码自动提示等功能。当然，目前，可能强大最好用的IDE就是Eclipse和，而最强大的编辑器又是Vim了，可不可以让这两个东西合二为一呢。没有问题，开源社区的创造力永远不会让你低估。\n在Vim中拥有Eclipse的功能，在Eclipse里有Vim的功能，那么eclim是你的选择了。http://eclim.org/ 相关的中文文档。使用eclim，你可以在vim中有Eclipse的功能，也可以在Eclipse中嵌入Vim编辑器。很酷。\n\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.69 )Loading...\n"
  },
  {
    "content": "",
    "title": "IE6/IE7 0day 漏洞",
    "url": "https://coolshell.cn/articles/1835.html",
    "date": "2009-11-23T00:52:14+08:00",
    "description": "\n\n昨天（2009年11月21日），Symantec发布了IE的一个0day安全漏洞的消息。关于这个消息，截止本文发布时，在中文社区里还没有报导。这是一个关于IE6/IE7处理CSS时的一个漏洞（关于IE和CSS的BUG）。如果你目前还在使用IE6/IE7，那你现在可能是你升级的时候了，当然，有很多人说IE8是没有问题的，但我个人还是建议在补丁出来之前先使用Firefox或Chrome。\n根据Symantec的的报告，他们在第一时间内测试了那个“Exploit Code”（攻击代码），根据测试结果表时，那个JavaScript的攻击代码并不是100%的可靠，而且很不可靠，但安全专家相信，100%完全可靠的“攻击代码”将会马上出现。这意味着，这段攻击代码会马上如潮水一样地放在各个有恶意的网站上，然后，所有的IE6/IE7的，打开JavaScript的用户都会被危及。\n目前，这段攻击代码，虽然很不可靠，但已经被证明在IE6/IE7的 Windows XP SP3上是可靠的，目前还没有相关报告说明有多少台电脑中招了，但我相信，在过去的这个周末，一定有一些人在拼命地在改善这段攻击代码，他们要赶在相关的补丁出来之前。而Microsoft，相信他还是和以前一样，一定要等到攻击很广泛的时候才会开始真正把补丁提上日程。\n最后，说一下攻击代码，这个代码是在Bugtraq邮件组中，这段攻击代码如下所示，这段代码攻击性并不可靠。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "正则表达式生成器",
    "url": "https://coolshell.cn/articles/1830.html",
    "date": "2009-11-20T09:12:17+08:00",
    "description": "\n 对正则表达式很头疼，是不是？每次看到都觉得像看天书似的，别说让人自己整一个出来了。下面这个网站可以帮你生成正则表达式，而且还可以根据不同的语言生成不同的代码示例，很强大。\n\nhttp://www.txt2re.com/index.php3\n打开上面那个网页，你会看到有三步。\n\n\n第一步，输出你想匹配的一个文本示例，然后点“Show Machted”，于是进入第二点。\n\n\n第二步，当你看到那花花绿绿的界面是不要头大（那个配色也太可怕了），那是这个会把你的这个字串每个字符都拆出来，并把单词分隔。于是，你可以点击那些花绿格子间的链接来组织你的正规表达式。，比如：c表示任意字符，还有什么int,day,string之流的东西。（相当ugly的界面）在这一步，你一点要点点什么，不然不会进入第三步。\n\n\n第三步，选择一个编程语言，然后你可以看到相关的代码示例。语言支持：Perl  PHP  Python  Java  Javascript  ColdFusion  C  C++  Ruby  VB  VBScript  J#.net  C#.net  C++.net  VB.net （这么多）\n\n\n总之，这是一个很酷，但却界面很丑陋的在线的正则表达式生成工具。\n \n (16 人打了分，平均分： 3.75 )Loading...\n"
  },
  {
    "content": "",
    "title": "几个有趣的404错误页面",
    "url": "https://coolshell.cn/articles/1826.html",
    "date": "2009-11-19T14:46:54+08:00",
    "description": "\nWindows的经典蓝屏\nhttp://www.nerdiphythesoul.com/404.html\nhttp://huml.org/404.shtml\nIE经典的404错误（但却又不一样）\nhttp://www.homestarrunner.com/systemisdown.html\n出错的时候不忘让你学习学习HTTP的返回码\nhttp://www.notonebit.com/s\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "C语言和sh脚本的杂交代码",
    "url": "https://coolshell.cn/articles/1824.html",
    "date": "2009-11-19T13:47:51+08:00",
    "description": "\n在网上看到了一个把 C语言和bash杂并起来的例子，这个示子如下所示。在下面这个例子中，我们把脚本用#if 0这个预编译给起来，这样就不会让其编译到C语言中了。\n#if 0\necho \"Hello from bash!\"\nexit\n#endif\n#include <stdlib.h>\n#include <stdio.h>\nint main(int argc, char* argv[]) {\n  puts(\"Hello from C!\");\n  return EXIT_SUCCESS;\n}\n下面，让我看看如果来使用这样的程序：\n$ sh test.sh.c\nHello from bash!\n$ gcc test.sh.c -o test\n$ ./test\nHello from C!\n\n你甚至还可以做一个自我编译，并自我运行的源代码。如下所示：\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.93 )Loading...\n"
  },
  {
    "content": "",
    "title": "9个最常见IE的Bug及其fix",
    "url": "https://coolshell.cn/articles/1817.html",
    "date": "2009-11-17T15:33:02+08:00",
    "description": "\n\nInternet Explorer – Web程序员的毒药。在IE上开发时间中有超过60%的时间是花在和IE的bug进行搏斗，让你的开发生产率严重下降。下面是一个教程，告诉你9个IE上最常见的BUG以及如何解决它们。\n1. 居中布局\n创建一个CSS定义把一个元素放到中间的位置，可能是每一个Web开发人员都会做的事情。最简单的做法是为你的元素增加一个margin: auto; ，然而 IE 6.0 会出现很多奇怪的行为。让我们来看一个例子。\n\n#container{\n\tborder: solid 1px #000;\n\tbackground: #777;\n\twidth: 400px;\n\theight: 160px;\n\tmargin: 30px 0 0 30px;\n}\n\n#element{\n\tbackground: #95CFEF;\n\tborder: solid 1px #36F;\n\twidth: 300px;\n\theight: 100px;\n\tmargin: 30px auto;\n\n}\n\n下面是我们所期望的输出：\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 4.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "在上班的时候浏览不相干网页",
    "url": "https://coolshell.cn/articles/1808.html",
    "date": "2009-11-16T13:19:53+08:00",
    "description": "\n相信大家在上班的时候都要去浏览很多与工作无关的网页，但总是害怕被同事尤其是老板看到，所以，你总是会有个“老板键”什么的。当有人从你身边经过的时候，你会很快速地切换你的桌面屏幕，让人看到你还在干与工作有关的事情了。\n现在，一个具有创意的天才解决方案出来了——为什么不把这些与工作无关的网站的样子都变成和工作相关呢？这里有一个示例，真让人拍案叫绝。不知道大家知不知道一个叫http://www.fmylife.com/的网站？这个网站上都是一些“令人难堪”的小笑话，很多是荤的笑话，而有另一个网站是：http://fml.madsravn.dk/——这个网站就是fmylife的翻版，唯一不同的是，它把fmylife.com伪装成了一个Java 2 Platform SE v1.42的技术文档（请注意这个文档中的函数解释的内容），于是你就可以在上班的时候大胆地浏览fmylife.com上的内容了，因为那看起来就像在看Java的API文档。呵呵。\n\n (8 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "超强：Unix道德经(英文版)",
    "url": "https://coolshell.cn/articles/1794.html",
    "date": "2009-11-16T09:30:26+08:00",
    "description": "\n主页：http://mercury.ccil.org/~cowan/upc/\n这是一个人主页，博主说，这是一个“黑客式”版本的 Dao De Ching (字面理解是”way power classic”，道路权力名著).他并对中文其实并不懂。他只是为Jonathan Star的 逐字翻译 而工作，其使用了在线的中文一个词典 zhongwen.com对《道德经》一字一字地翻译。\n他对《道德经》并不是很懂，除了知道那是中文，而且知道这是一个相当老的，而且，2500年前的那些是非常喜欢的一个作品，正如 Ursula K. LeGuin 在 她的版本中所说的一样。作者说《道德经》是对道德，政治和宗教信仰做了很多的解释。到了今天，还有人在读这本书，说明了这本书的不朽，美妙和意味深长。\n下面是《道德经》的 81 个章节 ，作者并没有完全写完（或者说是hack完），你可以点击链接查看其中的内容。\n01 02 03 04 05 06 07 08 09\n10 11 12 13 14 15 16 17 18\n19 20 21 22 23 24 25 26 27\n28 29 30 31 32 33 34 35 36\n37 38 39 40 41 42 43 44 45\n46 47 48 49 50 51 52 53 54\n55 56 57 58 59 60 61 62 63\n64 65 66 67 68 69 70 71 72\n73 74 75 76 77 78 79 80 81\n点击第23章，可以看到hack版的充满Unix术语的经文翻译。下面给出原文和转译版的对照。（老实说，翻译的怎是一个强字了得啊）下面给出中英对照版。\n …\n 阅读全文 Read More\n\n (14 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序语言性能比拼",
    "url": "https://coolshell.cn/articles/1788.html",
    "date": "2009-11-16T08:20:17+08:00",
    "description": "\n  下面这个网页，你可以比较各种程序语言的性能：\nhttp://shootout.alioth.debian.org/u64/index.php\n这个页面，安装的是x64 Ubuntu，CPU是Intel® Q6600® 单核。这个网页支持的语言很多，什么C，C++，Java，python，PHP，Erlang，C#，Ruby，……，还有最新的G0语言。\n在主页上，你可以选择一个语言。比如，我们选择Google的Go语言——Go 6g8g，然后，点击Show按钮，于是，你会看到下面这个界面：\n \n在这个界面上方，你可以选择两种语言，我们选择的是，上面的是Go 6g8g，而下面是的GNU C，于是下面的图表，是这两个语言各种参数和算法的比较图表。\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.13 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go语言更名Issue 9？",
    "url": "https://coolshell.cn/articles/1781.html",
    "date": "2009-11-13T13:37:11+08:00",
    "description": "\nGo语言出了一个Issue，这个Issue的链接在这里：http://code.google.com/p/go/issues/detail?id=9 ，这个Issue的编号是9描述是：\nI have already used the name for *MY* programming language\n意思是，已经有人使用了这go作为其语言的命名了。报告者叫fmccabe，他说到：\n我已经从事于我的一个编程语言，而且都10年了。并且都有很多论文发表了。我非常感激你们Google如果把这个名字修改一下，因为我是不会修改我的语言的名字的！\n于是，开始了回贴：\n\n1楼跟贴说，“给个链接看看”\nfmccabe在2楼说：“我出版了本书在lulu.com上”。\n3楼的说，“是的，你的语言叫“Go!”，你的书在：http://www.lulu.com/content/paperback-book/lets-go/641689”\n4楼说：“三楼你是对的，LZ的语言是‘Let’s Go!’或‘Go!’，Google的叫‘go’，根本就不同啊。”\nLZ不同意在5楼说：“是的，我的语言叫Go!，书名叫：Let’s Go!。而这里的问题不是Google的go是否会有名，而是公平性。”\n\n好事者从来都不少，后面的贴子可想而知了。众多网友纷纷支持LZ，让Google改名。\n\n11楼让LZ找个便宜的律师，还说Google的钱袋很深的。\n14楼的DailyFinance.com的一个MS记者的人也找上了。\n17楼建议Google改名Goo 或Foo\n\n于是，再往后的回贴，众网友们开始纷纷帮Google的go语言改名：\n…\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.70 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go语言源码的一个改动",
    "url": "https://coolshell.cn/articles/1761.html",
    "date": "2009-11-12T08:31:25+08:00",
    "description": "\n2009年11月11日，光棍节，Google发布了Go语言，马上，就有网友在http://code.google.com/p/go/上找到了一个Go语言包文件操作源码/src/pkg/os/file.go文件的一个最新改动。这个改动的作者就是那个大名鼎鼎的Unix之父Ken Thompson（看看人家，都这么老了，还在写程序，佩服佩服，真是顶级程序员啊——《程序员的八个级别》），而这个改动的Log Message如下所示（把屏抓下来，以免以后某日被放到墙外或是google.com数据丢失或是Google公司倒闭）\nSpell it with an “e”\n\n\n \n这是一个很著名的典故，要知道这个典故，你需要知道两件事，一个是Ken Thompson的经典语录，一个是Unix的系统调用。\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 3.75 )Loading...\n"
  },
  {
    "content": "",
    "title": "Go 语言：Google 的新编程语言",
    "url": "https://coolshell.cn/articles/1751.html",
    "date": "2009-11-11T18:01:20+08:00",
    "description": "\nGoogle 今天发布了自制的编程语言，叫做Go，官方网站如下：\n\nhttp://golang.org/\n\n主要参与者名单繁星满天：\n\nKen Thompson (Unix之父之一…好拗口)\nRob Pike (Unix团队成员, 著书《 The Practice of Programming 》and《 The Unix Programming Environment》)\n等等\n\nLogo图标 (一只 Gopher, 金花鼠，作者 Renée French)\n\n为什么Google要做自己的编程语言呢？\n\n快，安全，处理并发 （其余的讲义在此）\n\n似乎Google内部官方编程语言之战在即… C, C++, Java, Python, JavaScript, and now Go and Zimbu(by VIM 的作者)\nGo programming language Tech Talk\n (14 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "恐怖的C++语言",
    "url": "https://coolshell.cn/articles/1724.html",
    "date": "2009-11-11T12:06:25+08:00",
    "description": "\n Linus曾经(2007年9月)在新闻组gmane.comp.version-control.git里和一个微软的工程师（Dmitry Kakurin）争执过用C还是用C++，当时的那个微软的工程师主要是在做Git的Windows版，但他却发现Git的源码居然是C语言写的，而不是C++，于是他（Dmitry Kakurin）在Linux社区里发贴表示对Linux的不满，语言很直接：\n\nPure C as opposed to C++. No idea why. Please don’t talk about portability, it’s BS. （纯C写的，而不是C++，不知道为什么，请别告诉我是为了移植性，这完全是胡扯。）\n\nLinux之父Linus Torvalds马上跟贴，在贴子中，Linus言辞很直接，直接表明C++是一个很恐怖的语言，他在贴子中说：\n\n*YOU* are full of bullshit. C++ is a horrible language. It’s made more horrible by the fact that a lot of substandard programmers use it. （你才是完全在胡扯。C++是一门很恐怖的语言，而比它更恐怖的是很多不合格的程序员在使用着它）\n\nLinus的这个观点我是比较同意的，我个人也在几年前的《STL String类的写时才拷贝》以及以后的一些文章中表达过C++的确并不是一个很成熟的语言，这种观点一直都围绕着我。这是因为它的学习成本实在是太高了，编译器和类背着你做了很多你不知道的事，而且，C++非常容易地出错和发生很多意想不到的问题。\n当然，这篇文章并不是要继续声讨C++，也不是回顾以前的某个事件。我们这里只谈技术。昨天，我在网上看到一个邪恶的C++的示例，在这里给大家share一下，让大家看看C++这种编程语言的恐怖和邪恶的一面。下面的这个例子，比那个“#define  private  public”还更加邪恶。\n …\n 阅读全文 Read More\n\n (41 人打了分，平均分： 4.37 )Loading...\n"
  },
  {
    "content": "",
    "title": "Firefox插件WebMail Notifier",
    "url": "https://coolshell.cn/articles/1714.html",
    "date": "2009-11-11T11:36:20+08:00",
    "description": "\n当你的邮箱有新邮件时，WebMail Notifier此插件会自动提醒你。\n支持：gmail, yahoo, hotmail, daum, naver, empas, nate等。\n\n\n\n\n \n\n\n版本\n1.5.3\n\n\n兼容版本\nFirefox: 1.5 – 3.7a1pre\n\n\n已更新\n2009 年 10 月 8 日 \n\n\n开发者\nByungwook Kang\n\n\n主页\nhttp://webmailnotifier.mozdev.org/ \n\n\n评分\n评分 4 超过了 5 星 728 条意见 \n\n\n下载次数\n3,239,874 \n\n\n\n\n查看：https://addons.mozilla.org/zh-CN/firefox/addon/4490\n (4 人打了分，平均分： 2.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "橡皮鸭程序调试法",
    "url": "https://coolshell.cn/articles/1719.html",
    "date": "2009-11-10T18:00:06+08:00",
    "description": "\n下面，让我来为你介绍一个程序调试大法——“橡皮鸭程序调试法”，这个方法在调试界是很出众的，实施起来相当方便和简易，几乎可以随时随地地实验，几乎不需要借助任何的软件和硬件的支持，你甚至可以把你的程序打印出来，在纸面上进行调试。\n那么，为什么这个方法要叫做橡皮鸭呢？因为橡皮鸭子是西方人在泡澡时最喜欢玩的一个小玩具，所以，这个东西应该家家户户都必备的。因为，这个方法由西方人发明，所以，就被取名为“橡皮鸭”了。\n好了，话不多说，下面是整个调试方法的流程。\n\n找一个橡皮鸭子。你可以去借，去偷，去抢，去买，自己制作……反正你要搞到一个橡皮鸭子。\n把这个橡皮鸭子放在你跟前。标准做法是放在你的桌子上，电脑显示器边，或是键盘边，反正是你的跟前，面朝你。\n然后，打开你的源代码。不管是电脑里的还是打印出来的。\n对着那只橡皮鸭子，把你写下的所有代码，一行一行地，精心地，向这只橡皮鸭子解释清楚。记住，这是解释，你需要解释出你的想法，思路，观点。不然，那只能算是表述，而不是解释。\n当你在向这只始终保持沉默的橡皮鸭子解释的过程中，你会发现你的想法，观点，或思路和实际的代码相偏离了，于是你也就找到了代码中的bug。\n找到了BUG，一定要记得感谢一下那个橡皮鸭子哦。\n\n什么？你觉得这个方法太“愚蠢”，太“弱智”了？是的，看上去，会这样做的人脑子好像是有点毛病。不过，我要告诉你的是，这个方法的确有效。因为，这就是“Code Review”的雏形！下面让我来给你解释一下。\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 4.26 )Loading...\n"
  },
  {
    "content": "",
    "title": "别的程序员是怎么读你的简历的",
    "url": "https://coolshell.cn/articles/1695.html",
    "date": "2009-11-09T10:22:23+08:00",
    "description": "\n下面这个图片来源国外，是一个关于程序员面试时的简历，被人事部门和程序员本身评审的角度不同的图片。当然，这是一个从国外面试的视角制作的图片，不过，可以看出，其中很多东西都是和国内是相同的。让我们通过这个图片也来了解一下自身吧。\n\n下面是我对其做的翻译，翻译水平有限，请大家指正。\n …\n 阅读全文 Read More\n\n (35 人打了分，平均分： 4.49 )Loading...\n"
  },
  {
    "content": "",
    "title": "给我一个序列号",
    "url": "https://coolshell.cn/articles/1693.html",
    "date": "2009-11-09T08:01:04+08:00",
    "description": "\n下面这个链接是CodeSmith官网网站论坛上的一个贴子。http://community.codesmithtools.com/forums/p/10000/37140.aspx。在这个贴子里，某位大哥问CodeSmith要一个序列号，一个叫Blake Niemyjski的人，可能是CodeSmith这家公司的客服人说回答到，如果要序列号，需要找他们的销售人员。\n而这位老哥却说，“我要的是一个被破解的序列号，我手上有很多CodeSmith 5.0版的序列号，都可以使用，而你们把软件升级到了5.1，那些序列号都无法使用了”。客服人员无奈下，只得给出了下面的序列号：\nCS50P-0NLY4-1D10T-W0ULD-TRYT0-45KU5-TH15Q\n当然，这个序列号并不行，而老哥没有发现这序列号中的端倪，继续问，后面，很多“热心网友”们都来帮忙，给了一些如下的序列号：\nBL4K3-WH47K-1ND0F-700LI-57H1S-1DI07-4NYWY\nW3LLH-4S7H3-P3NNY-DR0PP-3D4UY-37U45-5WIP3\nUKINT-RYTH1-51FUH-AVAVR-Y5MAL-P3N1S\n1FUH4-VN0P3-N1STH-1S1S8-3TT3R-JU57K-1DD3N\n呵呵，你看出这些序列号其中的含义了吗？呵呵。下面是翻译：\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.92 )Loading...\n"
  },
  {
    "content": "",
    "title": "把ASCII图转成图片",
    "url": "https://coolshell.cn/articles/1684.html",
    "date": "2009-11-08T00:20:03+08:00",
    "description": "\n我们都知道有很多软件帮我们把图片转成ASCII码图，这里这个工具是帮我们把ASCII图转成漂亮的图片。这个开源的软件是一个用Java写成的一个命令行的工具。对于这个工具的目的，我个人以为如下：\n\n其一，可以把别人的ASCII图转成图片，于是更好看一些。\n其二，你可以使用ASCII码画图，而不需要使用图片编辑器。\n其三，因为是命令行，所以，你完全可以以脚本或程序的方法来作图了。\n\n这个工具软件叫ditaa，其网址是：http://ditaa.sourceforge.net/。\n\n这个小工具支持一些语法定义，可以帮你更好地产生图片，如下所示：\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "Vim的分屏功能",
    "url": "https://coolshell.cn/articles/1679.html",
    "date": "2009-11-07T11:39:53+08:00",
    "description": "\n本篇文章主要教你如何使用 Vim 分屏功能。\n\n  …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 3.72 )Loading...\n"
  },
  {
    "content": "",
    "title": "13个不错的Javascript和CSS的菜单",
    "url": "https://coolshell.cn/articles/1660.html",
    "date": "2009-11-04T19:23:04+08:00",
    "description": "\n以前发布过两篇文章——“30种时尚的CSS网站导航条”和“20个优秀的Javascript导航技术”，今天向大家介绍一下，13个不错的Javascript和CSS的菜单。\n1) 性感的滑动型菜单 \n\n演示： Mootols Version\n演示：Script.aculo.usVersion\n \n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.77 )Loading...\n"
  },
  {
    "content": "",
    "title": "VIM有趣的命令",
    "url": "https://coolshell.cn/articles/1651.html",
    "date": "2009-11-04T19:05:22+08:00",
    "description": "\n前几天逛豆瓣，发现了VIM一个有趣的小技巧。\n在VIM中输入:h!试试看会发现什么。\n再输入:h 42呢？又会有什么发现？\n (19 人打了分，平均分： 4.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "Richard Feynman, 挑战者号, 软件工程",
    "url": "https://coolshell.cn/articles/1654.html",
    "date": "2009-11-04T16:49:30+08:00",
    "description": "\n源文：链接  （本文主要根据挑战者号的问题，以及Richard Feynman那对NASA严厉的批评报告，批评了不适当的“自顶向下”的设计方法，并总结了一下软件工程和其它工程的相通的一些观点。翻译水平有限，欢迎指正）\n\n佛罗里达州，美国东部时间1986年1月28日上午11时39分，挑战者号航天飞机 执行为期6天的STS-51-L 任务，在发射后，其右侧固体火箭助推器（SRB – Solid Rocket Booster）的O型环密封圈（用于连接两节助推器）失效，泄漏出来的热汽达到了5000华氏度，直接蒸发了O型密封圈，并灼烧了毗邻的外部燃料舱，在几秒钟内，外部燃料舱出现结构连接失效，空气的动力迅速分解了航天飞机。在而航天飞机上升72秒以后，助推器脱落，导致航天发飞向侧面滑出。几乎在引航员 Michael J. Smith 发出”Uh oh” 的同时，整个航天飞机完全解体，片刻，航天飞机内部发生爆炸，所有7名宇航员罹难。 那时的我还只是一个小孩，我从电视下方滚动的新闻条目知道了这一惨剧。\n在那个时候，火箭助推器工程师曾经警告过这个O型环可能存在问题，但可惜的是，NASA的管理层忽略了这个问题。美国总统里根委派罗杰斯委员会对事故进行了调查，调查成员包括著名的物理学家Richard Feynman。其不羁的态度和直来直去的方法和罗杰斯委员会的风格形成了鲜明的反差。主席罗杰斯，一个政客，评论Feynman是一个“真正的痛苦”。最后，在委员会提交的报告中，Feynman反判的观点几乎被清除了出去。并且，Feynman曾被主席威胁过要把他的名字从报告中完全除掉，但最终，他们还是同意在报告中加一个附录，但只是个人观点—— Appendix F – Personal Observations on Reliability of Shuttle。\n …\n 阅读全文 Read More\n\n (20 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "装完Ubuntu 9.10后要干的事",
    "url": "https://coolshell.cn/articles/1644.html",
    "date": "2009-10-30T19:10:47+08:00",
    "description": "\nUbuntu 9.10刚刚release，就有人在网上发表了贴子告诉大家在装完这个操作系统后，还需要去安装的一些开源免费软件，相当丰富。不过，这个贴子的链接被GFW干掉了，所以，你需要使用Tor的支持，或是使用Google Reader才能查看源文（RSS链接）。而这个贴子非常长，所以我无法作全文翻译，不过这个贴子的内容具有很强的指导意义，所以我在这里为大家总结一下该文所提到的那些诸多的东西。（关于那些如何翻墙的事情怎么做我就不多说了，网上有很多相关的文章，你自己搜索一下就可以找到）\n基本工作\n1）第一件事自然是下载那些Ubuntu的镜像站点表，以及更新操作系统的一些补丁。“系统”->“管理”-> “更新管理器”。\n2）第二件事是设置文件目录共享。就是在文件夹上点右键，在菜单中选“属性”，然后在对话框中选“共享”，那个对话框整得跟XP几乎一模一样。当然，这需要samba的支持。（sudo apt-get install samba）\n3）接下来是设置时间同步。通过NTP（Network Time Protocol）同步你的时间。通过点击“系统”->“管理”-> “时间/日期”，然后选择“Keep synchronized with Internet servers”（和Internet服务器同步），于是你需要安装NTP协议。（sudo apt-get install ntp）\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.93 )Loading...\n"
  },
  {
    "content": "",
    "title": "文件备份的几个简单命令",
    "url": "https://coolshell.cn/articles/1640.html",
    "date": "2009-10-30T15:16:20+08:00",
    "description": "\n我们知道，备份文件是一件很重要的事情，我在《优秀程序员的十个习惯》一文向大家说明了备份文件应该是程序员最基本的一个习惯。本文主要是向大家介绍一些在备份文件和数据时能用得到的一些示例，当然，这些示例主要是通过一些命令行或是脚本来实现的。这就是用命令行和脚本的优势，你可以实现比较灵活和自动的定制。\n本文中的脚本和示例都是主要是通过zip, tar, ftp, wget和shell脚本来完成。在Linux下，你可以什么也不用安装任何程序，但在Windows下，你需要安装zip 和wget这三个命令（在本文的最后有这三个命令的链接，你可以去下载）\n几个小脚本\n1）首先，我们来看一下，如何给某目录打个zip包。\nWindows:\n zip -r backup.zip \"c:\\yourfolder\"\nLinux: (打包自己的home目录)\ntar -czvf ~/backup.tgz --exclude backup.tgz ~/\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "ldd 的一个安全问题",
    "url": "https://coolshell.cn/articles/1626.html",
    "date": "2009-10-28T00:15:46+08:00",
    "description": "\n我们知道“ldd”这个命令主要是被程序员或是管理员用来查看可执行文件所依赖的动态链接库的。是的，这就是这个命令的用处。可是，这个命令比你想像的要危险得多，也许很多黑客通过ldd的安全问题来攻击你的服务器。其实，ldd的安全问题存在很长的时间了，但居然没有被官方文档所记录来下，这听上去更加难以理解了。怎么？是不是听起来有点不可思议？下面，让我为你细细道来。\n首先，我们先来了解一下，我们怎么来使用ldd的，请你看一下下面的几个命令：\n(1) $ ldd /bin/grep\n        linux-gate.so.1 =>  (0xffffe000)\n        libc.so.6 => /lib/libc.so.6 (0xb7eca000)\n        /lib/ld-linux.so.2 (0xb801e000)\n\n(2) $ LD_TRACE_LOADED_OBJECTS=1 /bin/grep\n        linux-gate.so.1 =>  (0xffffe000)\n        libc.so.6 => /lib/libc.so.6 (0xb7e30000)\n        /lib/ld-linux.so.2 (0xb7f84000)\n\n(3) $ LD_TRACE_LOADED_OBJECTS=1 /lib/ld-linux.so.2 /bin/grep\n        linux-gate.so.1 =>  (0xffffe000)\n        libc.so.6 => /lib/libc.so.6 (0xb7f7c000)\n        /lib/ld-linux.so.2 (0xb80d0000)\n第(1)个命令，我们运行了 ldd 于 /bin/grep。我们可以看到命令的输出是我们想要的，那就是 /bin/grep 所依赖的动态链接库。\n第(2)个命令设置了一个叫 LD_TRACE_LOADED_OBJECTS 的环境变量，然后就好像在运行命令 /bin/grep (但其实并不是)。 其运行结果和ldd的输出是一样的！\n第(3)个命令也是设置了环境变量 LD_TRACE_LOADED_OBJECTS ，然后调用了动态链接库 ld-linux.so 并把 /bin/grep 作为参数传给它。我们发现，其输出结果还是和前面两个一样的。\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "Windows 7 的新粉丝 Linus Torvalds",
    "url": "https://coolshell.cn/articles/1619.html",
    "date": "2009-10-23T14:21:50+08:00",
    "description": "\n正当Windows 7 开始热卖的时候，正当广大北美用户抱怨Windows 7的销售价格，在东方要比西方便宜很多的时候。我们著名的Linus Torvalds来到了日本东京的一个软件商店里“庆祝Windows 7的Release”，难道他是去那里买一份便宜的Windows 7？\n\nLinus Torvalds, 图片来自一个未经确认的 Yodobashi 商店， Tokyo, Japan. 来源: Jim Zemlin/The Linux Foundation (点击看大图)\n这个图片目前还没有新闻报道，不过已有很多来源可以参考了……\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "Ajax开发利器UIzard",
    "url": "https://coolshell.cn/articles/1611.html",
    "date": "2009-10-22T23:40:30+08:00",
    "description": "\n正如UIzard这个名字所暗示的，这是一个User Interface 的Wizard，从字面上理解，这是一个做界面的向导。这有什么奇怪的，Dreamwave之流已经是相当的成熟了，还能好得过它？是的，这个开源的项目，也许并没有那些商业软件那么成熟，不过，我想告诉你的是，这个开源软件绝对是值得我们重点关注的一个软件。\n你可以理解为这是一个Web开发的IDE，不过其集成了Ajax方面的东西。这并不仅仅简单的是那种“所见即所得”的编辑器。而且，它也不信仅可以让那些非程序员非常简单地创建一个从前端到后端的Web应用，而且，他还可以让你连接数据库，创建非常复杂的布局和时间线，甚至于一些套件（白板，在线的类Word，Excel，PPT等功能），所有这些，你只需要简单的点几下按钮就可以了。真是相当的强大。（下面是个抓图）\n\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 2.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "Javascript的两本书",
    "url": "https://coolshell.cn/articles/1608.html",
    "date": "2009-10-22T23:12:25+08:00",
    "description": "\nDefinition Guide 和 The Good Part， 犀牛和蝴蝶，一厚一薄，事情不言而喻。\n\n (9 人打了分，平均分： 3.22 )Loading...\n"
  },
  {
    "content": "",
    "title": "[推荐]基于Mac的Port工具Fink",
    "url": "https://coolshell.cn/articles/1592.html",
    "date": "2009-10-19T19:06:41+08:00",
    "description": "\n看到标题，读者朋友们肯定第一时间想到的MacPort 。\n恩，那是一款非常棒的工具。 不过我更愿意推荐各位使用另外一款工具 Fink(http://www.finkproject.org/).\nFink 项目希望把 Unix 上各种开放源码软件带到 Darwin 和 Mac OS X 平台上。 我们通过修改 Unix 软件使得它可以在 Mac OS X 上编译和运行（“移植”）,并提供一个方便的分发系统使得每个人都可以下载和使用它。 Fink 使用 Debian 中的象 dpkg 和 apt-get 等工具来提供强大的二进制软件包管理。 你可以随意选择是下载预编译好的二进制安装包或从源代码自己构建一切。\n关于 Fink的安装 ，大部分用户可参见http://www.finkproject.org/download/index.php?phpLang=zh。\n不过后面我主要想介绍我的安装方式，因为我的Mac 版本是10.6 64bit.所以还是有些差别。也许上述普通方法有效，但是我并未尝试。\n安装步骤如下（感谢 http://sage.ucsc.edu/~wgscott/xtal/wiki/index.php/64-bit_Fink_for_10.6）\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "Bug 和 Icon 搜索引擎",
    "url": "https://coolshell.cn/articles/1582.html",
    "date": "2009-10-15T10:55:02+08:00",
    "description": "\n以前给大家推荐过一个《PDF电子书搜索引擎》，现在再来推荐两个：\n一个是开源项目的bug搜索引擎（当你想要选用某个开源软件的时候，或是你发现有一些异常的时候，你可以先去看看是否有一些相关的BUG）\nhttp://bugspy.net/\n\n \n还有一个是图标的搜索引擎（那些ICON还是比较精美的，可以用来做UI的开发）\n\nhttp://www.iconfinder.net/\n\n\n\n(全文完)\n (8 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "一张关于操作系统的图",
    "url": "https://coolshell.cn/articles/1579.html",
    "date": "2009-10-15T10:44:53+08:00",
    "description": "\n一图胜千言\n (22 人打了分，平均分： 3.91 )Loading...\n"
  },
  {
    "content": "",
    "title": "bash 函数级重定向",
    "url": "https://coolshell.cn/articles/1574.html",
    "date": "2009-10-14T23:47:25+08:00",
    "description": "\n相信每一个人对于操作系统的重定向不会陌生了。就是>, >>, <, <<，关于重定向的基本知识我就不说了。这里主要讨论bash的重定向中的一个鲜为人知的东西，那就是bash脚本的函数也可以定义相关的重定向操作。这可不是命令级的重定向，这是函数级的重点向。这并不是一个新的东西，我只是想告诉大家一个已经存在了多年但却可能不被人常用的功能。\n关于bash的这个函数级的重定向的语法其实很简单，你只需要在函数结尾时加上一些重定向的定义或指示符就可以了。下面是一个示例：\nfunction mytest()\n{\n        ...\n} < mytest.in > mytest.out 2> mytest.err\n现在，只要是test被调用，那么，这个函数就会从mytest.in读入数据，并把输出重定向到mytest.out文件中，然后标准错误则输出到mytest.err文件中。是不是很简单？\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.18 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员小抄大全",
    "url": "https://coolshell.cn/articles/1566.html",
    "date": "2009-10-13T22:26:30+08:00",
    "description": "\n你是否会经常忘记一些CSS中的函数名或是一些属性名，那个时候，你一定觉得，如果手边有一个“小抄”（Cheat Sheet）就好了。当然，这个“小抄”不是给你作弊用的，这个“小纸条”就是可以让你马上知道那个你最想知道的东西。这个“小抄”上也不需要有所有的东西，就需要那些经常用的就行了。现在，网上有很多这样的“小抄”，它们可能是PDF格式的，可能是PNG格式的，你可以很方便地把其打印出来（可以打印得很小），然后贴在你的电脑旁，一但需要，瞟一眼就可以了，这对于我们的工作是相当方便的。\n之前，酷壳也有两篇关于速查卡的文章《Web设计的速查卡》和《Vim命令速查卡》，不过都不如本贴多。\n下面是N多的各种和样的“小抄”，其中包括了Ajax, C++, Java, Python, PHP, Perl, ASP, Unix, Ruby, Google, HTML, CSS, XML ……..，让我们姑且叫做“程序员小抄大全”吧。当然，他们都是英文版的，可能某些链接你可能需要翻墙软件才能访问。我这里就不教你怎么翻墙了，这样的贴子网上多的是。\n …\n 阅读全文 Read More\n\n (28 人打了分，平均分： 4.07 )Loading...\n"
  },
  {
    "content": "",
    "title": "Google Maps API用法教程",
    "url": "https://coolshell.cn/articles/1561.html",
    "date": "2009-10-13T15:41:23+08:00",
    "description": "\n在过去的一年中，在线地图的发展是相当巨大，我们可以看到在线地图的极有价值的信息和其能力。这其中，最有名气的自然是Google Maps。. Google Maps由一个相当强大的开发引擎并也有一个很大的社区提示支持。\nGoogle 允许各种web masters 通过Google Maps API来增加或自定义他们站点特定的地图，你可能从这里取得Google API key 。一个地图 API key只对一个“目录”或域有效。key绑定了你的域名，你要在网站上放地图，需要有对应的key，否则拒绝读取地图数据，在本地测试可以不用key。当然，你可以申请多个API key。\n创建一个简单的地图\n在你的站点上引入Google Maps 是一件很简单的事情，你只需要加入：\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 3.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "使用Flex Bison 和LLVM编写自己的编译器",
    "url": "https://coolshell.cn/articles/1547.html",
    "date": "2009-10-12T12:47:18+08:00",
    "description": "\n使用Flex Bison 和 LLVM编写你自己的编译器\n原文出处：http://gnuu.org/2009/09/18/writing-your-own-toy-compiler\n 1、介绍\n我总是对编译器和语言非常感兴趣，但是兴趣并不会让你走的更远。大量的编译器的设计概念可以搞的任何一个程序员迷失在这些概念之中。不用说，我也曾今尝试过，但是并没有取得太大的成功，我以前的尝试都停留在语义分析阶段。本文的灵感主要来源于我最近一次的尝试，并且在这一次中我取得一点成就。\n幸运的是，最近的几年，我参加了一些项目，这些项目给了我在建立编译器上很多有用的经验和观点。另外一件事是，我非常幸运得到LLVM的帮助。对于这个工具，我不知道改怎么去形容它，但是他给我的这个编译器的确带来非常大的帮助。\n…\n 阅读全文 Read More\n\n (25 人打了分，平均分： 4.24 )Loading...\n"
  },
  {
    "content": "",
    "title": "用脚本实现哄小孩睡觉",
    "url": "https://coolshell.cn/articles/1539.html",
    "date": "2009-10-12T10:05:38+08:00",
    "description": "\n当然，不并需要一个天才式的人才能做到这个事，其实这个事情很简单。让我来一点一点向你解释。下面是一些准备工作。\n\n首先，你得找一台PC机，得配上光驱，光驱可以破一点。\n然后，你得给这台PC机上装上Linux，不需要太多的东西，最基本的就行了。\n然后，你得写下下面的代码。\n\n …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 4.08 )Loading...\n"
  },
  {
    "content": "",
    "title": "到处都是Unix的胎记",
    "url": "https://coolshell.cn/articles/1532.html",
    "date": "2009-10-11T18:01:06+08:00",
    "description": "\n一说起Unix编程，不必多说，最著名的系统调用就是fork，pipe，exec，kill或是socket了（fork(2), execve(2), pipe(2), socketpair(2), select(2), kill(2), sigaction(2)）这些系统调用都像是Unix编程的胎记或签名一样，表明着它来自于Unix。\n下面这篇文章，将向大家展示Unix下最经典的socket的编程例子——使用fork + socket来创建一个TCP/IP的服务程序。这个编程模式很简单，首先是创建Socket，然后把其绑定在某个IP和Port上上侦听连接，接下来的一般做法是使用一个fork创建一个client服务进程再加上一个死循环用于处理和client的交互。这个模式是Unix下最经典的Socket编程例子。\n下面，让我们看看用C，Ruby，Python，Perl，PHP和Haskell来实现这一例子，你会发现这些例子中的Unix的胎记。如果你想知道这些例子中的技术细节，那么，向你推荐两本经典书——《Unix高级环境编程》和《Unix网络编程》。\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "图片搜索引擎优化Checklist",
    "url": "https://coolshell.cn/articles/1528.html",
    "date": "2009-10-11T11:17:01+08:00",
    "description": "\n今天，专业的搜索引擎优化SEO（Search Engine Optimizers）会让你的网页或文章能更多得被搜索并访问到。而图片的搜索优化则是这项技术中非常特别的一部分，它可以让你的图片更容易地被人搜索到，比如：艺术图片，服务设计，或是家具等等。相信大家都知道图片远比文字更有吸引力，这是因为我们都知道——“一图胜千言”。\n\n在搜索引擎的世界里，有一组有限的因素决定着图片的位置。下面是一个Checklist可以让你把你的图片搜索优化做得更好。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "GDB 7.0 发布",
    "url": "https://coolshell.cn/articles/1525.html",
    "date": "2009-10-09T16:39:16+08:00",
    "description": "\n2009年10月06日，GDB7.0正式发布，新的版本你可以在这里下载。本次版本，不但有大家所关注的《GDB回溯调试技术》，同样还有其它大量的新特性，和对新平台的支持。\n新版的GDB7.0支持如下新的平台或配置：\n\nx86/x86_64 Darwin\nx86_64 MinGW\nLattice Mico32\nx86/x86_64 DICOS\nS+core 3\nThe remote stub now supports x86 Windows CE\n\n其主要的新加入的功能有：（看上去相当地高科技啊，很多术语都不知道怎么翻译，请注意后面的相关解释）\n\nPython 脚本调试\n回溯调试，调式过程记录并重演。\n不间隔调试。 Non-stop debugging\n并行调试。 Multi-architecture debugging\n多进程调试。Multi-inferior, multi-process debugging\n\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 2.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "mochiweb参数化模型Req相关功能",
    "url": "https://coolshell.cn/articles/1516.html",
    "date": "2009-09-30T20:00:34+08:00",
    "description": "\n本文的笔记讲述如何从client请求中获取各种参数,如method, request path, headers, cookie等。\nMochiweb是Erlang实现的一个开源Web服务器，它设计的一个亮点就是他本身的Http请求的参数化模型。因此我们可以用OO的方式来理解它的相关用法。\n它的实现在mochiweb_request模块.在mochiweb中,每个client请求其构造一个 Req 对象(注：这个“对象“只是便于理解的提法), Req 可以理解成 mochiweb_request 的一个参数化或实例化.\n…\n 阅读全文 Read More\n\n (9 人打了分，平均分： 2.89 )Loading...\n"
  },
  {
    "content": "",
    "title": "高科技：GDB回溯调试",
    "url": "https://coolshell.cn/articles/1502.html",
    "date": "2009-09-28T17:14:08+08:00",
    "description": "\n也许大家知道，GDB 版本7.0 (2009年9月release) 会是第一次开始支持Reversable Debugging （回溯调式技术），这是一种可以让在debug程序时当我们运行单步调试或是运行到断点时，可以以逆向执行程序的一种技术。（这是GNU的新闻链接）\n下面是GDB7.0版本所支持的回溯调试的命令，其中包括，continue，step，以及调试方向的设置。\nreverse-continue (‘rc’) — 继续程序运行到断点，但是是逆向运行程序。\nreverse-finish — 逆向运行程序直到跳出本层函数。\nreverse-next (‘rn’) — 语句单步向后跟踪程序。\nreverse-nexti (‘rni’) — 指令单步向后一条指令。\nreverse-step (‘rs’) — 向后执行一条语句，单步进入。\nreverse-stepi — 向后执行一条指令，单步进入。\nset exec-direction (forward/reverse) — 设置程序执行方向，向前或向后。\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.64 )Loading...\n"
  },
  {
    "content": "",
    "title": "算法和数据结构词典",
    "url": "https://coolshell.cn/articles/1499.html",
    "date": "2009-09-28T11:33:35+08:00",
    "description": "\n我们知道，在编程的世界里，主要就是两个事，用一定的算法去处理一定的数据。算法可以理解为业务逻辑流程，而数据自然一定是按某种结构来存放，这就是数据结构。我们知道，数据结构的修改一定会导致算法的修改，我们也知道，数据结构直接关系到了整个程序的繁简性，高效性。而算法则是关系到数据处理的时间、空间性能，以及日后的扩展和维护。这两个东西是计算机科班出生的人或是需要学习编程的人必需要注意的两件头等大事。\n下面这个网站，由 Software and Systems Division, Information Technology Laboratory 创建。\nhttp://xlinux.nist.gov/dads/ \n\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 4.27 )Loading...\n"
  },
  {
    "content": "",
    "title": "TCP网络关闭的状态变换时序图",
    "url": "https://coolshell.cn/articles/1484.html",
    "date": "2009-09-27T16:11:19+08:00",
    "description": "\nTCP共有11个网路状态，其中涉及到关闭的状态有5个。\n在我们编写网络相关程序的时候，这5个状态经常出现。因为这5个状态相互关联，相互纠缠，而且状态变化触发都是由应用触发，但是又涉及操作系统和网络，所以正确的理解TCP 在关闭时网络状态变化情况，为我们诊断网络中各种问题，快速定位故障有着非常重要的作用和意义。\n下是是根据W.Richard Stevens的《TCP/IP详解》一书的TCP状态转换图。\n\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.08 )Loading...\n"
  },
  {
    "content": "",
    "title": "非常简单的Python HTTP服务",
    "url": "https://coolshell.cn/articles/1480.html",
    "date": "2009-09-27T11:34:10+08:00",
    "description": "\n如果你急需一个简单的Web Server，但你又不想去下载并安装那些复杂的HTTP服务程序，比如：Apache，ISS等。那么， Python 可能帮助你。使用Python可以完成一个简单的内建 HTTP 服务器。于是，你可以把你的目录和文件都以HTTP的方式展示出来。佻只需要干一件事情，那就是安装一个Python。\n实际上来说，这是一个可以用来共享文件的非常有用的方式。实现一个微型的HTTP服务程序来说是很简单的事情，在Python下，只需要一个命令行。下面是这个命令行：（假设我们需要共享我们的目录 /home/haoel 而IP地址是192.168.1.1）\n\n$ cd /home/haoel\n$ python -m SimpleHTTPServer\n\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "CentOS上php的问题及Selinux安全设置",
    "url": "https://coolshell.cn/articles/1462.html",
    "date": "2009-09-26T09:00:54+08:00",
    "description": "\n最近有位站长在用我们WebIM客户端的时候，无法登录我们的WebIM服务器，十分惊讶。 在我们的用户里尚属首例，其实更惊讶的是我的CentOS也遇到了同样的问题。然后分析了这位站长的HttpResponse , Shamee :( 一样的OS.\n搜了一下，发现的解决方法都是在代码上。 我想可能关键词有错误，因为我坚信我的问题肯定不在代码上，应该是来自OS本身的限制。于是重新debug了一下代码，报错 permission (13) connection。然后直接在洋人的邮件列表里搜了一下。\n问题确定了 是SeLinux(http://zh.wikipedia.org/wiki/SELinux)安全策略的限制。\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 2.82 )Loading...\n"
  },
  {
    "content": "",
    "title": "微软在从Google赢取搜索引擎市场份额",
    "url": "https://coolshell.cn/articles/1457.html",
    "date": "2009-09-22T23:01:50+08:00",
    "description": "\n7月到8月，微软市场份额从8.9%到了9.3%;  Google掉了1.7%\nBing显然让Google有些紧张，不仅Bing在界面上赢得了一部分消费者的好评，而且其在某些垂直领域的深度整合使得Bing的盈利能力具有了相当竞争力。相信Google在幕后紧锣密鼓的测试新界面和新搜索功能的同时，也在严阵以待地部署销售团队（如果经济萧条好转，旅游和健康将会是最先复苏的领域，也是Bing目前占有优势的战场）\n拭目以待吧！\n原文地址：http://news.bbc.co.uk/2/hi/technology/8268356.stm\n…\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++的std::string的“读时也拷贝”技术！",
    "url": "https://coolshell.cn/articles/1443.html",
    "date": "2009-09-19T21:19:33+08:00",
    "description": "\nC++的std::string的读时也拷贝技术！\n嘿嘿，你没有看错，我也没有写错，是读时也拷贝技术。什么?我的错，你之前听说写过时才拷贝，嗯，不错的确有这门技术，英文是Copy On Write，简写就是COW,非常’牛’！那么我们就来看看这个’牛’技术的效果吧。\n我们先编写一段程序\n…\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "WebTTY！太酷了！",
    "url": "https://coolshell.cn/articles/1441.html",
    "date": "2009-09-19T10:56:09+08:00",
    "description": "\n这真是一件很Cool的事，在Web上操作Linux，请访问下面这个链接：\nhttp://19.testape.com/webtty_page.php\n于是你会看到页面中间的红色，一个小操作系统启动了，红色的最下方是一个bash-2.05b#\n试着输入一下命令吧。\nbash-2.05b# uname -a\nLinux (none) 2.6.18 #2 Mon Dec 29 19:47:06 UTC 2008 i686 GNU/Linux\n命令支持的不多，好像只是一个单机版的虚拟机，一但你打开网页时就起动一个。当然，也不排除其完全是假的，因为太简单了，一切都可以fake出来。\n (5 人打了分，平均分： 3.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "Alice梦游UNIX仙境",
    "url": "https://coolshell.cn/articles/1439.html",
    "date": "2009-09-19T10:33:00+08:00",
    "description": "\n本文来源：http://www.pma.caltech.edu/Publications/alice.in.unix.land.html\n（这是一篇1989年的文章）\nAlice 正在在她的显示器上读着一些信息，她开会怀疑所有的事情并不是应该的那样。“程序太大了，而无法适应内存”，她读到。\n“一个很奇怪的事情”，她说，“我所做的也就是在启动我的字处理程序会运行了14个TSR（terminate-and-stay-resident 常驻程序）。所有这些程序需要使用4M的内存，我希望我能使用超过640K以上的内存”。\n就在那个时候，一个小的白色的顾问（一个非常白的顾问）跑过了房间。“哦，我的外套和领带”，他说到，“我要迟到了。并且是每小时150元。”Alice本想对他说点什么，他却跳到了Alice的显示器里并到在操作系统后面消失了。\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "编译vim解决中文支持",
    "url": "https://coolshell.cn/articles/1432.html",
    "date": "2009-09-19T08:47:04+08:00",
    "description": "\n最近开始抛弃Ubuntu折腾CentOS 5.3(注：无意挑起OS之争)，每当换一个OS，第一个配置的就是VIM。\n介于以前在MacOSX的编译经验，直接三部曲\n./configue && sudo make && sudo make install\n解决的问题。  但在CentOS之后发现无论如何都不支持中文。\n通过文档的翻阅和google的搜索，发现了问题出现在编译上。vim支持中文需要2个基本feature：multi_byte和iconv。\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "Oracle的战书！",
    "url": "https://coolshell.cn/articles/1426.html",
    "date": "2009-09-11T16:24:47+08:00",
    "description": "\nhttp://www.oracle.com/features/suncustomers.html\n (6 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "8个实用而有趣Bash命令提示行",
    "url": "https://coolshell.cn/articles/1399.html",
    "date": "2009-09-07T17:44:22+08:00",
    "description": "\n很多人都对过命令行提示的重要性不屑一顾，甚至是一点都不关心。但是我却一点都不这么认为，一个好的命令行提示可以改变你使用命令的方式。为此，我在internet上找到一些非常实用，优秀，并有趣的bash的命令行提示。下面我将我最喜欢使用的一些命令行提示罗列如下。\n注意  –  要使用下面这些提示，你可以拷贝粘贴这些以”PS1″打头的内容到你的终端上，为了使你的改变永久生效，还要将这些内容粘贴到你使用用户的~/.bashrc文件中去。\n …\n 阅读全文 Read More\n\n (14 人打了分，平均分： 3.79 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程真难啊",
    "url": "https://coolshell.cn/articles/1391.html",
    "date": "2009-09-03T22:24:57+08:00",
    "description": "\n上周，在Sun的Java论坛上出现了一个这样的帖子，这个贴子的链接如下：\nhttp://forums.sun.com/thread.jspa?threadID=5404590&start=0&tstart=0\nLZ的贴子翻译如下：\n大家好，我是一个Java的新手，我有一个简单的问题：请问我怎么才能反转一个整数的符号啊。比如把-12转成+12。是的，毫无疑问这是个简单的问题，但我弄了一整天我也找不到什么好的方法。非常感谢如果你能告诉我Java有什么方法可以做到这个事，或者告诉我一个正确的方向——比如使用一些数学库或是二进制方法什么的。谢谢！\n这个贴子的沙发给出了答案：\n …\n 阅读全文 Read More\n\n (65 人打了分，平均分： 4.66 )Loading...\n"
  },
  {
    "content": "",
    "title": "十个Web开发文章和教程",
    "url": "https://coolshell.cn/articles/1387.html",
    "date": "2009-08-31T17:18:41+08:00",
    "description": "\n下面是十个在2009年8月份里出现的十个非常不错的Web开发方面的文章和教程。推荐给大家，当然，都是英文啦。如果你愿意，欢迎翻译后提交给酷壳。\n1）一个简单的Lava 灯式的菜单（使用jQuery完成）\n2）使用jQuery自动生成文章内容的目录。就像是使用Word一样，设置一下标题，然后可以自动生成文章的目录。\n3）使用jQuery为图片创建图片标题和描述。这是一个超Cool的效果，当你的鼠标移到图片上的时候，图片的上下会出现遮覆，上面是标题，下面是描述，相当不错的用户体验，当鼠标移开后，遮覆消失。\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何调试bash脚本",
    "url": "https://coolshell.cn/articles/1379.html",
    "date": "2009-08-31T15:53:40+08:00",
    "description": "\nBash 是Linux操作系统的默认Shell脚本。Shell是用来处理操作系统和用户交互的一个程序。Shell的脚本可以帮助用户自动化地和操作系统进行交互。你也可以理解为一种脚本式的编程。即然有编程，那么，程序的编译器，解释器，调试器就必不可少了，Bash也一样，但在调试方面可能会有一些和编程语言不一样的东西和技术，所以，下面这篇文章主要是说明调试bash脚本的各种技术。\n跟踪脚本的执行\n你可以让bash打印出你脚本执行的过程中的所有语句。这很简单，只需要使用bash的-x选项就可以做到，下面让我们来看一下。\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "初学C#编程的注意事项",
    "url": "https://coolshell.cn/articles/1375.html",
    "date": "2009-08-31T12:15:05+08:00",
    "description": "\n下面是8个C#编程时的注意事项是给初学者的，可能你知道，也可能你不知道，不过这些都是一些可能会让人疏忽的地方，还是要注意一下。\n1.使用String变量:\n考虑有下面的一个程序想判断一下字符串是否有内容。\n\nif (someString.Length > 0)\n{\n    // …\n}\n\n但是，这个字符串对象很可能是个空对象，所以，最好先判断一下null\n\nif  (!String.IsNullOrEmpty(someString))\n{\n    // 是不是更好一些？\n}\n\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 3.59 )Loading...\n"
  },
  {
    "content": "",
    "title": "谁写了Linux",
    "url": "https://coolshell.cn/articles/1360.html",
    "date": "2009-08-25T19:36:19+08:00",
    "description": "\n2009年8月，Linux软件基金会发布了一份叫《Who Writes Linux and Who Supports It》(PDF)的报告。这份报告主要对Linux 2.6.x的开发进行了全方位的统计。看了以后才知道，原来Linux的开发的生产率竟是这样的惊人，而且相当的的令人振奋，所以，在第一时间转过来给大家看看。让人不得不惊叹，这不可思议的具有非凡活力的社区。（注意，我们这里说的是Linux，不是GNU的那些东西，所谓Linux就是Linux的Kernel）\n下面是一个导读，希望每一个看到这篇文章的朋友都能看看原文的报告：《Who Writes Linux and Who Supports It》(PDF)\n这份报告的一开始就对Linux的开发进行了总结：\n\n每2-3个月一个release\n最近的每一次release都超过10000个补丁\n有超过1000个开发人员进行开发，他们来自200个公司或组织。\n自2005年以来，超过5000个来自500个不同公司的开发人员为Linux内核做过贡献。\n自2008年以来，每次release，都大约增加了10%左右的开发人员，而且，代码码达到了2.7百万行。\n\n是的，这样的生产率真是太疯狂了。下面是这份文档中所涉及的一些介绍和一些具体的统计数据。\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 3.89 )Loading...\n"
  },
  {
    "content": "",
    "title": "Unix Pipes 管道原稿",
    "url": "https://coolshell.cn/articles/1351.html",
    "date": "2009-08-25T00:17:11+08:00",
    "description": "\n\n40年前，Unix操作系统横空出世，Unix不仅仅带来了一个操作系统，还创造C语言，Socket，开源，黑客等等文化，这些文化影响着整个计算机世界的文明，直到今天。\n如果说Unix是计算机文明中最伟大的发明，那么，Unix下的Pipe管道就是跟随Unix所带来的另一个伟大的发明。管道的出现，解决的就是让不同功能的程序可以互相连通通讯，从而可以让软件开发，程序开发更加的“高内聚，低耦合”，从而可以让程序“Do one thing, Do it well”，从而可以让程序“Keep it Simple Stupid”等等，这一哲学引影了一代又一代的软件架构，直到今天的云计算。\n管道的发名者叫，Malcolm Douglas McIlroy，他也是Unix的创建者，是Unix文化的缔造者之一。他归纳的Unix哲学如下：\n程序应该只关注一个目标，并尽可能把它做好。让程序能够互相协同工作。应该让程序处理文本数据流，因为这是一个通用的接口。\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.55 )Loading...\n"
  },
  {
    "content": "",
    "title": "Unicode字符预览表",
    "url": "https://coolshell.cn/articles/1331.html",
    "date": "2009-08-24T23:45:36+08:00",
    "description": "\n关于Unicode的字符表，你可以在这里下载：\nhttp://www.unicode.org/Public/5.1.0/ucd/UnicodeData.txt\n而有热心人通过上面个表格，使用JavaScript制作了下面这个网页，其穷举并可以显示上述定义的所有的Unicode字符。\nhttp://www.ftrain.com/unicode/\n打开这个网页，左边的那个大表格是一个10×10的列表，每个小单元格上面是这个字符的样子，下面是这个字符的HTML输入格式。这个表格下面是一个预览格，因为有些这符太细腻了。\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "Erlang和Python互通",
    "url": "https://coolshell.cn/articles/1313.html",
    "date": "2009-08-24T22:30:49+08:00",
    "description": "\n最近开发 Erlang ,对其字符串处理能力无言至极,于是决定把它和python联合起来,打造一个强力的分布式系统,等将来需要系统级开发时,我再把 C++/C组合进来.\n首先参考了 Erlang 官方文档和 http://blog.developers.api.sina.com.cn/?tag=erlang 以及 http://kazmier.net/computer/port-howto/ .\n研读了将近24个小时, 才终于完全把问题解决.  起名为town，town在英文里表示集市，也就是代表各种语言在这里的交流与互动。) )\n…\n 阅读全文 Read More\n\n (9 人打了分，平均分： 2.78 )Loading...\n"
  },
  {
    "content": "",
    "title": "在线代码编译服务Codepad.org",
    "url": "https://coolshell.cn/articles/1310.html",
    "date": "2009-08-23T20:14:44+08:00",
    "description": "\nCodepad.org是一个很有意思的网站，它的主页很简单，左边是可以编译并执行的程序语言，右边则是让你输入程序的输入框，输入框的下面是一个“Run Code”的复选钮和一个“Submit”的提交按钮。\n其操作起来也非常简单，先选中你要编译并运行的程序语言，然后在输入框中粘贴或输入程序的原代码，然后，点击提交，你就可以看么你程序编译出错的提示，或是执行的结果。\n也许，你会觉得很无聊天，但我觉得这在某些时候会非常有用，尤其是你找不到编译器而又想验证一段代码的时候，这种时候还是比较多的。特别是我们很难有一台可以运行所有语言的电脑，如果有的话，那一定是你自己的个人电脑，当你不使用你自己的电脑时，你就会着急了。而且，我觉得这项服务非常地有意思，因为，这样一来，你甚至可以在你的手机上写任何语言的程序了。\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.88 )Loading...\n"
  },
  {
    "content": "",
    "title": "Code Review中的几个提示",
    "url": "https://coolshell.cn/articles/1302.html",
    "date": "2009-08-20T23:49:49+08:00",
    "description": "\nCode Review应该是软件工程最最有价值的一个活动，之前，本站发表过《简单实用的Code Review工具》，那些工具主要是用来帮助更有效地进行这个活动，这里的这篇文章，我们主要想和大家分享一下Code Review代码审查的一些心得。\n首先，我们先来看看Code Reivew的用处：\n\nCode reviews 中，可以通过大家的建议增进代码的质量。\nCode reviews  是一个传递知识的手段，可以让其它并不熟悉代码的人知道作者的意图和想法，从而可以在以后轻松维护代码。\nCode reviews 也鼓励程序员们相互学习对方的长处和优点。\nCode reviews 也可以被用来确认自己的设计和实现是一个清楚和简单的。\n\n你也许注意到了在上面的Code Reivew中的诸多用处中，我们没有提到可以帮助找到程序的bug和保证代码风格和编码标准。这是因为我们认为：\n …\n 阅读全文 Read More\n\n (23 人打了分，平均分： 4.43 )Loading...\n"
  },
  {
    "content": "",
    "title": "科技公司十大最愚蠢的错误",
    "url": "https://coolshell.cn/articles/1295.html",
    "date": "2009-08-19T23:17:20+08:00",
    "description": "\n有一些史上最大的高科技公司的交易没有发生。有一些最有前途的产品和服务也没出现。为什么？因为这其中的人和公司当时都没有意识到是什么样的东西滑过了他们的手指，或者，他们只是简单地不能预知未来会发生什么。\n如果事情还能再来一次，也许今天我们就不会看到Apple和Microsoft了，而且，Yahoo可能会成为世界上最大的搜索引擎，Google只能成为后者。你也许只能从施乐电脑上读这篇文章，从RealPod上听你最喜欢的频道。\n人们都说“事后诸葛亮”（ hindsight is 20-20，20/20是最好的视力），如果真是这样的话，那么，我们的分析就是最精确的。下面是我们挑选的历史上十大科技类公司丢失机会的案例。\n1. Yahoo 错过 Facebook\n2006年，当时只有2年的Facebook还在只服务于一些学校内的社交网络。那个时候的MySpace就拥有了1亿用户，完全超过了Facebook的8百万用户。所以，当 Yahoo 提出使用10亿美金购买 Mark Zuckerberg 的孩子 时（其将近 2005年 Rupert Murdoch 收购 MySpace 金额的两倍）人们都对说Fackbook的老大说，“Take the money and run, Mark。”，事实上，时年23岁的扎克伯格也的确于2006年6月与雅虎达成了协议。\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linus Torvalds 语录 Top 10",
    "url": "https://coolshell.cn/articles/1278.html",
    "date": "2009-08-16T14:56:25+08:00",
    "description": "\n下面是Linux的创始人Linus Torvalds的一些言论，这是我个人认为最有意思的10句。如果你想看更多的Linus Torvalds说过的话，你可以看看他在维基百科上的词条：Linux Torvalds。我们在下面给出中英文对照，希望你能喜欢。\n“Really, I’m not out to destroy Microsoft. That will just be a completely unintentional side effect ” （真的，我并不是想要干掉Microsoft，如果真是那样了，那完全是一个无意的副作用）——”The Way We Live Now: Questions for Linus Torvalds”, 接受《New York Times》的采访， 2003-09-28.\n“Only wimps use tape backup: _real_ men just upload their important stuff on ftp, and let the rest of the world mirror it”（只有愚昧的人才会用磁带来做备份，真正聪明的人会上传他们最重要的东西到FTP服务器上，而剩下事情是，让世界各地的人来镜像这些东西）——(1996-07-20). 在linux.dev.kernel 新闻组上的一个贴子\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 4.08 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux基金会的广告",
    "url": "https://coolshell.cn/articles/1283.html",
    "date": "2009-08-16T14:00:48+08:00",
    "description": "\n今年早些时候，Linux基金会发起了一项面向制作人和一般Linux爱好者的活动，创造60秒创意的广告并评奖。\nLinux基金会并没有苹果和微软这样大的投入来聘请大腕，但这次评选出来的好广告却一点也不输于他们，Linux社团的参与力和灵感可见一斑。本次活动获胜的奖品是免费前往东京参与Linux专题研讨会，评奖结果是：\n第一：“What does it mean to be free?”\n第二：“The Origin,”\n第三：“Linux pub”\n 下面是广告片的视频\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "操作系统航空公司",
    "url": "https://coolshell.cn/articles/1272.html",
    "date": "2009-08-16T12:54:24+08:00",
    "description": "\n 我们知道，不同的操作系统有不同的系统，不同的风格，那么，如果操作系统和航空公司，会是怎么样的一种情况？让我们尝试地来做这样一个幽默的类比，把操作系统的特点带到航空公司，让我们看看会是怎么样的一个情况。\nUNIX Airways\nUnix航空公司需要每一个人在乘机的时候带上一个飞机零件，他们会在飞机跑道上把飞机的这些零件一片一片地组装起来，然后，在不停地争论着倒底是要建造什么样的飞机。是AIX，还是Solaris？是FreeBSD还是HP-UX？……\nAir DOS\nDOS 航空公司的飞机需要每一位乘客在后面推飞机直到飞机开始滑行，然后他们跳上飞机并且跟着飞机一起沿着海岸滑行直至飞机再次掉到地面，然后乘客们再次推动飞机，然后跳上飞，如此循环不止……\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "恢复Ext3下被删除的文件",
    "url": "https://coolshell.cn/articles/1265.html",
    "date": "2009-08-14T10:31:48+08:00",
    "description": "\n 下面是这个教程将教你如何在Ext3的文件系统中恢复被rm掉的文件。\n假设我们有一个文件名叫 ‘test.txt’\n $ls -il test.txt 15 -rw-rw-r– 2 root root 20 Apr 17 12:08 test.txt \n注意：: “-il” 选项表示显示文件的i-node号（15），如果你不知道Unix/Linux文件系统的“I结点”的话，你有必要先补充一下相关的知识。简单说来，i结点就是操作管理文件的一个标识号。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "你用Linux命令行吗？",
    "url": "https://coolshell.cn/articles/1256.html",
    "date": "2009-08-14T00:19:58+08:00",
    "description": "\n想一想，如果你要把一个图片的尺寸改小一点，你会怎么办？当然，我一定会启动一个图形编辑软件，然后，打开图片文件，从菜单上选择相关的工具选项，更改大小，然后保存文件。就算是在Linux下，我可能也是这么干的，比如Ubuntu下也是这样，如下图：\n\n但其实，如果你用命令行来更改图片大小的话，一条语句就可以搞定了。如：\nconvert -resize 300 profile.jpg profile_small.jpg\n当然，如果你要使用这样的命令，你需要安装Imagemagick，你可通过apt-get install imagemagick来安装一下。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "G1新型垃圾回收器一瞥",
    "url": "https://coolshell.cn/articles/1252.html",
    "date": "2009-08-13T21:54:26+08:00",
    "description": "\nG1垃圾回收器\n“G1垃圾回收”的英文全称是 Garbage-First Garbage Collector （又被称作G1 GC），这是一个新型的垃圾回收器，由JDK 7中的Java HotSpot VM 引入。这个技术曾经在Java SE 6 Update 14版本中出现过一个试验性的，然后 G1 被 HotSpot的 反应快速（low-latency）的 Concurrent Mark-Sweep GC （简称 CMS）长期取代。\n属性\nG1 是一个“服务器风格（server-style）”的垃圾回收器，它主要有下面的这些属性：\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "IE的CSS相关的BUG",
    "url": "https://coolshell.cn/articles/1245.html",
    "date": "2009-08-12T18:47:43+08:00",
    "description": "\n这个网页（http://haslayout.net/css/index）上例举了所有的IE和CSS相关的BUG。如果你在开发网页的时候，你需要看看。\n目前，这个网站上包含了 28 个“普通的Bug” ， 4 个“布局方面的Bug” ， 6 个“可以绕开的Bug” 以及 1 个“IE崩溃的Bug”，所有的这些Bug有39个指南和48个解决方法。这个列表目前更新到 2009年8月11日，19:50:22 \n下面是所有的bug列表，你可以点击每个BUG名的链接查看更详细的说明。\n普通Bug\n这部分 IE 的 bug 是比较普通的无法归到其它种类，或是同时属于多个种类的Bug。\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "23,148,855,308,184,500",
    "url": "https://coolshell.cn/articles/1242.html",
    "date": "2009-08-11T17:22:10+08:00",
    "description": "\n 上个月VISA信用卡出事了，某个美国人在加油站买了一包香烟，于是他的信用卡里就有了标题那个数字的钱“$23,148,855,308,184,500”，注意这可以美刀啊，相当于美国整个国家国债的N倍。\n程序员们开始疯狂了，他们在stackoverflow.com上开始人肉debug这个问题（贴子）。排名第一的回答（564 votes）说，这个数字转成十六进制是：0x2020 2020 2020 1250，很明显，前面的若干个0X20表示的是空格，也就是说，程序错误地处理了空格。于是本回答后的跟贴把这个回答推举成了本年度最牛的debug——”best debug of the year”，后面还有人说这个人应该在NASA工作，继而有人跟贴，应该是VISA而不是NASA……\n当然，也有人有不同的意见……\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 4.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "几个有趣的漫画",
    "url": "https://coolshell.cn/articles/1234.html",
    "date": "2009-08-10T18:44:10+08:00",
    "description": "\n下面的图片告诉你——行销，广告，公关，品牌有什么差别。\n\n市场营销\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "Javascripts加密库",
    "url": "https://coolshell.cn/articles/1231.html",
    "date": "2009-08-10T18:16:29+08:00",
    "description": "\n一般说来，使用HTTP协议是不加密的，所有的数据都是以纯文本方式提交的，就算是你提交数据时，也是使用纯文本的方式发送。只有HTTPS协议会有SSL加密数据，但一般来说，HTTPS需要服务器端进行SSL设置，并有些麻烦。而jCryption这个jQuery插件能够加密由Forms提交的POST/GET数据。jCryption使用RSA公钥密码算法加密，另外，该项目还提供一个PHP文件来处理数据的解密。\n\n …\n 阅读全文 Read More\n\n (4 人打了分，平均分： 2.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "简单实用的Code Review工具",
    "url": "https://coolshell.cn/articles/1218.html",
    "date": "2009-08-04T17:09:13+08:00",
    "description": "\nCode Review中文应该译作“代码审查”或是“代码评审”，这是一个流程，当开发人员写好代码后，需要让别人来review一下他的代码，这是一种有效发现BUG的方法。由此，我们可以审查代码的风格、逻辑、思路……，找出问题，以及改进代码。因为这是代码刚刚出炉的时候，所以，这也是代码重构，代码调整，代码修改的最佳时候。所以，Code Review是编码实现中最最重要的一个环节。\n长时间以来，Code Review需要有一些有效的工具来支持，这样我们就可以更容易，更有效率地来进行代码审查工作。下面是5个开源的代码审查工具，他们可以帮助你更容易地进行这项活动。\n1. Review board:\nReview board 是一个 基于web 的工具，是由 django 和python设计的。 Review board 可以帮助我们追踪待决代码的改动，并可以让Code-Review更为容易和简练。尽管Review board 最初被设计在VMware项目中使用，但现在其足够地通用。当前，其支持这些代码版本管理软件： SVN, CVS, Perforce, Git, Bazaar, 和Mercurial.\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程引言补充",
    "url": "https://coolshell.cn/articles/1212.html",
    "date": "2009-07-31T18:27:55+08:00",
    "description": "\n之前收集过《22条经典的编程引言》，发现还有一些未收录的，下面这些引言也很有意思的，希望你喜欢。\n“The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.” – Tom Cargill \n “最开始的90%的代码使用了程序员90%的时间，剩下的10%的代码也需要90%的开发时间”——Tom Cargill（这不就是中国谚语——“行百步半九十”）\n　\n“In order to understand recursion, one must first understand recursion.” – Author Unknown \n “要知道什么是‘递归’，你首先需要知道‘递归’”——无名氏\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "面试题：赛马问题",
    "url": "https://coolshell.cn/articles/1202.html",
    "date": "2009-07-30T22:35:35+08:00",
    "description": "\n据说，这是Google的面试题。面试题目如下：\n一共有25匹马，有一个赛场，赛场有5个赛道，就是说最多同时可以有5匹马一起比赛。假设每匹马都跑的很稳定，不用任何其他工具，只通过马与马之间的比赛，试问，最少得比多少场才能知道跑得最快的5匹马？（不能使用撞大运的算法）\n很明显这是一个算法题，网上有很多贴子在讨论这个问题，不过都没有给出一个明确的答案。我想了想，想到下面的一个算法：\n1）分成5组A，B，C，D，E，比五场。然后根据每场结果分别给这五组内的五匹马排序（从快到慢）。\n2）每组的头名再赛一场，取走第一名，然后该组第二名顶上。\n3）重复第二步，直到选出前5名。\n这个算法是比较笨的算法，总计需要赛10次，这个算法应该是万无一失的。现在的问题的就，如何优化这个算法，想了想，的确是有优化的空间的。也就是说，是可以少于10次的。\n …\n 阅读全文 Read More\n\n (22 人打了分，平均分： 3.91 )Loading...\n"
  },
  {
    "content": "",
    "title": "Python也Spring了",
    "url": "https://coolshell.cn/articles/1204.html",
    "date": "2009-07-30T20:43:12+08:00",
    "description": "\n没想到啊，Python也有Spring的框架了，看看SpringPython项目主页（http://springpython.webfactional.com/）。这个项目的Leader是这样说的：Spring Python是基于Java的Spring框架（Spring Framework）和Spring安全（Spring Security）的一个分支，它以Python语言为目标。Spring提供了许多有用的特征功能，同样地这些特征功能在Python下也应当有效。– Greg Turnquist\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 1.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "GPLv3的在开源社区中的占有量",
    "url": "https://coolshell.cn/articles/1197.html",
    "date": "2009-07-28T17:46:21+08:00",
    "description": "\n2007年7月，GPLv3 发布，当时有164个项目加入，一年后，有大约两千个项目使用GPLv3协议，今天，Google开源programs office manager Chris DiBona向大家 宣布 在Google 开源项目中，使用GPLv3的项目至少有 56,000个。当然，这只是计算了在 Google Code 中的项目。\n对于今天有 225,000 项目的 Google Code，这四分之一的 GPLv3 也是一个不小的数目了。如果我们假设Sourceforge.net 和 Codehaus 也有和Google Code相似的 GPLv3 比率的话，那么，今天使用 GPLv3 的项目将是一个很大的数量。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 1.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "JRuby核心成员投奔Engine Yard",
    "url": "https://coolshell.cn/articles/1194.html",
    "date": "2009-07-28T16:46:36+08:00",
    "description": "\n新闻来源：Computer World\nSun公司的JRuby团队正在离开他们的老东家Sun，投奔Engine Yard公司。他们声称这是因为Oracle并购Sun后的前途不明朗的原因。Sun的新闻发言人已确定了这一消息的真实性。\n在两年半前，Sun招募了Charles Nutter 和Thomas Enebo，这两人叫“the JRuby Guys”，他们主要实现在Java虚似机上运行Ruby，后来Sun又招了一个叫Nick Sieger的人。今天，这三个核心开发人员会在下周一的时候到新公司上班。他们认为Oracle可能会不支持他们继续在JVM上运行Ruby这个事情，而JRuby又是他们的未来。\nEngine Yard。成立仅两年、总部设在旧金山的Engine Yard，主要业务是为使用开放原始码开发环境Ruby on Rails的开发者处理系统布署和作业等事项。该公司协助开发者透过所谓的云计算，或第三方数据中心，执行应用软件。Engine Yard曾经从New Enterprise Associates和Amazon.com两家公司募得投资1500万美元。该公司正在进行云计算平台上的Rails计划。\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 1.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "一些单元测试的Guideline",
    "url": "https://coolshell.cn/articles/1192.html",
    "date": "2009-07-27T16:24:57+08:00",
    "description": "\nJimmy Bogard 曾经写过一篇文章： 《从单元测试中获益》，这这篇文章中给出了下面三条规则：\n\n“测试名应该从用户的角度描述是什么和为什么” – 这样一来，程序员可以从名字就可以知道用户需要什么样的软件行为。\n“测试也是代码，同样也需要我们更多的爱” – 真实运行在生产环境下的代码不仅仅只是我们需要去关心和花心思的代码。对于单元测试中的代码同样也需要易读易维护，以及可重用的特性。“我非常痛恨那些又长又复杂的测试代码，如果一个测试需要30行的单元测试代码，请把其放在一个方法中。一个长的测试步骤只会激怒程序员。如果你在正式的代码中都没有这么长的代码，那么为什么我们需要在测试代码中容忍这样的情形呢？”\n“不要只用一种固定的模式或组织风格” – 有些时候，对于一些特殊的测试案例，标准的类设计模式，或一个固有的测试装置可能并不能有效的工作。\n\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何检测浏览器是否支持CSS3",
    "url": "https://coolshell.cn/articles/1186.html",
    "date": "2009-07-24T15:00:02+08:00",
    "description": "\n如何检测用户的浏览器是否支持CSS3，我们需要使用HTML，CSS和JavaScript来完成这件事情。下面是步骤。\n1）先制作下面的HTML\n\n<span id=\"check\" rel=\"Detect\"></span>\n\n2）然后书写下面的CSS\n\n#check {\n  display: none;\n  width: 0;\n  height: 0;\n}\n#check[rel^=\"D\"] {\n  display: block;\n  width: 0;\n  height: 0;\n}\n\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 1.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "15个Web在线WYSIWYG编辑器",
    "url": "https://coolshell.cn/articles/1183.html",
    "date": "2009-07-24T14:32:09+08:00",
    "description": "\n基于WEB的HTML 编辑器，WYSIWYG所见即所得的编辑器，或是一个富文本的编辑器，是我们在开发WEB应用时接收用户输入时必需要考虑的问题。下面是一些开源的WEB在线的WYSWIG编辑器。\n1. FCKeditor\nFCKeditor 这些在线编辑器中最著名的一个，其功能相当的强大，很像一个Web的Word软件。它可以方便地和ASP, ASP.NET, PHP, Java, Perl, Phyton 等Web开发语言所集成。并支持皮肤，拼写检查。其还可以配置成一个轻量级的编辑器。而且，它还有很多相当酷的功能。\n\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "Internet 技术演变图",
    "url": "https://coolshell.cn/articles/1178.html",
    "date": "2009-07-24T11:51:32+08:00",
    "description": "\n点击图片看大图\n\n\n (5 人打了分，平均分： 1.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员惯用的解释(Top 25)",
    "url": "https://coolshell.cn/articles/1174.html",
    "date": "2009-07-24T11:32:35+08:00",
    "description": "\n 下面是程序员日常工作当中惯用的解释，或是口头禅。我们可以从这一个侧面来看看的程序员的特征和性格，相信你我都说过很多这样的话。不要太认真哦，呵呵。\n\n在我这边的电脑上可以工作啊……\n我重来没有听过这样的事\n昨天还能正常工作呢\n好吧，这算一个BUG\n这怎么可能？\n这应该是机器或是环境的问题\n…\n 阅读全文 Read More\n\n\n (18 人打了分，平均分： 3.39 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员犯的非技术错误(Top 5)",
    "url": "https://coolshell.cn/articles/1145.html",
    "date": "2009-07-21T22:24:23+08:00",
    "description": "\n\n对于程序开发者来说，有两种技术需要我们掌握，一个是技术上的能力，另一个是非技术上的能力。不幸的是，许多程序员过多地关注了技术上的能力，而忽略了非技术上的能力的培养，因此，我们的程序员们经常会有一些很不好的习惯，这里我们例举了程序员们最常犯的5个非技术的错误，与大家共勉。\n1.- 缺乏团队纪律\n“Discipline is the bridge between goals and accomplishment.” Jim Rohn.\n纪律是一个最有价值的技能，不仅仅只是在软件开发领域，同样在其它领域也是一样的。但对于现实来说，我们很难找到即有才华又有纪律的人。这正如足球队一样，非洲的球员们才华相当的出众，可惜他们总是独自为阵，团队纪律性不足，所以可以有好的成绩，但却无法赢得最后的胜利；而德国队的队员个人技能平平，但其有很强大的团队纪律性，所以，总是能打入最后的决赛并获得冠军。有人说过，个人英雄并不可怕，而有强大纪律性的团队才让人可怕。这正是日本这个民族的可怕之处。况且，软件开发从来都不是一个人可以完成的事情，所以团队工作中的纪律性会是非常重要的。\nSteve Pavlina 强调了自律中5个因素：“承担, 毅力, 努力, 勤奋, 和坚持。” 这里，我们强烈推荐你读一读Steve的 关于自律的文章。\n …\n 阅读全文 Read More\n\n (14 人打了分，平均分： 3.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "（免费在线）新书推荐：搜索的用户界面",
    "url": "https://coolshell.cn/articles/1163.html",
    "date": "2009-07-16T21:23:39+08:00",
    "description": "\n题外话：剑桥大学出版社很有意思，允许作者把书的全部内容放在网上，例如：Christopher D. Manning, Prabhakar Raghavan and Hinrich Schütze, Introduction to Information Retrieval, Cambridge University Press. 2008.\n《搜索的用户界面》的作者Marti Hearst是加州大学伯克利分校研究信息可视化的一位大儒，她有很多带有认知心理学加设计的尝试，在信息检索这门学科里的信息可视化领域很有地位。我斗胆把她的新书的梗概在这里描述一下，习惯看英文的朋友们可以点击链接去看英文原文，不喜欢看英文的朋友们可以有选择的看看我这里的总结，然后硬硬头皮，跳进去啃一些具体章节吧。本书可能收益的人有：对搜索有兴趣的学生，工业界做设计和评估的专业人士，对技术中的人本主义感兴趣的人，书痴。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "Python 自然语言处理",
    "url": "https://coolshell.cn/articles/1157.html",
    "date": "2009-07-15T22:41:56+08:00",
    "description": "\n推荐一本免费的在线电子书，《用Python进行自然语言处理》， 用NLP 工具包（开源免费，Python）来进行文本分析。特别适合初学计算语言学的学生。好像没有好的中文切词。当然，免不了需要提一下 Dan Jurafsky 教授，大家可以搜索一下，找找他的讲义。\n简要翻译一下提纲：\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "关于 Chrome OS 的一些推论",
    "url": "https://coolshell.cn/articles/1152.html",
    "date": "2009-07-13T01:04:14+08:00",
    "description": "\n最近Chrome OS被炒作得火热。\n为什么还有一年后才发布的产品这么早会公布于众？其实不难想象，一个系统级别的产品的推行必须要跟很多OEM厂家谈合作。而你几乎不可能只是秘密地跟一个大公司的2-3个工程总监就能把这种合作谈定，而大多数的OEM公司，例如 DELL， Asus， Acer等这样的公司都不是技术为主导的，商业人士会很早参与意见和项目的计划，一旦知道的人多了，其实也没什么能保密的了。虽然，这样荒腔走板的发布很可能像伤害Android一样伤害Chrome OS。\n为什么Chrome OS和Android是如此独立的两个东西，看似又是在解决一个方向上的问题呢？其实也不难推测。Android是Google买下来的公司，其带队的Andy Rubin肯定是个对移动设备的能力有远见的大佬，而Chrome浏览器的领袖 Linus Upson是做V8 Engine的，一定对云和未来的Web Apps有着更坚定的远景。当两个这样强势的团队在公司各自划定地盘以后，融合的可能性就相对小了。\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.69 )Loading...\n"
  },
  {
    "content": "",
    "title": "BT雷人的程序语言",
    "url": "https://coolshell.cn/articles/1142.html",
    "date": "2009-07-12T11:07:03+08:00",
    "description": "\n这个世界从来都不会缺少另类的东西，人类自然世界如此，计算机世界也一样。编程语言方面，看过本站《6个变态的C语言Hello World程序》的朋友们一定对BT和另类不会陌生，但那都是些小儿科，真正的BT和另类要是从语言级上来完成。让我们来看看其中一个比较另类的语言BrainFuck。看到这个程序语言的名字，请不要以为这是一个搞笑的语言，这是一个“严肃事情”，请大家用“最虔诚的态度”来阅读本文。\nBF语言介绍\nBrainfuck，是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。由于“绿王八”的原因，这种语言有时被称为brainf**k或brainf***，甚至被简称为BF。这种 语言，是一种按照“Turing complete（完整图灵机）”思想设计的语言，它的主要设计思路是：用最小的概念实现一种“简单”的语言，BrainF**k 语言只有八种符号，所有的操作都由这八种符号的组合来完成。\nBF基于一个简单的机器模型，除了八个指令，这个机器还包括：一个以字节为单位、被初始化为零的数组、一个指向该数组的指针(初始时指向数组的第一个字节)、以及用于输入输出的两个字节流。\n下面是这八种指令的描述，其中每个指令由一个字符标识：\n …\n 阅读全文 Read More\n\n (35 人打了分，平均分： 4.66 )Loading...\n"
  },
  {
    "content": "",
    "title": "整洁代码的4个提示",
    "url": "https://coolshell.cn/articles/1095.html",
    "date": "2009-07-05T22:09:01+08:00",
    "description": "\n虽然这样的文章非常的多，并且，就算是对于编程新手来说，也是非常的简单和显而见，但是，在我们进行Code Review过程中，我们还是能够看到那些非常混乱的代码，所以，有些时候，你会在想，是不是这样的规则太多了，导致我们的程序员记不住。虽然我们在以前的文章中一遍又一遍的说过（比如：《优质代码的十诫》），千言万语总结一下，无论你用什么样的语言，最最基本的编程原则就是下面这四条。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "与Martin Fowler关于敏捷方法的问答",
    "url": "https://coolshell.cn/articles/1113.html",
    "date": "2009-07-05T10:15:01+08:00",
    "description": "\n2009年6月23日，Martin Fowler到公司访问，与我们开了一个小型座谈会并顺便拜访了他在ThoughtWorks的同事们。\n\n以下是座谈的内容：\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "Java构造时成员初始化的陷阱",
    "url": "https://coolshell.cn/articles/1106.html",
    "date": "2009-07-03T14:31:49+08:00",
    "description": "\n让我们先来看两个类：Base和Derived类。注意其中的whenAmISet成员变量，和方法preProcess()\n\npublic class Base\n{\n    Base() {\n        preProcess();\n    }\n\n    void preProcess() {}\n}\n\npublic class Derived extends Base\n{\n    public String whenAmISet = \"set when declared\";\n\n    @Override void preProcess()\n    {\n        whenAmISet = \"set in preProcess()\";\n    }\n}\n\n如果我们构造一个子类实例，那么，whenAmISet 的值会是什么呢？\n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.87 )Loading...\n"
  },
  {
    "content": "",
    "title": "漫画：程序员的一生",
    "url": "https://coolshell.cn/articles/1103.html",
    "date": "2009-06-30T16:57:30+08:00",
    "description": "\n \n (35 人打了分，平均分： 4.49 )Loading...\n"
  },
  {
    "content": "",
    "title": "Ksplice Uptrack — Ubuntu更新不用重启",
    "url": "https://coolshell.cn/articles/1097.html",
    "date": "2009-06-30T10:53:44+08:00",
    "description": "\nKsplice是马萨诸塞州坎布里奇的一家新兴厂商，它开发的软件可以帮助计算机用户保持其操作系统的安全性而且不需要经常麻烦的重新启动就可升级操作系统，Ksplice被评为麻省理工10万美元创业竞赛的6个入围项目之一。\nKsplice是Web/IT类冠军，它将与其他5个类别的入围者争夺总奖金。该公司是去年由四个麻省理工学院校友成立的，\nKsplice目前支持Linux内核的更新，但它声称其免重启更新技术工作在目标代码层，可以适用于任何操作系统或者用户空间应用。该公司说，其技术对安全更新来说特别有益，可以解决因不方便重启而使安全更新不能及时生效的问题。\n昨日他们在剑桥发布了Ksplice解决方案，运用这种技术将实现无缝更新，从企业软件、系统补丁乃至Linux内核的更新都不需要重启就可以直接完成，改变了数十年来计算机运行最新代码需要重启的麻烦问题。\n相关链接：\n\nKsplice Uptrack 主页在这里：http://www.ksplice.com/uptrack/\n安装指南在这里：http://www.ksplice.com/uptrack/download\n\n (5 人打了分，平均分： 2.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "Top 200的全球开发者BLOG",
    "url": "https://coolshell.cn/articles/1092.html",
    "date": "2009-06-30T10:39:49+08:00",
    "description": "\n本文源自这里，文中列出了全球前200名的开发者的BLOG。有的可能你很熟悉，有的你可能还不知道。这些BLOG的排名通过查看，Google PageRank, Technorati Authority, Alexa Rank, Google links, Twitter Grader Rank等等，形成的综合排名。如果你对此感兴趣的话，你可以看看这篇文章——《如何制作一个Blog排名》\n下面是前200名的排名。希望对那些有日常浏览Blog习惯的人有帮助。大家可以下载更为详细的Excel表格。\n本排名截止至：2009年第二季度\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "22个开源的PHP框架",
    "url": "https://coolshell.cn/articles/1086.html",
    "date": "2009-06-25T11:57:39+08:00",
    "description": "\nPHP 是一个被广泛使用的来进行Web开发的脚本语言。虽然有很多其它可供选择的Web开发语言，像：ASP 和Ruby，但是PHP是目前为止世界上最为流行的。\n那么，是什么让PHP如此流行？PHP 如此之流行是因为比起别的语言来，它更容易学习，网上有一大堆相当相当不错的PHP教程可以让你快速地马上就可以进行Web程序的开发。虽然PHP是是简单的，而且是容易上手的，但用它编程还是有点麻烦，尤其是一些反复在用的功能。不过，幸运的是，很多开发团队早就注意到了这点，现在在网上，PHP有许多的可以信任的PHP Framework 可以缩短我们的开发时间。这些框架被一个巨大的社区所支持，因些，如果你有什么问题的话，一定会有人乐意帮你去解决。\n废话少说，让我们来看看这22个PHP的框架。\n …\n 阅读全文 Read More\n\n (4 人打了分，平均分： 2.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "十个让你变成糟糕的程序员的行为",
    "url": "https://coolshell.cn/articles/1081.html",
    "date": "2009-06-24T23:02:36+08:00",
    "description": "\n之前本站发表过《优秀程序员的十个习惯》以及《程序员需要具备的基本技能》，那是我们需要去学习和培养的。这里，我们主要讨论十个糟糕程序员的特征，主要是需要让我们去避免和小心的。\n1) 情绪化的思维\n如果你开始使用不同颜色的眼光来看待这个世界的话，那么你可能会成为一个很糟糕的程序员。情绪化的思维或态度很有可能会把自己变成一个怪物。相信你经常可以看到很多很糟糕的程序会使用下面的这些语句：\n\n我的程序不可能有这种问题。\nJava就是shit。\n我最恨的就是使用UML做设计。\n需求怎么老在变，没办干了。\n受不了这些人，他们到底懂不懂啊。\n…… ……\n\n这些带着情绪化的思维和态度，不但可以让你成为一个很糟糕的程序员，甚至可以影响你的前途。因为，情绪化通常都是魔鬼，会让你做出错误的判断和决定，错误码率的判断和决定直接决定了你的人生。\n …\n 阅读全文 Read More\n\n (40 人打了分，平均分： 4.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux/Unix 新手和专家教程",
    "url": "https://coolshell.cn/articles/1042.html",
    "date": "2009-06-21T10:37:53+08:00",
    "description": "\n你正在找一些高质量的Linux 和 UNIX 的教程吗？如果是，这篇文章会告诉你到哪去找到这些教程。这里我们将给出超过30个相当的不错的 Linux 和 UNIX 在线的教程。\n需要大家注意的是，他们都是英文的，也许有一些也经被翻译到了中文社区，你可以搜索一下。但不管怎么样，我的建议是应该尽可能的去阅读英文。\n  …\n 阅读全文 Read More\n\n (20 人打了分，平均分： 4.35 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何在Java中避免equals方法的隐藏陷阱",
    "url": "https://coolshell.cn/articles/1051.html",
    "date": "2009-06-18T11:14:41+08:00",
    "description": "\n译者注 :你可能会觉得Java很简单，Object的equals实现也会非常简单，但是事实并不是你想象的这样，耐心的读完本文，你会发现你对Java了解的是如此的少。如果这篇文章是一份Java程序员的入职笔试，那么不知道有多少人会掉落到这样的陷阱中。原文转自http://www.artima.com/lejava/articles/equality.html 三位作者都是不同领域的大拿，有兴趣的读者可以从上面这个连接直接去阅读原文。\n摘要\n本文描述重载equals方法的技术，这种技术即使是具现类的子类增加了字段也能保证equal语义的正确性。\n在《Effective Java》的第8项中，Josh Bloch描述了当继承类作为面向对象语言中的等价关系的基础问题，要保证派生类的equal正确性语义所会面对的困难。Bloch这样写到：\n除非你忘记了面向对象抽象的好处，否则在当你继承一个新类或在类中增加了一个值组件时你无法同时保证equal的语义依然正确\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "高级Unix命令",
    "url": "https://coolshell.cn/articles/1044.html",
    "date": "2009-06-16T10:42:39+08:00",
    "description": "\n在Unix操作中有太多太多的命令，这些命令的强大之处就是一个命令只干一件事，并把这件事干好。Do one thing， do it well。这是unix的哲学。而且Unix首创的管道可以把这些命令任意地组合，以完成一个更为强大功能。这些哲学到今天都在深深地影响着整个计算机产业。比如今天最流行的“云计算”——把一个软件以碎片方式部署，然后这些功能可以任意组合。\n这篇文章罗列了很多Unix下比较高级的命令，当然，Unix/Linux下还有更多更多的命令，我们相信你可能见过其中的某些命令，也有可能有一些命令没有见过。不管怎么说，我们希望这些命令一方面可以让你知道怎么使用Unix/Linux操作系统，另一方面，我们也希望你能从中感到Unix的那种软件开发的哲学思想。\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程命名中的7+1个提示",
    "url": "https://coolshell.cn/articles/1038.html",
    "date": "2009-06-15T22:36:17+08:00",
    "description": "\n前几天Neo写过《编程中的命名设计那点事》，这里也有另外一篇和程序命名的文章，可以从另一个角度看看。\n1.- 变量应该是尽可能的望文知意。千万不要使用教材中的命名方式。\n\n好的变量： daysDateRange, flightNumber, carColor.\n坏的变量： days, dRange, temp, data, aux…\n\n在我们的日常工作中，有很大数量的开发人员喜欢使用短的变量名，而不是有含义的变量名。这主要是因为我们大学教科书的那些示例所造成的，人都是先入为主，所以，教科书中的那些很抽象，带着演示的变量命名影响了我们一代又一代的程序员，并影响了他们很多年。虽然那些短的，教材式的变量名，可能会让你少打一些字，但其实，这是非常非常不好的。因为软件的维护成本远远大于了软件的开发成本，如果你不取一个好的一点的变量名，那么当进行代码评审时，当进行bug fixing时，当进行代码重构时，当进行代码维护时，你的某个变量名可能会让你一头雾水，不知道所措，还可以会让你走入陷阱，造成更大的时间成本。所以，一个可阅读的代码必然和那些不错的变量名分不开，而这也能让你的软件间接上有更好的质量。\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "16个简单实用的.htaccess小贴示",
    "url": "https://coolshell.cn/articles/1035.html",
    "date": "2009-06-14T12:27:09+08:00",
    "description": "\n.htaccess 文件 (Hypertext Access file) 是Apache Web服务器的一个非常强大的配置文件，对于这个文件，Apache有一堆参数可以让你配置出几乎随心所欲的功能。.htaccess 配置文件坚持了Unix的一个文化——使用一个ASCII 的纯文本文件来配置你的网站的访问策略。\n这篇文章包括了16个非常有用的小技巧。另外，因为.htaccess 是一个相当强大的配置文件，所以，一个轻微的语法错误会造成你整个网站的故障，所以，在你修改或是替换原有的文件时，一定要备份旧的文件，以便出现问题的时候可以方便的恢复。\n1. 使用.htaccess 创建自定义的出错页面。对于Linux Apache来说这是一项极其简单的事情。使用下面的.htaccess语法你可以轻松的完成这一功能。（把.htaccess放在你的网站根目录下）\nErrorDocument 401 /error/401.php\nErrorDocument 403 /error/403.php\nErrorDocument 404 /error/404.php\nErrorDocument 500 /error/500.php\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.38 )Loading...\n"
  },
  {
    "content": "",
    "title": "Unix 40年：Unix年鉴",
    "url": "https://coolshell.cn/articles/1032.html",
    "date": "2009-06-12T15:32:54+08:00",
    "description": "\n今年是Unix 40年的生日，这篇文章，主要是一个Unix的年鉴，其记录了40年来所有和Unix有关的里程碑事件。\n如果你想知道Unix的一些故事，你可以查看下面这些文章：\n\n《Unix40年：昨天，今天和明天》\n《Unix传奇》上篇，下篇\n《Unix的现状与未来》\n\n1956\n美国司法部颁布法令责成AT&T公司不得从事除了公共承运人提供的通信服务以外的一切商业活动。\n1969\n三月 — AT&T旗下的 Bell 实验室从操作系统项目Multics (Multiplexed Information and Computing Service)研发中撤出，这是一个前沿但很复杂的分时操作系统。一些重要的Multics理念以后来被用于Unix操作操作系统中。\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.82 )Loading...\n"
  },
  {
    "content": "",
    "title": "Unix 40年：昨天，今天和明天",
    "url": "https://coolshell.cn/articles/1023.html",
    "date": "2009-06-11T23:01:39+08:00",
    "description": "\n经历了四个十年，操作系统的未来充满了变数，但传奇将会是永久的\n 原文：链接—Computerworld\n　\n译者前言\n 今年是Unix40岁的生日。很早就看到这篇文章了，一直想转到中文社区。但一直没有时间，今天看到了CSDN首页的一篇《昨天,今天,明天! Unix系统的40年》号称是转载于cnBeta。这篇文章翻译的要有多烂有多烂，简直就是对Unix 40的历史和原文作者的一种不敬。所以，在这里给出全部译文。\n \n关于更为详细的历史，可以参考我的《Unix传奇》上篇，下篇\n以及一篇CSDN对我的采访《Unix的现状与未来》\n　\n正文\n40年前的一个夏天，一个程序员只用了一个月的时间就创造出了这个世界上迄今为止最重要一个软件的原型。\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.82 )Loading...\n"
  },
  {
    "content": "",
    "title": "优质代码的十诫",
    "url": "https://coolshell.cn/articles/1007.html",
    "date": "2009-06-07T19:20:56+08:00",
    "description": "\n1.- DRY: Don’t repeat yourself.\nDRY 是一个最简单的法则，也是最容易被理解的。但它也可能是最难被应用的（因为要做到这样，我们需要在泛型设计上做相当的努力，这并不是一件容易的事）。它意味着，当我们在两个或多个地方的时候发现一些相似的代码的时候，我们需要把他们的共性抽象出来形一个唯一的新方法，并且改变现有的地方的代码让他们以一些合适的参数调用这个新的方法。\nDRY 这一法则可能是编程届中最通用的法则了，目前为止，应该没有哪个程序员对这一法则存有异议。但是，我们却能发现，一些程序在编写单元测试（unit testing）时忘记了这一法则：让我们相像一下，当你改变一个类的若干接口，如果你没有使用DRY，那么，那些通过调用一系例类的接口的unit test的程序，都需要被手动的更改。比如：如果你的unit test的诸多test cases中没有使用一个标准共有的构造类的方法，而是每个test case自己去构造类的实例，那么，当类的构造函数被改变时，你需要修改多少个test cases啊。这就是不使用DRY法则所带来的恶果。\n …\n 阅读全文 Read More\n\n (20 人打了分，平均分： 4.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程中的命名设计那点事",
    "url": "https://coolshell.cn/articles/990.html",
    "date": "2009-06-07T16:36:49+08:00",
    "description": "\n在我开始设计系统的时候，我会花去很多时间去设计命名，因为好的命名和好的设计是分不开的。\nIn the beginning was the Word, and the Word was with God, and the Word was God\n太初有道。道与神同在，道就是神。 (约翰福音第一章，第一节)\n在设计过程中给类，方法和函数好的命名会带来好的设计，虽然这不是一定成立，但是如果坏的命名那一定不会给你带来好的设计。在设计过程，如果你发现你很难命名某一个模块，某个方法时，可能你真正遇到的问题不是难命名的问题，而是这个设计是否真的合理，你或许应该花更多的时间来重新设计一下你的模块。\n好的命名不仅会带来好的设计，好的命名还提高了程序的可读性，降低代码维护的成本。另一方面，如果糟糕的命名会给代码带来一堵无形的墙，让你必须深入代码去研究代码具有的行为，增加你理解代码的时间。\n为此我总结了几条关于命名的指导原则，希望这几条原则能为你的命名设计带来帮助，我使用的是C++的语法，当然这些原则也很容易扩展到其他语言中去。\n类型命名(类，接口，和结构)\n\n\n名字应该尽量采用名词\nBad:           Happy\nGood:          Happiness\n …\n 阅读全文 Read More\n\n (28 人打了分，平均分： 4.11 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程语言的评测",
    "url": "https://coolshell.cn/articles/973.html",
    "date": "2009-06-06T22:50:49+08:00",
    "description": "\n摘要：这篇文章的原文出处在这里 我意译了整篇文章。结合计算机语言评测基准这个网站来读此文还是比较有意思。当然也不能以这个评测结果就贸然断定什么语言最好，什么语言不好。没有好不好的语言，只有适不适用于你解决问题域的语言。就文章而言请大家还是不必太过认真，就当从另一个方面来了解一下这33种编程语言吧。\n计算机语言评测基准是一个由429个程序组成的集合，它评测了33个程序语言的13的重复实现的基准程序。如果你想量化的比较不同语言，那么这个是一个非常不错的资源。\n在计算机评测基准中，评测者为了尽量让评测准确，非常谨慎的选择了13个基准程序，这13个基准程序并不针对某以特定语言有特殊的优化。对于评测选择33中语言都实现了13个基准程序。当然，除了速度这个指标外，程序基准评测同时也为每一个基准测试程序发布一个编码大小指标。非常感谢基准评测让我们看到程序设计中非常重要的一个方面：程序语言的性能和程序语言灵活性之间的矛盾。正是这个矛盾给所谓“高级编程语言”带上一个含蓄的轻蔑的意思。即，当你在使用这些高级语言编码时，你也许可以编写出漂亮的代码，但是你是如此的远离了硬件，你不可能获得更好的性能，是这样的吗？\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.13 )Loading...\n"
  },
  {
    "content": "",
    "title": "质量管理经中的八个法则",
    "url": "https://coolshell.cn/articles/971.html",
    "date": "2009-06-06T21:41:59+08:00",
    "description": "\n质量管理在软件工程中是非常非常重要的一个环节，无论你有多么精妙的算法，或是使用了多么先进的技术，还是拥有了多少强的设计，在质量控制或质量管理面前，这些都可能什么都不是。这里，有一些质量管理的法则，可以让软件的用户从中受益。如果对质量管理一言以蔽之：面对一个长期不断需要改善的软件，当其用户或是管理者们来说，他们对某个组织所提供的标准有一种完全和最基本的信任。\n下面，我们给出8个质量管理的法则：\n1. 始终从用户角度出发: “无论何时何地，我们都需要明白用户当前的或未来的需求，并能够达到用户的需求，甚至超出用户的期望。”\n这是整个软件工程的重中之重。质量管理从某种意义上来说，就是实现用户需求的质量的管理。这需要我们的质量管理管理和用户的关系，以及把用户的需求和整个团队（开发组，测试组，产品组，项目组等等）进行有些的沟通管理。\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "【原创】SQL栏目树的代码",
    "url": "https://coolshell.cn/articles/962.html",
    "date": "2009-06-05T00:03:13+08:00",
    "description": "\n本文由网友whl供稿，特此感谢！\n/**\n  * Desc: 取栏目树 ,过滤用户权限和无效栏目\n  * Author: WHL\n  * Date: 2009-05-31 15:17\n  */\n…\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "18个Web开发的IDE",
    "url": "https://coolshell.cn/articles/968.html",
    "date": "2009-06-04T23:24:17+08:00",
    "description": "\nWindows 下的IDE\nVisual Web Developer\n\n\n免费\n\nVisual Web Developer 是一个简单来说是Visual Studio的一个剥离版本，只有web 开发。和VS一样它有一个很不错的project 管理和数据库工具。这个IDE面对的是初学者。\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "《Vim Recipes》免费的Vim Cookbook",
    "url": "https://coolshell.cn/articles/956.html",
    "date": "2009-06-01T15:45:54+08:00",
    "description": "\n当今最流行的文本编辑器是什么，如果我的回答是vim应该不算过份吧。\n在 http://vim.runpaint.org/ 你可以获得一本关于vim的cookbook 《Vim Recipes》\n如果你非常喜欢vim编辑器，千万不要错过这本书，使用这本书，你将会发现你在vim遇到问题都可以迎刃而解。\n此书还在更新过程中，更多内容请关注http://vim.runpaint.org/\n (10 人打了分，平均分： 3.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "C语言的谜题",
    "url": "https://coolshell.cn/articles/945.html",
    "date": "2009-05-31T17:39:58+08:00",
    "description": "\n这几天，本站推出了几篇关于C语言的很多文章如下所示：\n\n语言的歧义 [酷壳链接] [CSDN链接]\n谁说C语言很简单？ [酷壳链接] [CSDN链接]\n6个变态的C语言Hello World程序 [酷壳链接] [CSDN链接]\n如何加密/弄乱C源代码 [酷壳链接] [CSDN链接]\nC语言的谜题 [酷壳链接] [CSDN链接]\n\n我们可以看到很多C语言相关的一些东西。比如《语言的歧义》主要告诉了大家C语言中你意想不到的错误以及一些歧义上的东西。而《谁说C语言很简单》则通过一些看似你从来不可能写出的代码来告诉大家C语言并不是一件容易事情。《6个变态的hello world》和《如何弄乱C的源代码》则以一种极端的方式告诉大家，不要以为咱们自己写不出混乱的代码，每个程序员其实都有把代码搞得一团乱的潜质。通过这些文章，相信你对编程或是你觉得很简单的C语言有了一些了解。是的，很不容易吧，以前是不是低估了编程和C语言？今天是否我们又在低估C++和Java呢？\n本篇文章《C语言的谜题》展示了14个C语言的迷题以及答案，代码应该是足够清楚的，而且我也相信有相当的一些例子可能是我们日常工作可能会见得到的。通过这些迷题，希望你能更了解C语言。如果你不看答案，不知道是否有把握回答各个谜题？让我们来试试。\n …\n 阅读全文 Read More\n\n (80 人打了分，平均分： 4.70 )Loading...\n"
  },
  {
    "content": "",
    "title": "最完美的Linux桌面软件",
    "url": "https://coolshell.cn/articles/936.html",
    "date": "2009-05-31T12:12:44+08:00",
    "description": "\n\n下面是关于Linux桌面环境下，目前为止最完美的部分。之所以说他们完美，是因为他们不但很养眼，而且也使用最好的多媒体技术，有最好的可用性。在某些方面，他们甚至超过了Windows和Mac-OS。\n \n\n基础\nDebian 或是 Ubuntu。这两个分发包是目前使用最广泛的Linux桌面操作系统的分发包了。\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.45 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何加密/混乱C源代码",
    "url": "https://coolshell.cn/articles/933.html",
    "date": "2009-05-30T15:30:05+08:00",
    "description": "\n之前发表了《6个变态的C语言Hello World程序》[酷壳链接] [CSDN链接]，主要是是像大家展示了一些C语言的变态玩法。也向大家展示了一下程序是可以写得让人看不懂的，在那篇文章中，可以看到很多人的留言，很多人都觉得很好玩，是的，那本来是用来供朋友们“消遣作乐”，供娱乐娱东而已，不必太过认真。\n不过，通过这种极端的写法，大家可以看到源代码都可以写得那么复杂难懂的。大家也许在赞叹之余一笑了之，而我则希望，大家能够在娱乐以后认真思考一下，你不要以为咱们自己不会把代码搞得那么复杂，只不过没有像那6个Hello World一样那么极端，不过，说句老实话，咱们每个程序都有把清晰的程序搞得一团混乱的潜能，只不过程度不一样罢了，我并不是在这里危言耸听，大家好自为之。\n下面是一个Step by Step的教程，教你如何把一个清晰的代码变得复杂难懂的。当然，这只是一个“简明教程”了。还是那句话——“本文仅供朋友们“消遣作乐”，如果你要觉得有意思的话，顶个贴。如果你觉得没什么意思的话，一笑了之。仅供娱乐而已，不必太过认真。”\n …\n 阅读全文 Read More\n\n (73 人打了分，平均分： 4.62 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何比较两个数据表",
    "url": "https://coolshell.cn/articles/925.html",
    "date": "2009-05-27T23:02:14+08:00",
    "description": "\n有些时候，我们可能想要比较一下两个数据表，以找到其中不同的数据。比如，在进行数据移植的时候，或是在合并数据的时候，或是在比对验证数据的时候。当然比较两个表，需要这两个表结构是一样的。\n我们先假设一下有如下表结构：\n\nCREATE TABLE jajal\n(\n    user_id integer NOT NULL,\n    first_name character varying(255),\n    last_name character varying(255),\n    grade character(1),\n    CONSTRAINT jajal_pkey PRIMARY KEY (user_id)\n)\n\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "20个优秀的Javascript导航技术",
    "url": "https://coolshell.cn/articles/918.html",
    "date": "2009-05-26T11:33:01+08:00",
    "description": "\n以前向大家介绍过 《30种时尚的CSS网站导航条》。这里，我们将向大家介绍一下使用Javascript设计的WEB页面的导航条。\n因为Javascript可以处理和用户的交互，所以使用Javascript会有更好的用户体验。在这篇文章里，你可以看到一些令人恐怖和独一无二的Javascript制作的导航条。\n1. MenuMatic\n这个示例主要是展示了一个排序的纵向或横向的下拉式菜单导航条。\n\n演示页面\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "6个变态的C语言Hello World程序",
    "url": "https://coolshell.cn/articles/914.html",
    "date": "2009-05-25T19:21:24+08:00",
    "description": "\n下面的六个程序片段主要完成这些事情：\n\n输出Hello, World\n混乱C语言的源代码\n\n下面的所有程序都可以在GCC下编译通过，只有最后一个需要动用C++的编译器g++才能编程通过。\nhello1.c\n\n    #define _________ }\n    #define ________ putchar\n    #define _______ main\n    #define _(a) ________(a);\n    #define ______ _______(){\n    #define __ ______ _(0x48)_(0x65)_(0x6C)_(0x6C)\n    #define ___ _(0x6F)_(0x2C)_(0x20)_(0x77)_(0x6F)\n    #define ____ _(0x72)_(0x6C)_(0x64)_(0x21)\n    #define _____ __ ___ ____ _________\n    #include<stdio.h>\n    _____\n\n …\n 阅读全文 Read More\n\n (150 人打了分，平均分： 4.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "7个免费强大的Ajax文件管理器",
    "url": "https://coolshell.cn/articles/909.html",
    "date": "2009-05-24T20:46:56+08:00",
    "description": "\n如果你正在开发一个WEB应用，需要一个不错的强大的文件管理器，并且可以简单的定制，那么，下面的这七个免费开源的文件管理器你一会喜欢的。这些文件管理器都很强大，他们全部都支持PHP，Javascript和Ajax，有几个还支持别的WEB开发语言。这些管理理可以让你完成目录文件浏览，搜索，上传/下载，编辑，拷贝，移动，删除等等文件操作功能。\n1. AjaXplorer\n\nAjaXplorer 是一个免费的 Ajax 文件管理器，其很容易安装。而且它的布局很丰富，可以用于多种应用，比如：文件管理，文件共享，图片库，代码库等等。不过它只支持(4 呀 5) ，不支持数据库。\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 2.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "将vim变得简单:如何在vim中得到你最喜爱的IDE特性",
    "url": "https://coolshell.cn/articles/894.html",
    "date": "2009-05-23T16:32:05+08:00",
    "description": "\n原文出处:这里\n摘要：\n开源的vim文本编辑器提供许多灵活而强大的功能，但是vim自身是很难被配置使用的，在本教材中，我们将向你显示通过几个简单的方式使得你的vim具有集成开发环境IDE的行为\nvim是很多程序员和系统管理员最爱的文本编辑器，虽然他提供了很多优秀而灵活的功能，但是对于新手来说他依然是难于上手的。从传统集成开发环境转到vim的开发人员通常会开在发方式的转变中发现迷失了自己。\n我经常收到来自于读者的邮件，他们希望能找到一种方式使得vim变得对开发者更友好。一个常见的抱怨是vim并不是自身就带有IDE的特性，并且如何来通过配置能得到等价IDE功能也不是很清晰。而揭开vim真正神奇的秘密就是利用强大的vim插件系统和对vim自身功能的改善和增强的第三方脚本。在阅你读本文之前，我已经整理好了一个vim的有用tips和插件列表，这些列表中的内容将会使那些用惯IDE功能的人们在vim上感到宾至如归的感觉。\n …\n 阅读全文 Read More\n\n (20 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "20非常有用的Java程序片段",
    "url": "https://coolshell.cn/articles/889.html",
    "date": "2009-05-23T15:09:36+08:00",
    "description": "\n下面是20个非常有用的Java程序片段，希望能对你有用。\n1. 字符串有整型的相互转换\n \nString a = String.valueOf(2);   //integer to numeric string  \nint i = Integer.parseInt(a); //numeric string to an int \n\n\n …\n 阅读全文 Read More\n\n (23 人打了分，平均分： 4.35 )Loading...\n"
  },
  {
    "content": "",
    "title": "几个有意思的漫画",
    "url": "https://coolshell.cn/articles/880.html",
    "date": "2009-05-21T23:07:47+08:00",
    "description": "\n软件Bug和软件Feature的差别\n注释：有时候bug和feature的差别就是bug长得难看了一些。\n\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个C的序列化库tpl",
    "url": "https://coolshell.cn/articles/878.html",
    "date": "2009-05-21T22:54:21+08:00",
    "description": "\ntpl(http://tpl.sourceforge.net/)是一个开源的小项目，其主要是提供一个可以序列化或反序列化C语言数据的一个API函数库。tpl号称是最有效率的也是最快的，它可以把你内存中的数据存放到文件中，并可以在你需要的时候用文件中反序例化到内存变量中。而且这个函数库没有依赖于别的函数库。\n下面是一个简单的示例（来源于其主页）\n把一个数组（“序号”和“人名”）序例化到文件中。\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "谁说C语言很简单？",
    "url": "https://coolshell.cn/articles/873.html",
    "date": "2009-05-19T22:10:25+08:00",
    "description": "\n前两天，Neo写了一篇《语言的歧义》其使用C语言讨论了一些语言的歧义。大家应该也顺便了解了一下C语言中的很多不可思异的东西，可能也是你从未注意到的东西。\n是的，C语言并不简单，让我们来看看下面这些示例：\n\n为什么下面的代码会返回0？(这题应该很简单吧)\n\n  int x;\n  return x == (1 && x);\n\n本题主要是关于C/C++中变量初始化的问题。\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "Web设计的速查卡",
    "url": "https://coolshell.cn/articles/870.html",
    "date": "2009-05-19T21:43:19+08:00",
    "description": "\n速查卡不仅仅可能帮助我们记住一些重要的东西，而且可以放在手边，当我们需要的时候，可以很快地查找。\n在本篇文章中，你可以看到28个相当不错的关于Web设计的速查卡，它们分别是关于：Photoshop, Dreamweaver, 颜色, 排版,和 其它Web设计相关的。他们都是一页纸，可以方便你很快地打印出来。\nPhotoshop\nPhotoshop CS3 快捷键速查卡\nDownloads: PDF (Windows), PDF (Mac)\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "语言的歧义",
    "url": "https://coolshell.cn/articles/830.html",
    "date": "2009-05-17T15:57:59+08:00",
    "description": "\n语言是人与人相互沟通的途径，而计算机语言则是人和计算机沟通的途径。就算是任何再完美的自然语言都会有歧义，但是又是什么让人和计算计算机间产生了歧义呢？\n下面这篇文章来自Gowri Kumar的Puzzle C一文。我做了一些整理，挑选了其中的一些问题，并在之后配上相应的答案(这些答案是我加的，如果需要原版的答案可以直接和本文作者Gowri Kumar联系，作者的联系方式可以从这里得到)。\npuzzle 1\n此段程序的作者希望输出数组中的所有元素，但是他却没有得到他想要的结果，是什么让程序员和计算机产生歧义？\n\n#include <stdio.h>\n#define TOTAL_ELEMENTS (sizeof(array) / sizeof(array[0]))\nint array[] = {23,34,12,17,204,99,16};\nint main()\n{\n    int d;\n\n    for(d=-1;d <= (TOTAL_ELEMENTS-2);d++)\n        printf(\"%d\\n\",array[d+1]);\n\n    return 0;\n}\n\n …\n 阅读全文 Read More\n\n (27 人打了分，平均分： 4.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux磁盘使用命令du的改进",
    "url": "https://coolshell.cn/articles/822.html",
    "date": "2009-05-15T16:41:29+08:00",
    "description": "\n我们知道，在Linux下，如果你想知道当前目录下，每个文件或子目录的尺寸，你可以使用du命令来完成这一动作。如：\n\n$  du -sh *\n\n这个命令可以以K，M，G的方式显示每个文件和子目录的大小。我们把这种方式叫做，human-readable，也就是可以让人读的方式，如下所示：\n8.4G Desktop\n2.6G Documents\n12K keys\n12M Pictures\n536K scripts\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "22条经典的编程引言",
    "url": "https://coolshell.cn/articles/808.html",
    "date": "2009-05-15T12:25:49+08:00",
    "description": "\n下面的这些经典的引言来自英文，也许有些我翻译的是不很好，所以，我提供了中英对照，如果有问题，请大家指正。\n \n过早的优化是万恶之源。Premature optimization is the root of all evil!\n– Donald Knuth\n \n在水里行走和以一个需求规格进行软件开发，有一点是相同的，那就是如果水或需求都被冻住不了，那么行走和软件开发都会变得容易。Walking on water and developing software from a specification are easy if both are frozen\n– Edward V Berard\n\n\n \nHofstadter 定理：“一件事情总是会花费比你预期更多的时间，就算是你已经考虑过本条Hofstadter 定理”。It always takes longer than you expect, even when you take into account Hofstadter’s Law.\n– Hofstadter’s Law\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 4.06 )Loading...\n"
  },
  {
    "content": "",
    "title": "关于C++构造函数的FAQ",
    "url": "https://coolshell.cn/articles/804.html",
    "date": "2009-05-13T22:38:36+08:00",
    "description": "\n下面是一些关于C++构造函数的FAQ。你能回答得出来吗？你可以点链接查看答案，不过是英文版的。他们来自于C++ FAQ Lite。当然，也有中文版的，只可惜中文版的太老了，只更新到了2001年。在C++ FAQ Lite上还有很多关于其它部分的FAQ，大家可以去看看。\n[1] 构造函数是用来干什么的？\n[2] List x; 和 List x();有什么不同?\n[3] 是否一个类的构造函数可以调用另一个构造函数来初始化自己？\n[4] 是否Fred类的默认的函数函数就一定是Fred::Fred()？\n[5] 如果要创建一个Fred 对像数组，什么样的构数函数会被调用?\n[6] 构造函数初始化成员变量时，用 “初始化列表” 还是 “赋值”？\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "电子书：编译器设计基础",
    "url": "https://coolshell.cn/articles/799.html",
    "date": "2009-05-11T22:20:24+08:00",
    "description": "\n这是一本关于编译器设计原理的书，让我又想起了大学时的《编译原理》还有那长篇长篇的作业，以及几个方法分析器的上机实习。现在基本上都全部还给老师了。\nBasics of Compiler Design\nhttp://www.diku.dk/hjemmesider/ansatte/torbenm/Basics/\nPDF下载\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "5个不错的3D素材网站",
    "url": "https://coolshell.cn/articles/796.html",
    "date": "2009-05-11T22:14:47+08:00",
    "description": "\n你也许并不是一个创建3D图形的好手，你也许只能创建一些原始的东西，如：停止或灯炮标志等等这些小孩子玩的东西。而我们现实世界则需要更复杂更牛的东西，比如说一个人物，一个机车等等。这里有史上最好的5个网站，你可以通过这些网站找到你想要的模型，这些3D的模型或资源对你开发游戏一定会有很大的帮助。\n3DRT\n这是一个迄今为止最好的站点。不仅仅因为这个站点有很多非常专业的模型，而且这个站点在收费方面还不是太坏——经常会有一些折扣。几乎，所有的模型都是动两国的，而且他们还是有皮肤的。他们有各式各样样的格式，并且提供PSD文件，这样方便你创建自己的皮肤。\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "十个你可能不曾用过的Linux命令",
    "url": "https://coolshell.cn/articles/790.html",
    "date": "2009-05-10T19:26:09+08:00",
    "description": "\n下面可能是你不曾用过后十个Linux的命令。相当的有用。\n1）pgrep\npgrep名字前有个p，我们可以猜到这和进程相关，又是grep，当然这是进程相关的grep命令。不过，这个命令主要是用来列举进程ID的。如：\n\n$ pgrep -u hchen\n22441\n22444\n\n这个命令相当于：\nps -ef | egrep '^hchen' | awk '{print $2}'\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.38 )Loading...\n"
  },
  {
    "content": "",
    "title": "用TCC可以干些什么？",
    "url": "https://coolshell.cn/articles/786.html",
    "date": "2009-05-10T15:22:15+08:00",
    "description": "\nTiny C Compiler 是一个微型的 C 语言编译器，支持 Windows 和 Linux 平台。其项目主页是： http://bellard.org/tcc/ 。你可以使用这个不到100K的编译器编译你的C文件，其支持C的预处理，编译，机器码汇编和链接。编译速度也超过了gcc，而且它支持ISO C99标准，并且，tcc还包括了一些内存和数组边界的检查。其还可以编译Linux的内核。\n不过，TCC 最有趣的特性是可以用 UNIX 系统上常见的 #!/usr/bin/tcc 的方式来执行 ANSI C 语言写就的源程序，省略掉了在命令行上进行编译和链接的步骤，而可以直接运行 C 语言写就的源程序。这样就能做到像任何一种其它的脚本语言比如 Perl 或者是 Python 一样，显著的加快开发步调。可以像编写 Shell 脚本一样的使用 C 语言，随便想一想都觉得是一件奇妙的事情。但是 TCC 还有一些其它的特性呢！\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "十大最失水准的科技预测",
    "url": "https://coolshell.cn/articles/783.html",
    "date": "2009-05-10T14:45:05+08:00",
    "description": "\n英国权威消费数码杂志T3评出了有史以来十大最失水准的科技预测。比尔·盖茨也占了其中2项。预测未来的确是一件很难的事情，即便是最聪明的人也会马失前蹄。\n1.  下一个圣诞节，iPod将会死去，完蛋，过时。 Allan Sugar爵士（一个很著名的英国企业家，和BBC合作一个著名的节目《学徒》）, 2005.\n2.  家庭不需要有一台电脑。  Ken Olsen, Digital Equipment简称DEC的创始人, 1977.\n3.  核能吸尘器将在10年内成为现实。  Alex Lewyt（真空吸尘器公司Lewyt Corp的CEO）, 1955.\n4.  电视不可能兴盛起来，因为人们“很快就会因为每晚盯着一个胶合板盒子而感到厌烦”。 Darryl Zanuck（ 好莱坞多栖明星）, 1946.\n5.  1933年，在可容纳10名乘客的波音247首航之后，一名自豪的波音工程师曾表示：“永远不可能制造出比247更大的飞机”。 Boeing engineer, 1933.\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何知道某网站运行在GAE上",
    "url": "https://coolshell.cn/articles/780.html",
    "date": "2009-05-06T16:33:52+08:00",
    "description": "\nGAE就是Google Application Engine，通过Alexa的网站排名系统，我们可以知道Top 10的使用GAE的网站，他们是：（截止至今天）\n1. www.robtex.com (Alexa rank: 1691)\n2. www.twibes.com (Alexa rank: 13143)\n3. www.acid-play.com (Alexa rank: 25884)\n4. www.jaiku.com (Alexa rank: 29061)\n5. www.wordle.net (Alexa rank: 34022)\n6. www.twazzup.com (Alexa rank: 40910)\n7. www.twollo.com (Alexa rank: 41414)\n8. www.downforeveryoneorjustme.com (Alexa rank: 41718)\n9. www.chromeexperiments.com (Alexa rank: 49899)\n10. www.desktop-reporting.com (Alexa rank: 51447)\n那么，我们如何才能知道一个网站是运行在GAE上的呢？\n …\n 阅读全文 Read More\n\n (3 人打了分，平均分： 1.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个在线的画UML图的网站",
    "url": "https://coolshell.cn/articles/776.html",
    "date": "2009-05-06T16:16:48+08:00",
    "description": "\n\nhttp://yuml.me/\n这个网站可以允许你在线地，通过一些UML的语法，生成相应的图片。\n比如，如果你输入：\n\n<img src=\"http://yuml.me/diagram/class/[Customer]1-0..*[Address]\"/>\n\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "让Ruby增加30%的性能改进",
    "url": "https://coolshell.cn/articles/766.html",
    "date": "2009-05-05T23:44:55+08:00",
    "description": "\n一切都和 --enable-pthread 有关\n问一下 Ruby 黑客怎么简单地增加一个线程的Ruby应用程序的性能。也许，这些黑客会告诉你，“小伙，每个人都知道在编译Ruby的时候你需要使用configure 的 --disable-pthread参数”。没错，在configure --disable-pthread 可以让你得到大约 30% 性能提高。但是，这是为什么呢？\n所有的这一些我们需要使用 strace 工具，这个工具可以打出所有的真实的操作系统的调用。\n下面，是一段我们测试的例程：\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.43 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何检查网页浏览器的兼容性",
    "url": "https://coolshell.cn/articles/757.html",
    "date": "2009-05-04T14:57:24+08:00",
    "description": "\nBrowserShots.org 是一个很不错的在线服务，它主要帮助你检查一下你所设计网站是否兼容所有的浏览器。其目前支持四个操作系统：Linux, Windows, MacOS和BSD。浏览器支持的就多了：包括MSIE，Firefox，Chrome，Safari，Opera，Dillo，SeaMonkey，Navigator等等浏览器的不同版本。\n使用这个在线服务其实很简单，只需要输入你的网址，并勾选一下各种浏览器。当然，你还可以指定分辨率，色彩度，Javascript，Java和Flash的版本。然后，这个网站会利用虚拟机的技术，启动操作系统然后运行相应的浏览器访问你的网站，并把图抓下来上传到你可以访问的位置以例提供你下载。\n需要注意的是，如果你选中了太多的浏览器，可能整个速度就有些慢了，而系统设置是30分钟过期，而可能有很多浏览器的任务却高于这个时间。所以，你需要过会就去点击一下“Extend”按钮，以告诉系统延长过期时间。\n下面是“酷壳”的一些抓图链接如下：\nhttp://browsershots.org/https://coolshell.cn/\n (5 人打了分，平均分： 1.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "不要拯救那些职场上的“无可救药”",
    "url": "https://coolshell.cn/articles/753.html",
    "date": "2009-05-03T18:06:26+08:00",
    "description": "\n此文来自Marshall Goldsmith的博客，此人曾任Peter Drucker Foundation 的Board  member（实在不知道怎么翻译），49年出生，生平中是一系列管理学方面的成就，是一位罕见的高产的，大师型的博主。\n显然，我所翻译的标题有些夸张（原标题是“spotting the uncoachables”）。\n职场上除了职位所确立的关系之外，还有一种重要的关系，那就是“师徒关系”。如果幸运，大家会遇到有人愿意 coach 自己，给自己传递技能或者指点职场之道。等我们在一个地方呆久了，也会有时候 coach 一些新入道的同事，甚至有时候为了达到团队目的，需要用自己的经验和技能影响自己的同僚。\n此文提到的了4种很难coach的情形，大家可以拿来参考。但是这并不代表我们遇到觉得“朽木不可雕也”的人的时候就应该彻底放弃。如果我们无可避免的需要影响他们的行为，我们需要更有技巧的选择自己的方式。\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 1.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "某Python实现的尾部递归",
    "url": "https://coolshell.cn/articles/737.html",
    "date": "2009-04-30T08:22:09+08:00",
    "description": "\nmailper 在2009年4月26的文章里《Guido认为程序员大多数工作不需要递归》谈及递归不是编程的基础。并且在python中并没有实现尾部递归Tail Recurssion。\n但是，今天我们却看见了某Python实现的尾部递归\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.13 )Loading...\n"
  },
  {
    "content": "",
    "title": "Glassfish ESB 的教程",
    "url": "https://coolshell.cn/articles/732.html",
    "date": "2009-04-29T14:18:27+08:00",
    "description": "\nOpenESB项目实现了一个运行期企业服务总线(Enterprise Service Bus:ESB)使用JBI(Java业务集成)作为核心基础。OpenESB可以让你集成企业应用与Web Service松散地连接成复合的应用程序。这使得你可以无缝地组合与拆解该复合应用程序，并认识到一个真正面向服务架构(SOA)的优点。\nBPEL是一种编程语言，它明确定义了基于Web服务的业务流程。BPEL在支持业务伙伴间的长时间会话方面表现尤为卓越。BPEL将成为基于Web服务的业务流程最广泛采用的标准，这一趋势早在该标准正式发布前就已经非常明显。\nBPEL适用于支持业务流程逻辑的“宏观编程”。这些业务流程均是完整而独立的应用，它们将Web服务作为实现其业务功能的“活动”。BPEL不致力于成为通用的编程语言，相反，它的应用设想就是与其他实现业务功能（“微观编程”）的编程语言结合使用。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "编程语言流行度排名",
    "url": "https://coolshell.cn/articles/706.html",
    "date": "2009-04-28T17:44:49+08:00",
    "description": "\n下面的这些排名并不是非常科学的，它们只是从某种方面表现出了编程语言的流行程度。仅供参考。\n\nYahoo Search\n这里，我们使用了Yahoo Search API，简单地搜索了一下相关的编程语言。收搜字样是”language programming”，下面是搜索到的页面结果。也许这能够说明语言的流行程度。 \n　　\n<!--\n      Flotr.draw($('search_results'), [[[33100.0, 1], [96800.0, 2], [105000.0, 3], [107000.0, 4], [109000.0, 5], [122000.0, 6], [287000.0, 7], [318000.0, 8], [339000.0, 9], [347000.0, 10], [357000.0, 11], [385000.0, 12], [397000.0, 13], [479000.0, 14], [678000.0, 15], [1900000.0, 16], [2000000.0, 17], [2210000.0, 18], [2250000.0, 19], [2430000.0, 20], [2530000.0, 21], [3340000.0, 22], [3360000.0, 23], [3430000.0, 24], [4730000.0, 25], [7350000.0, 26], [7350000.0, 27], [15500000.0, 28], [16900000.0, 29]]], {\"yaxis\": {\"ticks\": [[1.4, \"OCaml\"], [2.4, \"Haskell\"], [3.4, \"Erlang\"], [4.4, \"Smalltalk\"], [5.4, \"Forth\"], [6.4, \"Tcl\"], [7.4, \"Ada\"], [8.4, \"Scheme\"], [9.4, \"Fortran\"], [10.4, \"Actionscript\"], [11.4, \"Lisp\"], [12.4, \"Cobol\"], [13.4, \"Lua\"], [14.4, \"Assembly\"], [15.4, \"Pascal\"], [16.4, \"SQL\"], [17.4, \"Shell\"], [18.4, \"Ruby\"], [19.4, \"Delphi\"], [20.4, \"D\"], [21.4, \"C#\"], [22.4, \"JavaScript\"], [23.4, \"Perl\"], [24.4, \"Python\"], [25.4, \"Visual\\u0026nbsp;Basic\"], [26.4, \"C++\"], [27.4, \"PHP\"], [28.4, \"Java\"], [29.4, \"C\"]]}, \"bars\": {\"horizontal\": true, \"show\": true, \"barWidth\": 0.8}});\n// -->\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "25个Linux相关的网站",
    "url": "https://coolshell.cn/articles/701.html",
    "date": "2009-04-28T13:33:12+08:00",
    "description": "\n下面是25个最具有影响力，也是最重要的Linux网站，这些网站提供了Linux的分发包，软件，文件，新闻，以及其它所有的关于Linux的东西。关于Linux的分发包历史，可以看看本站的这篇文章《Linux Distribution Timeline》\n1. Linux.org\n这个站点主要提供Linux相关的新闻、文档、教程，培训，以及其它一切和Linux相关的东西。这是你需要了解Linux开源社区的总入口。\n2. Debian.org\n如果你想要了解所有关于 Debian 和Linux/GNU 操作系统的相关信息，这个网站是必需要访问的，因为这是Debian的官网。\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "Guido认为程序员大多数工作不需要递归",
    "url": "https://coolshell.cn/articles/694.html",
    "date": "2009-04-26T19:10:15+08:00",
    "description": "\nPython的创造者Guido在最近一篇关于为什么Python里没有 Tail Recurssion Elimination （暂译：尾递归优化）的文章中提到一个我们可能经常听到的观点“真正的程序员一般不用递归”。\nhttp://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html\nThird, I don’t believe in recursion as the basis of all programming. This is a fundamental belief of certain computer scientists, especially those who love Scheme and like to teach programming by starting with a “cons” cell and recursion. But to me, seeing recursion as the basis of everything else is just a nice theoretical approach to fundamental mathematics (turtles all the way down), not a day-to-day tool.\n翻译：（第三点）我不认为递归是编程的基础。递归是一些计算机科学家们，尤其是那些热爱Scheme （lisp的一支）和喜欢用‘cons’ 来教表头表尾和递归的人们。但是对我（Guido）来说，递归只是一些为基础数学研究而存在的理论手段（例如分形几何学），而不是日常的编程工具。\n这也再次证明当年“耗”哥当年在楼下遛弯时候给我的教导，好的程序员不在于多么会写看似非常聪明的代码，重要的是能够思路清晰的用最简单的方式解决问题。\n (9 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "你能做对下面这些JavaScript的题吗？",
    "url": "https://coolshell.cn/articles/688.html",
    "date": "2009-04-26T14:48:51+08:00",
    "description": "\n你能做对下面这些JavaScript的题吗？\n原文\n你认为你了解JavaScript? 快速的做一下下面的这些题目。并将下面的每一个表达式的值写出。(答案在问题后面)\n1. ++Math.PI\n2. (0.1 + 0.2) + 0.3 == 0.1 + (0.2 + 0.3)\n3. typeof NaN\n4. typeof typeof undefined\n5. a = {null:null}; typeof a.null;\n6. a = “5”; b = “2”; c = a * b;\n7. a = “5”; b = 2; c = a+++b;\n8. isNaN(1/null)\n9. (16).toString(16)\n10.016 * 2\n11.~null\n12.”ab c”.match(/\\b\\w\\b/)\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.42 )Loading...\n"
  },
  {
    "content": "",
    "title": "用Python写NCurses UI",
    "url": "https://coolshell.cn/articles/677.html",
    "date": "2009-04-26T10:19:41+08:00",
    "description": "\nNcurses是一个能提供基于文本终端窗口功能的动态库. Ncurses可以:\n\n可以使用整个屏幕\n创建和管理一个窗口\n使用8种不同的彩色\n为您的程序提供鼠标支持\n使用键盘上的功能键\n\nNcurses可以在任何遵循ANSI/POSIX标准的Unix/Linux系统上运行，除此之外，它还可以从系统数据库中检测终端的属性,，并且自动进行调整,提供一个不受终端约束的接口。因此,Ncurses可以在不同的系统平台和不同的终端上工作的非常好。\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "Python调用C语言函数",
    "url": "https://coolshell.cn/articles/671.html",
    "date": "2009-04-26T01:29:57+08:00",
    "description": "\n使用Python的ctypes，我们可以直接调用由C直接编译出来的函数。其实就是调用动态链接库中的函数。为什么我们需要这样做呢，因为有些时候，我们可能需要一个性能上比较讲究的算法，有些时候，我们可以在Python中使用已经有了的现成的被封闭在动态链接库中的函数。下面是如何调用的示例。\n首先，我们用一个乘法来表示一个算法功能。下面是C的程序：\nint\nmultiply(int num1, int num2)\n{\n    return num1 * num2;\n}\n\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 4.12 )Loading...\n"
  },
  {
    "content": "",
    "title": "使用PHP的cURL库",
    "url": "https://coolshell.cn/articles/664.html",
    "date": "2009-04-25T17:12:32+08:00",
    "description": "\n使用PHP的cURL库可以简单和有效地去抓网页。你只需要运行一个脚本，然后分析一下你所抓取的网页，然后就可以以程序的方式得到你想要的数据了。无论是你想从从一个链接上取部分数据，或是取一个XML文件并把其导入数据库，那怕就是简单的获取网页内容，cURL 是一个功能强大的PHP库。本文主要讲述如果使用这个PHP库。\n 启用 cURL 设置\n首先，我们得先要确定我们的PHP是否开启了这个库，你可以通过使用php_info()函数来得到这一信息。\n<?php\n    phpinfo();\n?>\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.45 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux 的僵尸(zombie)进程",
    "url": "https://coolshell.cn/articles/656.html",
    "date": "2009-04-25T15:28:42+08:00",
    "description": "\n可能很少有人意识到，在一个进程调用了exit之后，该进程 并非马上就消失掉，而是留下一个称为僵尸进程（Zombie）的数据结构。在Linux进程的5种状态中，僵尸进程是非常特殊的一种，它已经放弃了几乎所 有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记载该进程的退出状态等信息供其他进程收集，除此之外，僵尸进程不再占有 任何内存空间。\n僵尸进程的来由，要追溯到Unix，Unix的设计者们设计这个东西并非是因为闲来无事想装装酷什么的。上面说到，僵尸进程中保存着很多对程序员和系统管理员非常重要的信息，首先，这个进程是怎么死亡的？是正常退出呢，还是出现了错误，还是被其它进程强迫退出的？也就是说，这个程序的退出码是什么？其次，这个进程占用的总系统CPU时间和总用户CPU时间分别是多少？发生页错误的数目和收到信号的数目。这些信息都被存储在僵尸进程中，试想如果没有僵尸进程，进程执行多长我们并不知道，一旦其退出，所有与之相关的信息都立刻都从系统中清除，而如果此时父进程或系统管理员需要用到，就只好干瞪眼了。\n …\n 阅读全文 Read More\n\n (17 人打了分，平均分： 4.24 )Loading...\n"
  },
  {
    "content": "",
    "title": "MySQL: InnoDB 还是 MyISAM?",
    "url": "https://coolshell.cn/articles/652.html",
    "date": "2009-04-24T14:33:09+08:00",
    "description": "\nMyISAM 是MySQL中默认的存储引擎，一般来说不是有太多人关心这个东西。决定使用什么样的存储引擎是一个很tricky的事情，但是还是值我们去研究一下，这里的文章只考虑 MyISAM 和InnoDB这两个，因为这两个是最常见的。\n下面先让我们回答一些问题：\n\n你的数据库有外键吗？\n你需要事务支持吗？\n你需要全文索引吗？\n你经常使用什么样的查询模式？\n你的数据有多大？\n\n …\n 阅读全文 Read More\n\n (14 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "22个不错的CSS技术",
    "url": "https://coolshell.cn/articles/648.html",
    "date": "2009-04-24T00:13:30+08:00",
    "description": "\n我们可以CSS 干很多很多相当不错的事情，你应该知道如何做这些事情。下面列出了一些你必需要知道的用CSS技术，点击链接，你可以看到相关教程。这个技术相当值得你去学习。\n1. CSS 地图\n\n…\n 阅读全文 Read More\n\n (8 人打了分，平均分： 2.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "Java如何取源文件中文件名和行号",
    "url": "https://coolshell.cn/articles/611.html",
    "date": "2009-04-22T15:00:49+08:00",
    "description": "\n如何取的Java源代码文件中文件名和行号：）\n在C/C++的程序，编译器提供了两个宏来支持取得源文件中的行号和文件名，这两个宏是__FILE__,__LINE__\n你可以如下的方法打印行号和文件名\n\n\n#include <stdio.h>\nint main()\n{\n fprintf(stdout,\"[%s:%d] Hello World!\",__FILE__,__LINE__);\n return 0;\n}\n\n\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "早期XML Schema中的open content模型",
    "url": "https://coolshell.cn/articles/604.html",
    "date": "2009-04-22T13:04:41+08:00",
    "description": "\n摘要：在看SDO的一些规范文档，可能会出现open content这样的词组，上网查了相关资料，发现这是一种XML Schema的模型，本文就描述了XML Schema的Open Content模型的含义，在最新的XML Schema规范中，好像已经没有Open模型，它的等价物是any模型。\n早期发布的XML Schema规范中支持一种新的element定义，在这个定义中，你可以将XML的Element的内容定义为开放的。下面我们将会介绍一下XML的Open Content 模型。\n在Open Content模型中，如果一个XML的元素在XML Schema中被声明为开放的，那么这个Schema对应的XML文档的实例就可以包含一个没有在Schema中罗列的子元素。例如，一个包含着如下的XML Schema的Schema文件\n …\n 阅读全文 Read More\n\n (4 人打了分，平均分： 1.75 )Loading...\n"
  },
  {
    "content": "",
    "title": "Google 三维 JavaScript API 发布",
    "url": "https://coolshell.cn/articles/599.html",
    "date": "2009-04-22T12:01:41+08:00",
    "description": "\nO3D 是一个开源的Web API，其可以创建相当牛X的基于浏览器的可交互式的3D应用。这个API在很有可能会形成以后的Web上的3D图形的标准。下面是这个API的主站点： http://code.google.com/apis/o3d/ 。O3D目前支持Windows, Mac和Linux三种平台。\n下面是一些简单地使用O3D的API的如何创建一个立方体，更详细的内容请访问O3D的网站。\n1）首选我们先创建一个比较原始的立方体。使用createCube()方法。\n[javascript]\nfunction createCube(material) {\nvar cubeShape = g_pack.createObject(‘Shape’);\nvar cubePrimitive = g_pack.createObject(‘Primitive’);\nvar streamBank = g_pack.createObject(‘StreamBank’);\n cubePrimitive.material = material;\ncubePrimitive.owner(cubeShape);\ncubePrimitive.streamBank = streamBank;\n.\n.\n.\n[/javascript]\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.86 )Loading...\n"
  },
  {
    "content": "",
    "title": "Oracle成功收购Sun",
    "url": "https://coolshell.cn/articles/595.html",
    "date": "2009-04-21T00:10:48+08:00",
    "description": "\n前段时间还传出IBM要收购Sun的消息，当然，如果IBM收购Sun了，那么IBM真是活雷锋了。呵呵。\n今天，Oralce正式宣布成功收购Sun，原文在这里。Oracle以每股9.5美元，总共以74亿美金的天价收购Sun公司，其中，56亿美金付现或购买Sun的债务。现在，Java, Solairs以及MySQL都是Oracle的了。\nOracle的CEO——Larry Ellison说：“The acquisition of Sun transforms the IT industry, combining best-in-class enterprise software and mission-critical computing systems” 。\n让我们看看这次收购以后还会发生什么样的事情。\n (4 人打了分，平均分： 2.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "免费电子书：Ruby Complete",
    "url": "https://coolshell.cn/articles/591.html",
    "date": "2009-04-20T23:14:58+08:00",
    "description": "\n这是一本免费的关于教你如何使用Ruby编程的电子书。作者：Huw Collingbourne， SapphireSteel Software 公司的Technology Directory，他也是一个开发 Visual Studio下的Ruby Steel IDE的程序员。这本书给大家提供非常全面的教程，其涵养了几乎所有主要的Ruby编程的东西。\n每一章的代码都可以被下载。如果你是一个 Ruby In Steel 的用户，那么，你可以在一个单一的Visual Studio solution 中载入这些代码，并可以在集成的 Ruby Console 上运行这些代码，并调试之。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "5个不错的Flash的英文教程网",
    "url": "https://coolshell.cn/articles/585.html",
    "date": "2009-04-20T12:34:43+08:00",
    "description": "\n下面的这5个教程纯属个人观点，另外他们还都是免费的。\nMrSunStudios– 这是一个非常不错的教程网站。里面有大量大量的关于ActionScript，PHP等等的教程。能教会你做很多很实用的东西。\nAwestyProductions– 虽然没怎么更新了，但他还是一个很不错的网站，其教你怎么去做一个小游戏。注意，其只是AS2的\nKirupa– 虽然没有太多的教程，不过这是一个巨大的社区，只要你问问题，你可以很快得得到他们的帮助和答案。当你遇到你无法解决的问题时，这是相当相当的不错的去处。\nFlash Explained– 超过9页的非常不错的教程。\nFlash Magazine– 并不只是一个杂志，其还有很多教程，那才是这个网站最重要的。\n (4 人打了分，平均分： 2.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "使用Google API做统计图",
    "url": "https://coolshell.cn/articles/582.html",
    "date": "2009-04-20T12:09:31+08:00",
    "description": "\nGoogle提供了一个的统计图的API。你可以通过构造一个URL链接来获得Google提供的统计图方案。\n比如：如果我们使用如下链接：\n\n<img src=\"http://chart.apis.google.com/chart?cht=p3&chd=t:60,40&chs=250x100&chl=酷壳|Cocre\" alt=\"\" />\n\n我们就可能通过如下的HTML代码显示一个60:40的饼图：\n\nGoogle的这个API支持的统计图风格相当的多。\n …\n 阅读全文 Read More\n\n (4 人打了分，平均分： 2.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux设备驱动Hello World程序介绍",
    "url": "https://coolshell.cn/articles/566.html",
    "date": "2009-04-18T01:19:52+08:00",
    "description": "\nby Valerie Henson\n07/05/2007\n(译者注：本文的例子是只能在linux的2.6内核下使用的，2.6以上的内核，译者没有做过实验，2.4是要修改make文件才能运行。)\n本文的出处：这里\n自古以来，学习一门新编程语言的第一步就是写一个打印“hello world”的程序（可以看《hello world 集中营》这个帖子供罗列了300个“hello world”程序例子）在本文中，我们将用同样的方式学习如何编写一个简单的linux内核模块和设备驱动程序。我将学习到如何在内核模式下以三种不同的方式来打印hello world，这三种方式分别是： printk()，/proc文件，/dev下的设备文件。\n准备：安装内核模块的编译环境\n一个内核模块kernel module是一段能被内核动态加载和卸载的内核代码，因为内核模块程序是内核的一个部分，并且和内核紧密的交互，所以内核模块不可能脱离内核编译环境，至少，它需要内核的头文件和用于加载的配置信息。编译内核模块同样需要相关的开发工具，比如说编译器。为了简化，本文只简要讨论如何在Debian、Fedora和其他以.tar.gz形式提供的原版linux内核下进行核模块的编译。在这种情况下，你必须根据你正在运行内核相对应的内核源代码来编译你的内核模块kernel module(当你的内核模块一旦被装载到你内核中时，内核就将执行该模块的代码)\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "30种时尚的CSS网站导航条",
    "url": "https://coolshell.cn/articles/562.html",
    "date": "2009-04-17T23:54:46+08:00",
    "description": "\n我想，大家在上网的时候一定见过很多很多种各式各样的网站导航条的设计。这些导航条基本上来说都是用CSS来做的。这里，我们将向你介绍几种最不错的用CSS设计的网站导航条。希望你会喜欢。\n1. The Menu menu\n\n 这是一个非常不错的CSS菜单，相当的独特，每个图标都有鼠标感应，然后出现子菜单。如果你想知道怎么做的，你可以简单的看一下这个网页的源码。\n …\n 阅读全文 Read More\n\n (29 人打了分，平均分： 4.38 )Loading...\n"
  },
  {
    "content": "",
    "title": "菜鸟学PHP之Smarty入门",
    "url": "https://coolshell.cn/articles/559.html",
    "date": "2009-04-17T15:55:09+08:00",
    "description": "\n　　刚开始接触模版引擎的 PHP 设计师，听到 Smarty 时，都会觉得很难。其实笔者也不例外，碰都不敢碰一下。但是后来在剖析 XOOPS 的程序架构时，开始发现 Smarty 其实并不难。只要将 Smarty 基础功练好，在一般应用上就已经相当足够了。当然基础能打好，后面的进阶应用也就不用怕了。\n　　\n　　这篇文章的主要用意并非要深入探讨 Smarty 的使用，这在官方使用说明中都已经写得很完整了。笔者仅在此写下一些自己使用上的心得，让想要了解 Smarty 却不得其门而入的朋友，可以从中得到一些启示。就因为这篇文章的内容不是非常深入，会使用 Smarty 的朋友们可能会觉得简单了点。\n　　\n…\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "VI的一些小技巧",
    "url": "https://coolshell.cn/articles/556.html",
    "date": "2009-04-17T12:45:20+08:00",
    "description": "\n下面是一些vi的小技巧。\n:sp <filename>\n 打开一个文件，并和当前打开的文件分屏显示。\nCtrl+W+W\n在分屏显示中的不同文件中切换。\n*\n向前搜索目前光标所在的单词。\n#\n向后搜索目前光标所在的单词。\n:%s/word1/word2/g\n全文搜索word1并以word2替换之。\n:’a,’bs/word1/word2/g\n仅在第a行到第b行间搜索并替换。\n\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.57 )Loading...\n"
  },
  {
    "content": "",
    "title": "C语言下的错误处理的问题",
    "url": "https://coolshell.cn/articles/551.html",
    "date": "2009-04-17T12:12:09+08:00",
    "description": "\n下面是三种C语言的错误处理，你喜欢哪一种？还是都不喜欢？\n\n/* 问题: 不充分，而且很容易出错，前面成功分配的资源，后面出错需要帮助释放 */\nint foo(int bar)\n{\n        int return_value = 0;\n        int doing_okay = 1;\n        doing_okay = do_something( bar );\n        if (doing_okay)\n        {\n                doing_okay = init_stuff();\n        }\n        if (doing_okay)\n        {\n                doing_okay = prepare_stuff();\n        }\n        if (doing_okay)\n        {\n                return_value = do_the_thing( bar );\n        }\n        return return_value;\n}\n\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.13 )Loading...\n"
  },
  {
    "content": "",
    "title": "有效编程的14件事",
    "url": "https://coolshell.cn/articles/546.html",
    "date": "2009-04-15T23:12:12+08:00",
    "description": "\n下面是14件如何有效编程的方法：\n\n\n计划(Plan)\n所谓Plan，其实就是对应于编程中的“设计”阶段，当然，这里的Plan并不像设计那样重量级。它要求我们程序员在正式编程前至少要考虑一下下面的问题：\n\n你这个程序，工具或是项目的目的，究竟是用来干什么的。你只有知道做什么，要达到什么样的目的，你才能做得对，做得好。\n需要有什么样的功能。需要你给出来个功能列表。这样可以保证我们不会遗露了什么。\n准备好一些技术难题的前期调查和解决方案。不要等到开始编程的时候才去想。\n\n下面这你因为有“Plan”而得到的好处：\n\n你能够清楚地明白你要做的东西长什么样？\n你能清楚知道你要开发的东西要干些什么事？\n你能够在开发过程中解决你所有可能发生的难题。\n\n\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.38 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个显示排序过程的Python脚本",
    "url": "https://coolshell.cn/articles/536.html",
    "date": "2009-04-15T14:01:45+08:00",
    "description": "\n之前向大家介绍过《一个排序算法比较的网站》，那个网站用动画演示了各种排序算法，并分析了各种排序算法。这里，要向大家推荐一个Python脚本，其可以把排序的过程给显示出来。\n下图是“冒泡排序”的一个示例，其中：\n\n折线表示了各个元素的位置变化。\n折线的深浅表示了元素的大小。越深则越大。\n\n\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 3.58 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何在Google App Engine上运行PHP",
    "url": "https://coolshell.cn/articles/531.html",
    "date": "2009-04-14T23:00:30+08:00",
    "description": "\nGoogle 在一年前发布了Google App Engine (GAE) 。这是一个免费的 App Engine 主机，可以让你的每个Application（免费的最多有10个）有1GB的磁盘空间和43.6个CPU小时与10GB的上传和10GB的下载带宽，以及2000个电子邮件。如果你需要地更多，那就是付钱了。\nGAE 最近发布了正式支持Java的通知。于是，互联网上开始有了各种各样的BLOG评论文章，还有一些人居然在Google App Engine 中运行PHP程序，这个太不可思议了。因为GAE目前并不支持PHP。\n其实，他们使用了一个叫做 Quercus的东东， Quercus 本质上是一个 100% 的用Java 实现的一个 PHP 引擎 (需要 JDK 1.5)，所以，只要你把Quercus集成到你的GAE中，你自然也可以运行PHP脚本了。\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.40 )Loading...\n"
  },
  {
    "content": "",
    "title": "NUI一个跨平台的C++库",
    "url": "https://coolshell.cn/articles/528.html",
    "date": "2009-04-14T22:35:55+08:00",
    "description": "\n这个免费的GPL许可证的C++库据说可以跨Linux, MacOS, Windows和iPhone，太过份，居然还连iPhone也跨了。\n大家可以到下面这个网址上下载下来试试看，我还没有来得及试。\nhttp://www.libnui.net/\n\n \n (10 人打了分，平均分： 3.30 )Loading...\n"
  },
  {
    "content": "",
    "title": "深入浅出CORBA",
    "url": "https://coolshell.cn/articles/514.html",
    "date": "2009-04-14T20:07:58+08:00",
    "description": "\n这个是一本关于CORBA技术的中文文档，原文是Ciaran McHale《CORBA Explained Simply》，我将其翻译成中文形式，并首发在酷壳之上，现在先提供一个PDF的文件形式下载，关于html形式的下载或在线阅读形式以后再慢慢整理。CORBA有可能是一门将要过时的技术，但是它的思想却仍然被当今一些流行的分布式架构所借鉴。所以通过学习CORBA，也许我们可以更好的去理解EJB，去理解Web Service，或者SOA……\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 2.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "未来五年程序员需要掌握的10项技能",
    "url": "https://coolshell.cn/articles/511.html",
    "date": "2009-04-14T17:26:30+08:00",
    "description": "\n由于最近经济形势的变化，很多开发人员只关注他们短期的工作前景。与此同时，把时间和精力花在学习最能带来回报的新技术上是件非常重要的事情。这里是我们列举的10种你需要马上开始学习的技术，让你的简历在未来5年不会落伍。这个列表并不完全，有很多业界的领域（比如大型机开发人员）没有涉及。尽管如此，对通常的主流开发来说，学习其中至少7项技能肯定不会错 ——不但要达到能在面试时侃侃而谈的程度，还得能在工作中运用自如。\n1) 编程语言三选一 (.NET, Java, PHP)\n除非开发世界有根本的改变（类似小行星击中雷德蒙），在不远的将来，大部分开发人员将需要了解三大开发平台——.NET (VB.NET或者C#), Java, 或者PHP——中的至少一个。并且只了解核心语言也是不够的。因为项目会包含越来越多不同的功能，你需要对相关框架和库有深入的了解。（本人以为C/C++可能比这三个语言更有竞争力）\n …\n 阅读全文 Read More\n\n (26 人打了分，平均分： 3.77 )Loading...\n"
  },
  {
    "content": "",
    "title": "Windows下和程序员相关小工具",
    "url": "https://coolshell.cn/articles/506.html",
    "date": "2009-04-13T21:47:47+08:00",
    "description": "\n1 HOUR SOFTWARE – 很多的小工具集\n.NET Memory Profiler – 可以找出.NET程序中的内存泄露问题，并找出可优化的内存。\n.NET Reflector – 查看，导航，搜索.NET汇编中的类的继承关系。\nActive Webcam – Webcam 视频监视软件。\nArsClip – 剪贴版管理程序，可以跟踪每次剪贴版中的内容，并可以通过设置热键，取出粘贴其中的内容。\nASP2ASPX – 转换ASP 程序页到ASP.NET\nAutoHotKey – 自动点击键盘和鼠标。\n …\n 阅读全文 Read More\n\n (13 人打了分，平均分： 3.15 )Loading...\n"
  },
  {
    "content": "",
    "title": "Ubuntu的并行启动",
    "url": "https://coolshell.cn/articles/501.html",
    "date": "2009-04-13T11:08:03+08:00",
    "description": "\n如果你在使用多核处理器，那么你可以配置Ubuntu的一个参数来使用Ubuntu的启动并行，以加快其启动速度。\n这个参数在文件/etc/init.d/rc中，其参数名是CONCURRENCY默认值是none，你可以把这个参数改成如下所示。于是，你就开启了Ubuntu的并行启动的功能。\nCONCURRENCY=shell\n但是，这个参数会导致dbus, hal和gdm的产生“race condition”竞争条件，所以，这三个程序的启动顺序非常的关键。其必需保证这个顺序：dbus -> hal -> gdm。这个顺序在Ubuntu的Hardy，Intrepid 或Jaunty中是没有问题的。但是，我们不排除在别的版本中会有问题。\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.17 )Loading...\n"
  },
  {
    "content": "",
    "title": "Python处理中文的时候的一些小技巧",
    "url": "https://coolshell.cn/articles/461.html",
    "date": "2009-04-12T18:19:04+08:00",
    "description": "\n相信第一次处理中文的朋友们可能都会对中文的encoding 和程序的报错很头疼。\n如果你像我一样希望能够把事情尽快做好而不去深究，你可能会写一些异常处理的代码把 UnicodeEncodingError糊弄过去先，但当你开始怀疑有多少encoding出错的信息被你丢弃的时候，可能你会很惊奇。于是，你还是会想坐下来，（洗把脸）然后面对自己必须弄懂什么是utf-8，什么是 ‘gb2312’， 什么是 ‘gbk’ 和其中的猫腻。正如有时候猛撕小伤口上邦迪胶布的快感一样，有时候当你认真面对一些你平时一直回避的问题的时候（其实有时候需要的不是勇气）， 你反而会觉得“不过如此”，并且能够一劳永逸的解决问题。\n关于Python处理Unicode，我所能找到的最言简意赅的入门教程是：\nUnicode In Python, Completely Demystified （揭秘Python Unicode）\n\n简要罗列一下最重要最实用的点：\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.36 )Loading...\n"
  },
  {
    "content": "",
    "title": "Python脚本如何对文件通配符匹配",
    "url": "https://coolshell.cn/articles/444.html",
    "date": "2009-04-12T14:50:26+08:00",
    "description": "\n有时候，我们可能会写一些轻量级的脚本去处理很多符合某种pattern的文件，例如“某目录下的 *logfile.csv” 但是，我们大多数脚本的参数都是 sys.argv, 如何解析 wildcard 匹配呢？\ntest.py\n from glob import glob\n...\nif __name__ == \"__main__\":\n    file_names = glob(sys.argv[1])\n    for file_name in file_names:\n        do_something(file) \n这样就可以像使用其他终端命令一样使用脚本test.py 进行wildcard匹配了\n>> test.py ./*logfile.csv\n (5 人打了分，平均分： 1.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "9个强大免费的PHP库",
    "url": "https://coolshell.cn/articles/455.html",
    "date": "2009-04-12T12:29:53+08:00",
    "description": "\n1. ReCAPTCHA\nreCAPTCHA  允许你的网站集成一个Advanced CAPTCHA 系统，这个系统可以帮助你阻止一些垃圾信息。可视化的CAPTCHA 同样也有一个有用的声音功能。另外，在reCAPTCHA 服务里，这个PHP库也包含了一个给 “Mailhide” 服务用的API，这个可以把你的邮件地址隐藏于一些抓邮件地址的程序。\n这个API是免费并且非常容易使用的，你需要做的就是申请一个API的KEY。\n\n下载 ReCAPTCHA | 获取一个API Key | 相关文档\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "Python中实现多属性排序",
    "url": "https://coolshell.cn/articles/435.html",
    "date": "2009-04-12T09:33:43+08:00",
    "description": "\n我们有一组记录:\nlist_records =\n(\n (department, name, salary),\n (department, name, salary),\n ...\n (department, name, salary)\n)\n然后我们想进行类似 MS – Excel 里的 “then sort by” 中的功能一样先基于department排序，然后再在部门内按照salary排序。\n其他编程语言可能相对复杂，我这里写出一个用Python实现的最简方法（也许有比这个还短的，来挑战吧）\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 2.88 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员需要具备的基本技能",
    "url": "https://coolshell.cn/articles/428.html",
    "date": "2009-04-11T16:57:44+08:00",
    "description": "\n软件开发是一个跨度很大的技术工作，在语言方面，有C，C++，Java，Ruby等等等等，在环境方面，又分嵌入式，桌面系统，企业级，WEB，基础系统，或是科学研究。但是，不管是什么的情况，总是有一些通用的基本职业技能。\n这些最基本的职业技能通常决定了一个程序员的级别，能否用好这些技能，直接关系到了程序员的职业生涯。很多程序新手也是因为缺少、达不到或是不熟悉在这些基本技能，所以，他们需要有老手带，需要努力补齐这些技能。而高级程序员应该非常熟悉这些基本技能，而且有能力胜任并带领其他经验不足的程序员。\n下面这些基本职业技术可以用来做为对一个程序员的评估，很明显，下面的这些技能都可以用来做面试。虽然，还有很多非技术的因素，但对于评估一个程序员的技术能力来说，其应该是足够的了。\n下面是程序员所应该具备的基本职业技能：\n …\n 阅读全文 Read More\n\n (69 人打了分，平均分： 4.48 )Loading...\n"
  },
  {
    "content": "",
    "title": "PDF电子书搜索引擎",
    "url": "https://coolshell.cn/articles/424.html",
    "date": "2009-04-10T18:09:24+08:00",
    "description": "\n这是一个PDF电子书的搜索引擎，可以搜索到很多PDF的图书，包括中文的。\n\nhttp://search-pdf-books.com/\n\n简单的试了一下，的确很不错，推荐给大家。\n (7 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "1980年和2009年的1GB电脑内存的比较",
    "url": "https://coolshell.cn/articles/410.html",
    "date": "2009-04-10T17:24:26+08:00",
    "description": "\n从1980年到现在，我们的科技到底进步了多少：）\n下面这个图说明了1980年大机的1GB的内存和2009年的1GB的内存。\n\n (9 人打了分，平均分： 2.56 )Loading...\n"
  },
  {
    "content": "",
    "title": "4月14日，微软补丁日",
    "url": "https://coolshell.cn/articles/404.html",
    "date": "2009-04-10T10:21:37+08:00",
    "description": "\n下周二，微软准备release至少8个以上的安全补丁，如下表所示。目前没有太多的信息，不过，我们知道的是其中Excel的那个BUG早在2月份的时候就报告了，http://www.microsoft.com/technet/security/advisory/968272.mspx，可是这么长的时候后才有patch。哎。\n这次的BUG数之多，覆盖面之广（包括IE，Office，DirectX，Windows …），看来，下周二各个公司的IT部门又有得忙了。\n\n\n\n\n编号\n\n\n严重程度\n\n\n攻击方式\n\n\n重启\n\n\n影响的软件*\n\n\n\n\nWindows1\n\n\n严重\n\n\n远程代码运行\n\n\n需要重启\n\n\nMicrosoft Windows, Microsoft Office\n\n\n\n\nWindows2\n\n\n严重\n\n\n远程代码运行\n\n\n需要重启\n\n\nMicrosoft Windows\n\n\n\n\nWindows3\n\n\n严重\n\n\n远程代码运行\n\n\n可能需要重启\n\n\nMicrosoft Windows\n\n\n\n\nIE\n\n\n严重\n\n\n远程代码运行\n\n\n需要重启\n\n\nMicrosoft Windows, Internet Explorer\n\n\n\n\nExcel\n\n\n严重\n\n\n远程代码运行\n\n\n可能需要重启\n\n\nMicrosoft Office\n\n\n\n\nWindows4\n\n\n重要\n\n\n获取更高权限\n\n\n需要重启\n\n\nMicrosoft Windows\n\n\n\n\nISA\n\n\n重要\n\n\n拒绝式服务\n\n\n需要重启\n\n\nMicrosoft Forefront Edge Security\n\n\n\n\nWindows5\n\n\n中级\n\n\n获取更高权限\n\n\n需要重启\n\n\nMicrosoft Windows\n\n\n\n\n相关信息可以参看这里：\nhttp://www.microsoft.com/technet/security/bulletin/ms09-apr.mspx\n (8 人打了分，平均分： 2.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "一个排序算法比较的网站",
    "url": "https://coolshell.cn/articles/399.html",
    "date": "2009-04-10T09:58:28+08:00",
    "description": "\n下面这个网站是一个非常丰富的排序算法的网站。\nSorting Algorithm Animations\nhttp://www.sorting-algorithms.com/\n这是一个非常不错的排序算法的网站，当你打开这个网站的时候，请不要因为看到很多个图片的大红叉而鄙视它。你先点击网页上方的Problem Size，选择一个尺寸，20，30，40还是50，都行，于是你就可以看到下面整个大表中有图片显示出来了。如下所示：\n\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 4.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "十大史上最恶心的操作系统",
    "url": "https://coolshell.cn/articles/394.html",
    "date": "2009-04-10T00:57:56+08:00",
    "description": "\nComputer World上有人评出了有史以来十大臭名照著的操作系统，我们来看看倒底有那些，顺便也回顾一下操作系统的历史。下面的顺序通过时间顺序由古至今。\nOS/360, 1964\n这里，说的不是后面新版的OS/360，这里说的是60年代未70年代初的第一版的OS/360。当时的Project Manager，Fred Brooks， 《人月神话》 The Mythical Man-Month的作者，这是一本非常经典的告诉你软件开发是如何失败的一本书。在书中，Brooks解释说，他们需要了比较计划更多的内存，最后导致了预算超标了好几次，当然，最终这个操作系统还是很慢。另一方面，这本书中也出现了一句网络上的流行语：”Adding manpower to a late software project makes it later.” （在项目的后期加入人手只会让项目更拖）Brooks 喜欢像一本软件开发者的圣经一样描述，因为”everybody reads it, but nobody does anything about it.” 在书中他展开描述了这个故事后，我们才知道他是对的。\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 2.88 )Loading...\n"
  },
  {
    "content": "",
    "title": "笔记本电脑的发展史",
    "url": "https://coolshell.cn/articles/378.html",
    "date": "2009-04-08T23:02:59+08:00",
    "description": "\n这是一段比较有趣的历史，让我们回顾一下笔记本电脑的整个历史吧。可能叫便携式电脑比较好一点。\n1970 – 1981 第一个便携式的电脑概念\n上世纪70年代，Alan Kay 在 Xerox PARC开始有了便携式个人电脑的想法。到了1981年， Osborne 1问世，其由Adam Osborne创造。如下图。Osborne 1 有一个5英寸的屏幕，还有一个可选的电池，两个5 ¼” 软驱，一个 modem 接口，还有一个键盘。当时的价格是$1,800（包括一块电池）。\n\n  …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "RFC1 40岁生日",
    "url": "https://coolshell.cn/articles/373.html",
    "date": "2009-04-08T21:44:01+08:00",
    "description": "\n昨天（2009年4月7日）是RFC 1的40岁生日。注意，这不是KFC，而是RFC。;-)\n1969年的今天，我们有一第一个RFC（http://www.faqs.org/rfcs/rfc1.html）。这成为了以后整个Internet的基础。\n所谓RFC，全称为Request For Comments ，是一系列以编号排定的文件。文件收集了有关互联网相关资讯，以及UNIX和互联网社群的软件文件。目前RFC文件是由Internet Society（ISOC）所赞助发行。\nRFC包含了关于Internet的几乎所有重要的文字资料。如果你想成为网络方面的专家，那么RFC无疑是最重要也是最经常需要用到的资料之一，所以RFC享有网络知识圣经之美誉。通常，当某家机构或团体开发出了一套标准或提出对某种标准的设想，想要征询外界的意见时，就会在Internet上发放一份RFC，对这一问题感兴趣的人可以阅读该RFC并提出自己的意见；绝大部分网络标准的制定都是以RFC的形式开始，经过大量的论证和修改过程，由主要的标准化组织所制定的，但在RFC中所收录的文件并不都是正在使用或为大家所公认的，也有很大一部分只在某个局部领域被使用或并没有被采用，一份RFC具体处于什么状态都在文件中作了明确的标识。\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 2.60 )Loading...\n"
  },
  {
    "content": "",
    "title": "35个强大的UI设计教程",
    "url": "https://coolshell.cn/articles/363.html",
    "date": "2009-04-07T17:02:42+08:00",
    "description": "\n下面是35个非常不错的UI设计的的教程及效果图，非常不错哦。不但教你如何做一些特效，同样教你如何做UI布局和界面设计。当然，他们风格迥异，也基本上都是Web页面上的。都非常不错。希望你喜欢。（点击下面的图片可以打开相关的教程）\nOld Paper Layout\n\n …\n 阅读全文 Read More\n\n (19 人打了分，平均分： 3.89 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux C 编程一站式学习",
    "url": "https://coolshell.cn/articles/360.html",
    "date": "2009-04-07T13:47:49+08:00",
    "description": "\n个人认为这是一个挺不错的从C语言到Linux系统开发的教程，这本是两个网上的文档。\n\n其中 一本是《How To Think Like A Computer Scientist: Learning with C++ 》作者Allen B. Downey。原书由Green Tea Press发行，可以从http://www.greenteapress.com/下载到。\n另一本是：《Programming from the Ground Up: An Introduction to Programming using Linux Assembly Language》作者Jonathan Bartlett。原书由Bartlett Publishing发行，可以从http://savannah.nongnu.org/projects/pgubook/下载到。\n\n不过非常高兴的是有要把这两个文档都翻译成了中文。当然，翻译工作还没有完全完成，第三部分还很粗糙，错误也有不少，有待改进。第一部分和第二部分已经比较成熟，第二部分还差三章没写。不过现在可以阅读了。\n下面是这个文档的网站链接：\nhttp://learn.akae.cn/media/index.html\n (11 人打了分，平均分： 3.45 )Loading...\n"
  },
  {
    "content": "",
    "title": "20本最好的Linux免费书籍",
    "url": "https://coolshell.cn/articles/355.html",
    "date": "2009-04-06T20:22:35+08:00",
    "description": "\n前些天Neo推荐了一个网站有《超过100本的linux免费书籍》，这里，我也向大家推荐20本最好的Linux免费书籍，当然，也是英文版的。\n1. Ubuntu Pocket Guide and Reference\n一本介绍关于Ubuntu 8.04和8.10的使用书。\n\n\n\n\nWebsite\nwww.ubuntupocketguide.com\n\n\nAuthor\nKeir Thomas\n\n\nFormat\nPDF\n\n\nPages\n152\n\n\n\n …\n 阅读全文 Read More\n\n (24 人打了分，平均分： 3.92 )Loading...\n"
  },
  {
    "content": "",
    "title": "程序员的八个级别",
    "url": "https://coolshell.cn/articles/343.html",
    "date": "2009-04-06T18:23:11+08:00",
    "description": "\n在面试时，你可能会被经常问到“在未来5年，你想干什么？”，这可能是一个比较难回答的问题。在中国，答案一般可能会是Team leader，Manager，或是Architect，Specialist等，在中国，大家可能更多地觉得manager会是程序员的下一个目标，可是在国外，经理和程序员可能是两个不同的分支，Architect或Specialist 比经理来说更牛、代遇可能也更好，因为这些人的智商需要的更高。\n在著名的“Coding Horror”上出现了这样一篇文章，我把其转到这里（我并没有完全一模一样的翻译，我只不过是用自己的话转述罢了），也让大家看看国外人的思考方式（当然，这篇文章只是分析程序员的级别而不是工种）。正如其作者结尾时所说，这八个级别并不是很严格的，其只不过是一种想法，希望能给大家另一种思路。\n …\n 阅读全文 Read More\n\n (25 人打了分，平均分： 4.12 )Loading...\n"
  },
  {
    "content": "",
    "title": "惹恼程序员的十件事",
    "url": "https://coolshell.cn/articles/340.html",
    "date": "2009-04-06T12:04:01+08:00",
    "description": "\n程序员应该是一个比较特殊的群体，他们因为长期和电脑打交道所养成的性格和脾气也是比较相近的。当然，既然是人，当然是会有性格的，也是会有脾气的。下面，让我来看看十件能把程序惹毛了的事情。一方面我们可以看看程序员的共性，另一方面我们也可以看看程序员的缺点。无论怎么样，我都希望他们对你的日常工作都是一种帮助。\n第十位 程序注释\n程序注释本来是一些比较好的习惯，当程序员老手带新手的时候，总是会告诉新手，一定要写程序注释。于是，新手们当然会听从老手的吩咐。只不过，他们可能对程序注释有些误解，于是，我们经常在程序中看到一些如下的注释：\nr = n/2;  //r是n的一半\n//循环，仅当r- n/r不大于t\nwhile ((r-n/r) <=t){\n        … …\n        r = 0.5 * (r-n/r); // 设置r变量\n}\n每当看到这样的注释——只注释是什么，而不注释为什么，相信你一定会被惹火，这是谁写的程序注释啊？不找来骂一顿看来是不会解气了。程序注释应该是告诉别人你的意图和想法，而不是告诉别人程序的语法，这是为了程序的易读性和可维护性，这样的为了注释而注释的注释，分明不是在注释，而是在挑衅，惹毛别人当然毋庸置疑。\n …\n 阅读全文 Read More\n\n (49 人打了分，平均分： 4.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "超过100本的linux免费书籍",
    "url": "https://coolshell.cn/articles/336.html",
    "date": "2009-04-02T10:49:19+08:00",
    "description": "\n在上有100多本关于Linux的免费书籍，书籍涉及到多Linux编程的领域\n包括\n\nWEB开发书籍\n桌面GUI开发\n数据库方面的书籍\nLinux安全方面\n\n等等，还有其他众多脚本语言的开发书籍。\n更多内容请查看：这里\n (6 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "2009年脚本语言排名",
    "url": "https://coolshell.cn/articles/325.html",
    "date": "2009-04-01T17:25:03+08:00",
    "description": "\nEDC（Evan Data Corporation）发布了一份脚本语言的调查报告，这个调查报告调查了500个以上的开发者和IT专家，在这份调查表中，PHP, Ruby和Python成为了前三强。这个调查总共调查了这些脚本语言：Actionscript, Flex, Javascript, Microsoft F#, Microsoft Powershell, Perl, PHP, Python, Ruby, VB Script。主要评估以下这些方面：\n易用性。Ease of Use \n异常处理。Exception handling\n扩展性。Extensibility\n可维护性和易读性。Maintainability / Readability\n跨平台。Cross-platform portability\n社区。Community\n实用性。Availability of tools\n质量。Quality of tools\n性能。Performance\n内存管理。Memory management\n客户端脚本。Client side scripting\n安全性。Security\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux的“宕机”图片",
    "url": "https://coolshell.cn/articles/313.html",
    "date": "2009-04-01T14:00:39+08:00",
    "description": "\n下面是几个Linux的“宕机”的图片，原文在：http://www.miguelcarrasco.net/miguelcarrasco/2006/10/linux_crash_top.html\n这里，我并不想以讹传讹，因为有一些并不是真正的Crash，可能只是重启，而另一些图片根本看不清楚是否是Linux，不过，如果不是在重启，的确不应该出现这些操作系统的信息。不算怎么样，我们就姑且相信这些图片都是Linux的不是吧。Linux也会Crash这点毋庸置疑，不过，在看到这些画面的同时，同样也能让人看到Linux的应用之广泛。\n下面这是一个运行着Linux的PC，看上去他死的很古怪，好像是中了病毒。\n \n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "十个最好的PDF生成库",
    "url": "https://coolshell.cn/articles/309.html",
    "date": "2009-04-01T00:00:23+08:00",
    "description": "\n1）FPDF\nhttp://www.fpdf.org/。这是一个纯PHP的库，它没有使用PDFlib。完全免费。没有任何license的限制。\n\n 2）iText\nhttp://www.lowagie.com/iText/。 这是一个基于Java的库。iText#则是一个基于.NET的库。使用MPL/LGPL的license。\n \n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "OSGi和Java企业级运算的未来方向",
    "url": "https://coolshell.cn/articles/294.html",
    "date": "2009-03-29T15:50:47+08:00",
    "description": "\n摘要： OSGi也是译者最近才接触到的技术，但是在OSGi的发展中，它越来越收到了来自行业的关注。作为OSGi的动态部署，译者认为此项规范对于企业应用应该是非常有帮助的。特别在银行的信息化建设中将会起到很重要的作用，因为国内大多的银行业都在强调7*24小时系统，但是其业务发展又非常迅速，常常有新需求，新变更。如果每一次上线变更都将重启系统的话，对银行的服务质量和形象将会造成较大的影响。 此文只是讲述了OSGi在Java企业运算中的新动向，并没有具体的介绍OSGi的规范。关于OSGi规范的文档可以从jcp上下载\n原文出处：这里\n\nOSGi和Java企业级运算的未来方向\nby Eric Newcomer\n无论JCP是否完全的迷失了它的方向，它都不同程度受到来自外部活动的影响。Spring框架和Hibernate影响了EJB3，而且JPA也是一个好的例子。另外日渐感觉到的影响来自于对OSGi规范的采用和其实现，特别是实现了OSGi的开源的Eclipse Equinox，Apache Felix和Knoplerfish框架\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 1.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "雷人的程序注释",
    "url": "https://coolshell.cn/articles/290.html",
    "date": "2009-03-27T00:58:43+08:00",
    "description": "\n\n使用Google code search可以搜索到一些比较有趣的代码注释，呵呵。下面的这些程序注释有搞笑的，也有粗口，看来写程序本来也不是一件很枯燥的事，关键看你的心态如何了。读到这些注释的时候，只能想到一个词，那就是“疯狂的程序员”，哈哈。Have a Fun  ;-)\n写个程序时不忘表达自己的感情，以免以后忘了。\n\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "深入浅出单实例Singleton设计模式",
    "url": "https://coolshell.cn/articles/265.html",
    "date": "2009-03-26T16:04:43+08:00",
    "description": "\n单实例Singleton设计模式可能是被讨论和使用的最广泛的一个设计模式了，这可能也是面试中问得最多的一个设计模式了。这个设计模式主要目的是想在整个系统中只能出现一个类的实例。这样做当然是有必然的，比如你的软件的全局配置信息，或者是一个Factory，或是一个主控类，等等。你希望这个类在整个系统中只能出现一个实例。当然，作为一个技术负责人的你，你当然有权利通过使用非技术的手段来达到你的目的。比如：你在团队内部明文规定，“XX类只能有一个全局实例，如果某人使用两次以上，那么该人将被处于2000元的罚款！”（呵呵），你当然有权这么做。但是如果你的设计的是东西是一个类库，或是一个需要提供给用户使用的API，恐怕你的这项规定将会失效。因为，你无权要求别人会那么做。所以，这就是为什么，我们希望通过使用技术的手段来达成这样一个目的的原因。\n本文会带着你深入整个Singleton的世界，当然，我会放弃使用C++语言而改用Java语言，因为使用Java这个语言可能更容易让我说明一些事情。\n …\n 阅读全文 Read More\n\n (14 人打了分，平均分： 4.21 )Loading...\n"
  },
  {
    "content": "",
    "title": "基于JVM的语言正在开始流行",
    "url": "https://coolshell.cn/articles/247.html",
    "date": "2009-03-26T10:41:59+08:00",
    "description": "\n总结：\n这是 Reuven Lerner在去年写的一篇博文，文章主要介绍了一些新兴的基于JVM的脚本语言。结合本文可以对Bruce的博文《C++和JAVA传统中积极的一面》有一个很好的理解。译者认为：语言始终都是一门工具，软件设计最重要的东西是来自于设计者的创造性，但是随着Java语言的出现，他的半动态的特性，ClassLoader，反射，动态代理，都是提高开发者创造性的前提，正是因为这些特性，才会出现新的的编程模式和范式——反转控制和依赖注入，面向方面的编程(AOP)。试想如果Java不提供ClassLoader，反射，动态代理机制的API，如何能实现依赖查找和依赖注入和动态AOP? 你能用C++来反转控制，依赖查找吗，能对容器中的组件做进行生命周期管理吗？为了说明程序员创造性和语言的这个关系，我引用Dion Hinchcliffe博文中的一张图来说明：\n \n原文：http://ostatic.com/blog/jvm-based-languages-grow-in-popularity\n基于JVM的语言正在开始流行\n当Sun Microsystems公司在1995年第一次揭开Java的面纱的时候，就是非常难被定义的。这是因为JAVA是由多个部分构成：首先，它当然是一个面向对象语言。同时JAVA也是一个定义标准的语言(或多个标准，包括移动设备，标准，和企业三个版本)。最后，Java是一个虚拟机(“JVM”)，一个Java程序能够执行的软件环境。如果你有一个JVM，虽然这个JVM只能用来运行Java的程序——但是，JVM能在运行在你能想到的每一个平台之上，这使得Java成为一个具有高移植性的语言。\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "全球IP地址数据库",
    "url": "https://coolshell.cn/articles/244.html",
    "date": "2009-03-25T17:59:52+08:00",
    "description": "\n下面是一个免费的全球IP地址数据库，包括了国家，城市，地区，和经纬度，以便你可以利用Google Map在地图上标注。这个数据库的精确度可能有60%左右。\nSQL format\n更新至 2009年3月11日\nCSV format (多文件)\n更新至 2009年3月11日\n下面是怎么使用这个数据库。\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.67 )Loading...\n"
  },
  {
    "content": "",
    "title": "非常不错的编程技术教程",
    "url": "https://coolshell.cn/articles/240.html",
    "date": "2009-03-25T13:52:48+08:00",
    "description": "\n下面是一些非常不错的编程教程，当然，全是英文版的。不过因为是新手教程，所以非常容易阅读，可以在学习技术的同时加强一下自己的英语阅读能力。\n如果你是一个新手，建议你把本页设为你的收藏夹。\nC \nIntroduction to C Programming \nC Optimization Tutorial \nCompiling C and C++ Programs on UNIX Systems – gcc/g++ \nBuilding and Using Static and Shared C Libraries \nProgramming in C: UNIX System Calls and Subroutines Using C \nC FAQ \nC Programming Class Notes \nANSI C for Programmers on UNIX Systems \nSams Teach Yourself C in 24 Hours \nSams Teach Yourself C in 21 Days (4th Ed.) \nThe Standard C Library for Linux – Part 1: file functions \nThe Standard C Library for Linux – Part 2: character input/output \nThe Standard C Library for Linux – Part 3: formatted input/output \nThe Standard C Library for Linux – Part 4: Character Handling \nThe Standard C Library for Linux – Part 5: Miscellaneous Functions \nProgramming in C: A Tutorial \nAn Introduction to C Development on Linux \nC Programming Course \nC Language Tutorial \nCScene: An Online Magazine for C and C++ Programming \n…\n 阅读全文 Read More\n\n (12 人打了分，平均分： 4.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++和JAVA传统中积极的一面",
    "url": "https://coolshell.cn/articles/209.html",
    "date": "2009-03-22T21:29:39+08:00",
    "description": "\n译者注：\n本文翻译自Bruce Eckel（《Thinking in C++》& 《Thinking in Java》作者）的博文，该博文于2009年03月14日发表于：\nhttp://www.artima.com/weblogs/viewpost.jsp?thread=252441\n本文的发表引起了互联网上热烈的讨论，关于讨论大家可以到这里围观。\n下面是原文。原名《The Positive Legacy of C++ and Java》\n摘要：\n在最近的讨论中，有些人断定C++并不是一个设计完美的语言。在我在C++标准委员那8年里，我目睹所有关于C++的决议的诞生。我希望本文有助于帮读者理解C++和JAVA的设计选择，从而可以让大家更全面的来看待他们。\n…\n 阅读全文 Read More\n\n (14 人打了分，平均分： 3.71 )Loading...\n"
  },
  {
    "content": "",
    "title": "优秀程序员的十个习惯",
    "url": "https://coolshell.cn/articles/222.html",
    "date": "2009-03-22T11:34:08+08:00",
    "description": "\n在这个世界上，有数百万的人热衷于软件开发，他们有很多名字，如：软件工程师（Software Engineer），程序员（Programmer），编码人（Coder），开发人员（Developer）。经过一段时间后，这些人也许能够成为一个优秀的编码人员，他们会非常熟悉如何用计算机语言来完成自己的工作。但是，如果你要成为一个优秀的程序员，你还可以需要有几件事你需要注意，如果你能让下面十个条目成为你的习惯，那么你才能真正算得上是优秀程序员。\n1. 学无止境。就算是你有了10年以上的程序员经历，你也得要使劲地学习，因为你在计算机这个充满一创造力的领域，每天都会有很多很多的新事物出现。你需要跟上时代的步伐。你需要去了解新的程序语言，以及了解正在发展中的程序语言，以及一些编程框架。还需要去阅读一些业内的新闻，并到一些热门的社区去参与在线的讨论，这样你才能明白和了解整个软件开发的趋势。在国内，一些著名的社区例如：CSDN，ITPUB，CHINAUINX等等，在国外，建议你经常上一上digg.com去看看各种BLOG的聚合。\n …\n 阅读全文 Read More\n\n (52 人打了分，平均分： 4.83 )Loading...\n"
  },
  {
    "content": "",
    "title": "一位离开Google的设计师离职感言的读后感",
    "url": "https://coolshell.cn/articles/208.html",
    "date": "2009-03-21T21:47:05+08:00",
    "description": "\nDouglas Bowman, 一位Google的设计师，3月20日离开了Google。他在自己的博客上留了一篇感言\n很多人感兴趣Google是否是技术人员的天堂，也感兴趣Google有多少数据，更多人想撬开Google的创新引擎看看这个日渐庞大的企业如何能够保持特立独行的作风。本文不是关于这些，而是一个设计师的对Google的理解。\n摘要：\n当一个公司里没有一个透彻理解“设计的原则和元素”的领军人物时，很快这个公司就会在作出设计决定上感到枯竭。（原文：Without a person at (or near) the helm who thoroughly understands the principles and elements of Design, a company eventually runs out of reasons for design decisions.）\n我感激Google工作的机会，学习很多，很好的食物…但我不会想念那被数据随意斩杀的设计理念。（原文：I’m thankful for the opportunity I had to work at Google. I learned more than I thought I would. I’ll miss the free food. I’ll miss the occasional massage. I’ll miss the authors, politicians, and celebrities that come to speak or perform. I’ll miss early chances to play with cool toys before they’re released to the public. Most of all, I’ll miss working with the incredibly smart and talented people I got to know there. But I won’t miss a design philosophy that lives or dies strictly by the sword of data.）\n …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "IBM收购Sun，这是一种什么样的精神？",
    "url": "https://coolshell.cn/articles/203.html",
    "date": "2009-03-19T00:10:42+08:00",
    "description": "\n《华尔街日报》3月18日报导有消息说IBM要以65亿美金收购Sun（原文），虽然消息未经证实，但已引起轩然大波。据Business Joural报道，周二，Sun的股票一下子涨了68%，从之前$4.97一下涨到了$8.36，但IBM的股价下跌4%到了$89.46。\n而网上的博主们都在狂写评论文章了。有持支持态度的，这篇博文表明IBM和Sun都是喜欢开源（Linux 和OpenSolaris）以及跨平台的（Linux和Java）的，所以他们的合并可能更好的对抗微软和intel的x86平台，应该太有作为。还有这篇博文则对比了HP收购Compaq(DEC)的案例，说明这样的合并可能更为容易和HP对抗。\n当然，也有不认可以文章，比如ZNet上的这篇文章，作者觉得这根本就不可能，因为IBM和Sun有太多的重合了，很多方面都有存在很强的竞争，IBM要买来一点用都没有，要芯片技术吗？要操作系统吗？要数据库吗？要Java吗？更不可能。文中说，如果IBM想把Sun干掉，那么用65亿美金就太贵了，在这个寒冬，应该不用这种价格，除非这则新闻另有别的用意……\n不过，最有意思的评论是这篇，简直是太精彩了，我忍不住想把之翻译在这里：\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 2.13 )Loading...\n"
  },
  {
    "content": "",
    "title": "20 你应该知道的PHP库",
    "url": "https://coolshell.cn/articles/200.html",
    "date": "2009-03-18T21:01:08+08:00",
    "description": "\n下面是一些非常有用的PHP类库，相信一定可以为你的WEB开发提供更好和更为快速的方法。\n图表库\n下面的类库可以让你很简的创建复杂的图表和图片。当然，它们需要GD库的支持。\n\n\npChart – 一个可以创建统计图的库。\nLibchart – 这也是一个简单的统计图库。\nJpGraph – 一个面向对象的图片创建类。\nOpen Flash Chart – 这是一个基于Flash的统计图。\n\n\n  …\n 阅读全文 Read More\n\n (9 人打了分，平均分： 3.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux 相关的资源站makelinux.net",
    "url": "https://coolshell.cn/articles/194.html",
    "date": "2009-03-16T22:51:47+08:00",
    "description": "\n关于Linux相关的资源大家可以到http://www.makelinux.net/访问相关的文章，很不错的一个和linux内核相关的资源网站，当然，你可能因为种种原因不能访问这个网上的一些资源，那么你可能需要使用代理服务器或是一个叫Tor的软件，关于后者，请参看这篇文章《如何上网觅无踪》\n下面是makelinux上的资源列表，都非常不错。\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux的15岁生日",
    "url": "https://coolshell.cn/articles/189.html",
    "date": "2009-03-15T11:47:51+08:00",
    "description": "\n今年是Linux的15生日，15年前，1994年3月， Linux kernel 版本1.0.0  released。这几天，全世界很多站点都在发布Blog庆祝Linux的15岁生日，而这篇文章是其中的一篇关于 Linux kernel 的，如果你是Linux的粉丝，希望你能喜欢。\n1. Linux是由一个芬兰的仅有21岁的大学生因为兴趣而产生的。\n2. 为表扬他的突出贡献，有一颗小行星以他的名字命名。http://en.wikipedia.org/wiki/9793_Torvalds。\n3. 有上千个开发人员和程序员从世界的各个角落汇聚在一起，他们不停地开发Linux Kernel。\n4. Linux kernel的官方吉祥物是一只小企鹅，叫做Tux.\n5. 欧盟研究基金调查表明，Linux最新内核的评估价格在1.14亿美金。\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "OMG, Jave的JMenu居然有433个方法",
    "url": "https://coolshell.cn/articles/182.html",
    "date": "2009-03-14T20:49:04+08:00",
    "description": "\nJava的Swing类库中有一个类叫JMenu，这个类上面有7层的继承，加上所有被继承下来的方法，这个类一共有433个方法，虽然，很多类是从上面继承下来的，而它自己的方法并没有定义太多的方法，不过，继承体系过深，在底层类上要想知道所有的继承下来的东西并不是一样容易的事情。这个例子展示了一个滥用代码重用的反面案例。我个人认为我们应该反思一下滥用面向对象的作法。\n要把Java一个类所有的方法例出来并不是一件难事，使用Javascript 利用Firefox浏览器所支持的Package来穷举JMenu的方法可以很方便的列出所有的方法。\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 3.20 )Loading...\n"
  },
  {
    "content": "",
    "title": "OMG, Windows 7 来自未来",
    "url": "https://coolshell.cn/articles/179.html",
    "date": "2009-03-14T20:34:33+08:00",
    "description": "\n今天，2009年3月14日，某个工程师准备把自己的Windows 7 build7000升级到build 7057，在安装过程中，我们的工程师选择了备份老的系统，于是老的build被备份成到了windows.old目录下，然后当整个系统运行时，这位朋友发现了这一版本的Windows 7好像使用了很多来自外星的技术，很明显他扭曲了时间，下面是他的发现和截屏。\n点击图片可以大图\n\n (8 人打了分，平均分： 2.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "幽默：程序员的进化",
    "url": "https://coolshell.cn/articles/172.html",
    "date": "2009-03-14T17:26:27+08:00",
    "description": "\n高中时期\n\n  10 PRINT \"HELLO WORLD\"\n  20 END\n\n大学新生\n\n  program Hello(input, output)\n    begin\n      writeln(\\'Hello World\\')\n    end.\n\n …\n 阅读全文 Read More\n\n (21 人打了分，平均分： 4.43 )Loading...\n"
  },
  {
    "content": "",
    "title": "Hello World 集中营",
    "url": "https://coolshell.cn/articles/169.html",
    "date": "2009-03-14T17:06:54+08:00",
    "description": "\n编程的人应该都知道什么是Hello World。这是一个最简单的程序，其只在屏幕上输出“Hello World”字样，这通常是初学者的在学习编程时的第一个示例。把打印出 “Hello World” 作为第一个范例程序，现在已经成为编程语言学习的传统。\n\n“Hello World”起源于Brian Kernighan 和Dennis MacAlistair Ritchie写的计算机程序设计教程《C语言程序设计》（The C Programming Language）而广泛流传；但这本书并不是 “hello, world” 的滥觞，虽然这是一个普遍存在的错误认知。\n这范例程序最早出现于 1972 年，由贝尔实验室成员 Brian Kernighan 撰写的内部技术文件《Introduction to the Language B》之中。不久同作者于 1974 年所撰写的《Programming in C: A Tutorial》，也延用这个范例；而以本文件扩编改写的《C语言程序设计》也保留了这个範例程式。\n“hello, world” 程序的标准打印内容必须满足“全小写，无惊叹号，逗点后需空一格”，不过流传至今，完全恪守传统的反而罕见。\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.13 )Loading...\n"
  },
  {
    "content": "",
    "title": "10个基于Ajax的PHP Webmail客户端",
    "url": "https://coolshell.cn/articles/154.html",
    "date": "2009-03-13T17:16:30+08:00",
    "description": "\n 下面是十个非常不错的，使用Ajax技术的用PHP开发Webmail的客户端。大家在使用的时候请注意其license。\n1. RoundCube\nRoundCube Webmail 是一个基于浏览器的IMAP 客户端，其提供了丰富的功能，包含MIME，地址本，文件夹操作，邮件搜索和拼写检查。 RoundCube Webmail 由 PHP写成，需要 MySQL 或 Postgres 数据库的支持。其UI完全遵守于XHTML 和 CSS 2.\n\n\n …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "Vim命令速查卡",
    "url": "https://coolshell.cn/articles/150.html",
    "date": "2009-03-13T16:45:26+08:00",
    "description": "\nVim是unix/linux下的文本编辑器，很牛，但也不好用，这是一个根本不需要小键盘和鼠标的编译器，是专业人士的编辑器。这里有一个命令速查卡。PDF文件可以在这里下载：PDF \n\n (14 人打了分，平均分： 3.93 )Loading...\n"
  },
  {
    "content": "",
    "title": "操作系统图形界面发展史(1981-2009)",
    "url": "https://coolshell.cn/articles/105.html",
    "date": "2009-03-12T17:23:40+08:00",
    "description": "\n \n注意，本文这罗列了从1981年以来有重大意义的操作系统的图形界面。\n首先，先介绍两个网站：\n\nhttp://www.guidebookgallery.org/ 如果你比较关注图形化UI的设计， 可以上这个网站上看看。\nhttp://toastytech.com/guis/index.html 这是一个操作系统图形界面收集的网站，上面几科包括了所有的操作系统图形界面。\n\n \n …\n 阅读全文 Read More\n\n (15 人打了分，平均分： 3.87 )Loading...\n"
  },
  {
    "content": "",
    "title": "版本控制Subversion相关资源",
    "url": "https://coolshell.cn/articles/93.html",
    "date": "2009-03-11T22:16:26+08:00",
    "description": "\n入门教程\n\nSubversion Cheat Sheet（PDF version）\nThe Subversion Book\nSubversion Official Documentation\nSVN 1-Click Setup\n\nSubversion客户端\n\nTortoise SVN (Windows only)\n\n\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "十个开源的Javascript框架",
    "url": "https://coolshell.cn/articles/91.html",
    "date": "2009-03-11T21:48:27+08:00",
    "description": "\n下面是十个最牛的也是最流行的Javascript框架。它们完全可以担任目前世界上几乎所有一些和Ajax技术相关的和图形界面相关的一切功能。\n\njQuery\n\nhttp://jquery.com/\n\n如果今天你还不知道jQuery的话，那么作为一个程序员你可能真的是从火星来的了。这恐怕是Ajax中应用最广的框架。包括了许多很不错的UI组件，做出网页的效果也是令人称道的。不过，他最牛的是它的文件大小，只有区区18K，实在是居家旅行，网站开发之首选。\n 下面是一个日历控件，很不错吧。\n \n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 2.69 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux Distribution Timeline",
    "url": "https://coolshell.cn/articles/85.html",
    "date": "2009-03-10T21:20:22+08:00",
    "description": "\n下面这个网站记录了整个Linux所有发行版的时间线，很有意思\nhttp://futurist.se/gldt/\n最新的更新时间是2009-2-12，下面是下载链接：\n811 kb png / 72 kb tar.bz2\n\n (6 人打了分，平均分： 2.17 )Loading...\n"
  },
  {
    "content": "",
    "title": "怎样做一个 Program Manager",
    "url": "https://coolshell.cn/articles/76.html",
    "date": "2009-03-10T15:50:31+08:00",
    "description": "\n我个人认为，这是一篇不错的文章，虽然我不是Program Mananger，但是我几乎在做着和这个职位很相似的工作。在这里，我把这篇文章推荐给所有的程序员，我相信，这篇文章会让你明白，只有技术是远远不够的，因为没有Program Manager这个角色，程序员们只不过一些手中拿着利器却不知所措的散兵游勇。我希望我的导读和原文能给所有的程序带来启示。\n原文在这里：\n“How to be a program manager”\nhttp://www.joelonsoftware.com/items/2009/03/09.html\n这篇文章的作者叫Joel Spolsky，在Microsoft做过Program Manager，这篇文章非常值得一读。下面是我给大家做的一个导读：\n首先，他讲了两个人，一个是负责WYSIWYG 字处理的天才级的Program Manager——Charles Simonyi，第二个是上世纪80年代的负责Mac OS上的Excel项目的程序员Jabe Blumenthal，他发现了程序员和市场人员的代沟，Marketing的人很难通过把MBA-Speaking翻译成实际的Feature，并且，有太多的和编码不相关的工作，比如说，和用户交谈，运行usability测试，Reivew竞争者的产品，并且得冥思苦想怎么能让事情变得更简单，而我们的程序员通常来说即不具备这样的时间，也不具备这样的能力。于是，Jabe开始了他的Program Manager的生涯。\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 2.33 )Loading...\n"
  },
  {
    "content": "",
    "title": "几个你可能从来没有用过的HTML标识",
    "url": "https://coolshell.cn/articles/67.html",
    "date": "2009-03-09T20:54:14+08:00",
    "description": "\n下面有三个HTML的标识，你可能从来没有用过。\n第一个：<abbr> 或 <acronym>\n这两个标识是一回事，主要是用于一些英语的缩写，当你把鼠标移上去的时候，你会发现会出现一个小提示来提示缩写的全称。下面是一个示例：\n\nHTML \nIEEE\nRTFSC\n\n\nHTML \n IEEE \nRTFSC\n\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.27 )Loading...\n"
  },
  {
    "content": "",
    "title": "Linux 命令速查",
    "url": "https://coolshell.cn/articles/64.html",
    "date": "2009-03-08T20:57:41+08:00",
    "description": "\n下面两个网站可以方便地检索Linux下的命令及一些用法。我比较喜欢第一个，不仅仅是因为它支持中文，而且他还给所有的命令做了一个分类。而第二个类似于一个速查手册，有些像man手册。\n有些时候，如果知道了命令，用linux下的man手册会显得更加方便，但在Linux下，太多的命令不是我们不会用，而是我们不知道。所以，类别检索就会显得很关键了，这正是我向大家推荐第一个网站的原因。\n\nhttp://www.linuxcmd.org/cn/\nhttp://oreilly.com/linux/command-directory/\n\n (7 人打了分，平均分： 2.57 )Loading...\n"
  },
  {
    "content": "",
    "title": "80个优秀的AJAX方案",
    "url": "https://coolshell.cn/articles/57.html",
    "date": "2009-03-07T09:20:20+08:00",
    "description": "\nAjax作为一种WEB上的技术，已经广被开发人员接受，在过去的两三年内，互联网上涌现出了很多很多的很有创意的Ajax的解决方案，令人赞叹。这里，介绍了80以上的AJAX用法以及其脚本资源，希望对你的开发有帮助。\nAuto Complete Scripts\n1. AJAX AutoSuggest\n\n …\n 阅读全文 Read More\n\n (10 人打了分，平均分： 2.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "【引文】如何用Python往Google Spreadsheet上写数据",
    "url": "https://coolshell.cn/articles/37.html",
    "date": "2009-03-02T16:03:03+08:00",
    "description": "\n现代企业里，数据决定着方向，人们都想随时看到各种报表。很多项目可能都需要dashboard一类的工作，把分散的数据变成一些能随时查看实时数据的图表，这个工作有两个环节：\n\n把数据汇集起来，放入CSV或者数据库\n一个服务器端的程序能够读到这写数据，根据需要生成在线的图表 （离线的也可以，那样每次人们想看这些图的时候都会来麻烦你，如果你在度假，他们会想敲开你的电脑）\n\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 1.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "资源推荐: Google Code University",
    "url": "https://coolshell.cn/articles/35.html",
    "date": "2009-03-02T15:27:29+08:00",
    "description": "\n如果你的专业课里有过不少计算机科学之类的内容，你可能还记得很多中文课本不太好读，其原因一方面有可能因为是课本里的语言（符号）粗制滥造，另一方面有可能是因为你的思维方式不适应课本里的内容。\n我推荐所有能看懂英文的读者多去搜索一下英文世界里的教材，从而能够摆脱劣质教材或语言因素所带来的束缚。为什么推荐英文教材呢？大家可以参考一下英文教材编写者(计算机科学界大儒，图灵奖得住) Dijkstra对于自己写作上的要求：\nAt a given moment, the concept of polite mathematics emerged, the underlying idea of which is that, even if you have only 60 readers, it pays to spend an hour if by doing so you can save your average reader a minute…\n  …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 3.45 )Loading...\n"
  },
  {
    "content": "",
    "title": "读后感：房间里的大象：Google文化成为主导",
    "url": "https://coolshell.cn/articles/33.html",
    "date": "2009-03-02T15:26:23+08:00",
    "description": "\n一篇有关Google在互联网市场已经造成垄断事实的文章。\n这里有个有意思的英文常用表达： elephant in the (living) room （房间里的一只大象），一般用来表达事情已经大到没办法睁一只眼闭一只眼了…例如：\n\n丈夫开始拿单位里年轻的姑娘的照片当壁纸\n公司虽然已经没有说要裁员，但是已经开始停止供应免费的厕所手纸\n我再举例子可能就有人要扔砖了\n\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 3.25 )Loading...\n"
  },
  {
    "content": "",
    "title": "读后感：真正编程的力量",
    "url": "https://coolshell.cn/articles/29.html",
    "date": "2009-03-02T14:03:15+08:00",
    "description": "\n读到 coding horror (不知道中文翻译是什么，“代码恐慌”？) 中的文章 Real Ultimate Programming Power\n文中讲到了软件开发中的方法论和其的演化，但是最让人觉得有意思的是两个引述：\nThe majority of developers do not suffer from too much design patterns, or too much SOLID, or agile, or waterfall for that matter. They suffer from whipping out cowboy code in a pure chaos environment, using simplistic drag & drop, data driven, vb-like techniques.\n翻译： 让大多数软件开发者痛苦的，不是过多的设计模式，过多的SOLID(见注解), 过多的敏捷开发，或者瀑布模型；让大多数开发者痛苦的是在混乱的环境中用低级方式除去代码仙人留下来的古怪代码（好吧，这是我对cowboy code的曲解）。\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 2.75 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何自己写一个网络爬虫",
    "url": "https://coolshell.cn/articles/27.html",
    "date": "2009-03-02T14:02:03+08:00",
    "description": "\n这里是维基百科对网络爬虫的词条页面。网络爬虫以叫网络蜘蛛，网络机器人，这是一个程序，其会自动的通过网络抓取互联网上的网页，这种技术一般可能用来检查你的站点上所有的链接是否是都是有效的。当然，更为高级的技术是把网页中的相关数据保存下来，可以成为搜索引擎。\n从技相来说，实现抓取网页可能并不是一件很困难的事情，困难的事情是对网页的分析和整理，那是一件需要有轻量智能，需要大量数学计算的程序才能做的事情。下面一个简单的流程：\n …\n 阅读全文 Read More\n\n (18 人打了分，平均分： 3.44 )Loading...\n"
  },
  {
    "content": "",
    "title": "如何上网觅无踪",
    "url": "https://coolshell.cn/articles/25.html",
    "date": "2009-03-02T14:00:43+08:00",
    "description": "\nTor是一个是开源项目，网址http://www.torproject.org（很遗憾，这个网站因为GFW，在中国大陆你无法访问，），TOR这个项目，旨在把这个世界上所有的代理服务器或是使用Tor的这各个客户端串在一起，形成一个虚似的网络。\n这是一个分布式的，通过一种P2P技术构建的网络。这个技术很像是BT或是电驴所使用的技术。不过，Tor 的目标是抵御流量分析，流量分析是一种对网络的监视行为，这种行为会威胁个人的匿名与隐私，商业活动与业务关系的保密和国家的安全，打破网络屏蔽。\n …\n 阅读全文 Read More\n\n (6 人打了分，平均分： 3.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "Fork 系统炸弹",
    "url": "https://coolshell.cn/articles/23.html",
    "date": "2009-03-02T13:59:49+08:00",
    "description": "\n这个炸弹很简单，就是一个命令行，如下所示：\n:(){ :|:& };:\n在此，我严重警告你，请不要在你的Unix/Linux或Cygwin的Shell下执行这个命令。否则，这个命令会不停地fork子进程，直到你的整个系统无法响应。\n再次警告你，请不要执行这个命令，除非你想重启你的系统。\n (11 人打了分，平均分： 3.27 )Loading...\n"
  },
  {
    "content": "",
    "title": "101个设计模式",
    "url": "https://coolshell.cn/articles/21.html",
    "date": "2009-03-02T13:59:03+08:00",
    "description": "\n所以设计模式，实是是一种方法，一种为了解决某种或某类物定问题所使用的设计模型。据说，在编程语言方面有100多种设计模式，而在现实生活中，传说有上成千上万个模式，比如写书有写书的设计模式，写武侠的一种，言情的另一种，连官方的新闻稿件也有。\n …\n 阅读全文 Read More\n\n (20 人打了分，平均分： 3.05 )Loading...\n"
  },
  {
    "content": "",
    "title": "时间1234567890",
    "url": "https://coolshell.cn/articles/19.html",
    "date": "2009-03-02T13:51:06+08:00",
    "description": "\n“At 11:31:30pm UTC on Feb 13, 2009, Unix time will reach 1,234,567,890.\nWhere will you be at this momentous second?” – from Bell Labs \n在下周五或周六的某一时间，计算机的时间戳（TimeStamp）为变成奇妙的1234567890，而这一天就是——格林威治时间：2009年2月13日 11:31:30 。\n \n当然，因为这个时间在地球上某些地方是13日，某些地方是14日，不同的时区可能会不一样。不过，你可以使用Unix/Linux 下的Perl运行一下这个命令你就知道你的当地时间了。\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 2.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "结对编程的利与弊",
    "url": "https://coolshell.cn/articles/16.html",
    "date": "2009-03-02T13:48:59+08:00",
    "description": "\n结对编程(Pair-Programming)可能是近年来最为流行的编程方式。所谓结对编程，也就是两个人写一个程序，其中，一个人叫Driver，另一个人叫Observer，Driver在编程代码，而Observer在旁边实时查看Driver的代码，并帮助Driver编程。并且，Driver和Observer在一起时可以相互讨论，有效地避免了闭门造车，并可以减少后期的code review时间，以及代码的学习成本。\n …\n 阅读全文 Read More\n\n (21 人打了分，平均分： 4.29 )Loading...\n"
  },
  {
    "content": "",
    "title": "Java书籍Top 10",
    "url": "https://coolshell.cn/articles/14.html",
    "date": "2009-03-02T13:43:06+08:00",
    "description": "\n下面是Java Inside上推荐的十本不错的Java书籍。（文章来源）\n\n\n  1）Java Language Specification, Third Edition (by James Gosling) \n本书由Java技术的发明者编写，是Java TM编程语言的权威性技术指南。如果你想知道语言之构造的精确含义，本书是最好的资源。\n中文版链接：《Java编程规范》\n英文版链接：《The Java Language Specification (3rd Edition) 》\n …\n 阅读全文 Read More\n\n (7 人打了分，平均分： 3.14 )Loading...\n"
  },
  {
    "content": "",
    "title": "PHP v5.3的新鲜玩意",
    "url": "https://coolshell.cn/articles/11.html",
    "date": "2009-03-02T13:40:50+08:00",
    "description": "\nPHP v5.3马上就要release了，这里让我们看看他有一些什么样的新特性。\n1）_callStatic() magic 方法\nclass Foo\n{\n    public static function __callStatic( $name, $args )\n    {\n        echo \"Called method $name statically\";\n    } \n\n    public function __call( $name, $args )\n    {\n        echo \"Called method $name\";\n    }\n}\n …\n 阅读全文 Read More\n\n (5 人打了分，平均分： 1.80 )Loading...\n"
  },
  {
    "content": "",
    "title": "你应该知道的20个Ajax技术(11-20)",
    "url": "https://coolshell.cn/articles/9.html",
    "date": "2009-03-02T13:36:00+08:00",
    "description": "\n11) 表单字段帮助信息的自动提示\n增强WEB表单的Usability有很多很多的方法，在网上一搜一大片，然后有些时候，用户会被表单搞得很混乱，而且，不同的用户会对表单有不同的理解，其输入也是千奇百怪。所以，为表单字段增加一下自动帮助信息的提示绝对是非常不错的选择。这点在淘宝网上表现得比较出现。下面是一个非常简单短小的教程。\nhttp://woork.blogspot.com/2008/04/improve-form-usability-with-auto.html\n\n  …\n 阅读全文 Read More\n\n (12 人打了分，平均分： 2.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "你应该知道的20个Ajax技术(01-10)",
    "url": "https://coolshell.cn/articles/7.html",
    "date": "2009-03-02T13:34:46+08:00",
    "description": "\n1) TextboxList自动完成 （源码，演示）\n这个控件主要来自Facebook吧，在网易的邮件里也能看到，还有hotmail等等，在文本框里输入文本不但可以出现相关数据的列表，而且选中后的字符串还会变成一个小图标。这个控件主要用在电子邮件中吧。\n\n …\n 阅读全文 Read More\n\n (11 人打了分，平均分： 2.73 )Loading...\n"
  },
  {
    "content": "",
    "title": "Java EE6 初探",
    "url": "https://coolshell.cn/articles/5.html",
    "date": "2009-03-02T13:33:45+08:00",
    "description": "\n\n在tss上，Reza Rahman发表了一篇关于JAVA EE6《Java EE6 Overview》的文章，在文章里面他谈及一些关于JavaEE6草案的一些修改内容。\n\n想JAVA企业级应用一路走来，从J2ee到Java EE5 在到即将要推出的Java EE6经历了一个由复杂到简单，由繁到简的过程。\nReza Rahman 文章说，Java EE6将会更简单，更轻量级，更易部署，Java EE6将会裁剪到Java EE5中不实用的部分。并且Java EE6将会为不同的用户群提供不同的规范子集。\n回顾上一版本Java EE 5中，主要引入了以下改变：\n1）引入了EJB3.0\n2）引入了JSF作Tier framework.\n3）使用JAX-WS2.0取代了JAX-RPC作新一代的SOAP的Web service API\n4）使用POJO编程，零配置系统和自由的XML减轻了系统的复杂性。\n …\n 阅读全文 Read More\n\n (8 人打了分，平均分： 2.75 )Loading...\n"
  },
  {
    "content": "",
    "title": "50套Web开发图标",
    "url": "https://coolshell.cn/articles/3.html",
    "date": "2009-03-02T13:31:43+08:00",
    "description": "\n下面是号称最好的50套WEB开发的图标。来源：链接\n其它相关的一些文章\n\n30 Amazingly Creative Social Bookmarks Icon Sets ?\n42 Amazing Photoshop and Illustrator Icon Design Tutorials ?\n35 Free Icon Sets for your iPhone – Pimp it Up! ?\nTop 12 Icon Design Video Tutorials ?\nTop 5 Free Icon Editors for the Pro Designer ?\nThe Best Icon Search Engines and Features for Designers ?\n\n …\n 阅读全文 Read More\n\n (16 人打了分，平均分： 3.63 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++ 对象的内存布局",
    "url": "https://coolshell.cn/articles/12176.html",
    "date": "2008-10-15T09:32:16+08:00",
    "description": "\n07年12月，我写了一篇《C++虚函数表解析》的文章，引起了大家的兴趣。有很多朋友对我的文章留了言，有鼓励我的，有批评我的，还有很多问问题的。我在这里一并对大家的留言表示感谢。这也是我为什么再写一篇续言的原因。因为，在上一篇文章中，我用了的示例都是非常简单的，主要是为了说明一些机理上的问题，也是为了图一些表达上方便和简单。不想，这篇文章成为了打开C++对象模型内存布局的一个引子，引发了大家对C++对象的更深层次的讨论。当然，我之前的文章还有很多方面没有涉及，从我个人感觉下来，在谈论虚函数表里，至少有以下这些内容没有涉及：\n1）有成员变量的情况。\n2）有重复继承的情况。\n3）有虚拟继承的情况。\n4）有钻石型虚拟继承的情况。\n 这些都是我本篇文章需要向大家说明的东西。所以，这篇文章将会是《C++虚函数表解析》的一个续篇，也是一篇高级进阶的文章。我希望大家在读这篇文章之前对C++有一定的基础和了解，并能先读我的上一篇文章。因为这篇文章的深度可能会比较深，而且会比较杂乱，我希望你在读本篇文章时不会有大脑思维紊乱导致大脑死机的情况。;-)\n对象的影响因素\n简而言之，我们一个类可能会有如下的影响因素：\n1）成员变量\n2）虚函数（产生虚函数表）\n3）单一继承（只继承于一个类）\n4）多重继承（继承多个类）\n5）重复继承（继承的多个父类中其父类有相同的超类）\n6）虚拟继承（使用virtual方式继承，为了保证继承后父类的内存布局只会存在一份）\n上述的东西通常是C++这门语言在语义方面对对象内部的影响因素，当然，还会有编译器的影响（比如优化），还有字节对齐的影响。在这里我们都不讨论，我们只讨论C++语言上的影响。\n本篇文章着重讨论下述几个情况下的C++对象的内存布局情况。\n …\n 阅读全文 Read More\n\n (26 人打了分，平均分： 4.00 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++ 虚函数表解析",
    "url": "https://coolshell.cn/articles/12165.html",
    "date": "2007-12-18T09:08:02+08:00",
    "description": "\nC++中的虚函数的作用主要是实现了多态的机制。关于多态，简而言之就是用父类型别的指针指向其子类的实例，然后通过父类的指针调用实际子类的成员函数。这种技术可以让父类的指针有“多种形态”，这是一种泛型技术。所谓泛型技术，说白了就是试图使用不变的代码来实现可变的算法。比如：模板技术，RTTI技术，虚函数技术，要么是试图做到在编译时决议，要么试图做到运行时决议。\n关于虚函数的使用方法，我在这里不做过多的阐述。大家可以看看相关的C++的书籍。在这篇文章中，我只想从虚函数的实现机制上面为大家 一个清晰的剖析。\n当然，相同的文章在网上也出现过一些了，但我总感觉这些文章不是很容易阅读，大段大段的代码，没有图片，没有详细的说明，没有比较，没有举一反三。不利于学习和阅读，所以这是我想写下这篇文章的原因。也希望大家多给我提意见。\n言归正传，让我们一起进入虚函数的世界。\n虚函数表\n对C++ 了解的人都应该知道虚函数（Virtual Function）是通过一张虚函数表（Virtual Table）来实现的。简称为V-Table。在这个表中，主是要一个类的虚函数的地址表，这张表解决了继承、覆盖的问题，保证其容真实反应实际的函数。这样，在有虚函数的类的实例中这个表被分配在了这个实例的内存中，所以，当我们用父类的指针来操作一个子类的时候，这张虚函数表就显得由为重要了，它就像一个地图一样，指明了实际所应该调用的函数。\n这里我们着重看一下这张虚函数表。C++的编译器应该是保证虚函数表的指针存在于对象实例中最前面的位置（这是为了保证取到虚函数表的有最高的性能——如果有多层继承或是多重继承的情况下）。 这意味着我们通过对象实例的地址得到这张虚函数表，然后就可以遍历其中函数指针，并调用相应的函数。\n听我扯了那么多，我可以感觉出来你现在可能比以前更加晕头转向了。 没关系，下面就是实际的例子，相信聪明的你一看就明白了。\n …\n 阅读全文 Read More\n\n (34 人打了分，平均分： 4.15 )Loading...\n"
  },
  {
    "content": "",
    "title": "C/C++返回内部静态成员的陷阱",
    "url": "https://coolshell.cn/articles/12192.html",
    "date": "2006-11-16T10:12:11+08:00",
    "description": "\n在我们用C/C++开发的过程中，总是有一个问题会给我们带来苦恼。这个问题就是函数内和函数外代码需要通过一块内存来交互（比如，函数返回字符串），这个问题困扰和很多开发人员。如果你的内存是在函数内栈上分配的，那么这个内存会随着函数的返回而被弹栈释放，所以，你一定要返回一块函数外部还有效的内存。\n这是一个让无数人困扰的问题。如果你一不小心，你就很有可能在这个上面犯错误。当然目前有很多解决方法，如果你熟悉一些标准库的话，你可以看到许多各式各样的解决方法。大体来说有下面几种：\n1）在函数内部通过malloc或new在堆上分配内存，然后把这块内存返回（因为在堆上分配的内存是全局可见的）。这样带来的问题就是潜在的内存问题。因为，如果返回出去的内存不释放，那么就是memory Leak。或者是被多次释放，从而造成程序的crash。这两个问题都相当的严重，所以这种设计方法并不推荐。（在一些Windows API中，当你调用了一些API后，你必需也要调用他的某些API来释放这块内存）\n2）让用户传入一块他自己的内存地址，而在函数中把要返回的内存放到这块内存中。这是一个目前普遍使用的方式。很多Windows API函数或是标准C函数都需要你传入一个buffer和这个buffer的长度。这种方式对我们来说应该是屡见不鲜了。这种方式的好处就是由函数外部的程序来维护这块内存，比较简显直观。但问题就是在使用上稍许有些麻烦。不过这种方式把犯错误的机率减到了最低。\n3）第三种方式显得比较另类，他利用了static的特性，static的栈内存一旦分配，那这块内存不会随着函数的返回而释放，而且，它是全局可见的（只要你有这块内存的地址）。所以，有一些函数使用了static的这个特性，即不用使用堆上的内存，也不需要用户传入一个buffer和其长度。从而，使用得自己的函数长得很漂亮，也很容易使用。\n这里，我想对第三个方法进行一些讨论。使用static内存这个方法看似不错，但是它有让你想象不到的陷阱。让我们来用一个实际发生的案例来举一个例子吧。\n …\n 阅读全文 Read More\n\n (22 人打了分，平均分： 3.50 )Loading...\n"
  },
  {
    "content": "",
    "title": "C++ STL string的Copy-On-Write技术",
    "url": "https://coolshell.cn/articles/12199.html",
    "date": "2004-06-23T10:36:50+08:00",
    "description": "\nScott Meyers在《More Effective C++》中举了个例子，不知你是否还记得？在你还在上学的时候，你的父母要你不要看电视，而去复习功课，于是你把自己关在房间里，做出一副正在复习功课的样子，其实你在干着别的诸如给班上的某位女生写情书之类的事，而一旦你的父母出来在你房间要检查你是否在复习时，你才真正捡起课本看书。这就是“拖延战术”，直到你非要做的时候才去做。\n当然，这种事情在现实生活中时往往会出事，但其在编程世界中摇身一变，就成为了最有用的技术，正如C++中的可以随处声明变量的特点一样，Scott Meyers推荐我们，在真正需要一个存储空间时才去声明变量（分配内存），这样会得到程序在运行时最小的内存花销。执行到那才会去做分配内存这种比较耗时的工作，这会给我们的程序在运行时有比较好的性能。必竟，20%的程序运行了80%的时间。\n当然，拖延战术还并不只是这样一种类型，这种技术被我们广泛地应用着，特别是在操作系统当中，当一个程序运行结束时，操作系统并不会急着把其清除出内存，原因是有可能程序还会马上再运行一次（从磁盘把程序装入到内存是个很慢的过程），而只有当内存不够用了，才会把这些还驻留内存的程序清出。\n写时才拷贝（Copy-On-Write）技术，就是编程界“懒惰行为”——拖延战术的产物。举个例子，比如我们有个程序要写文件，不断地根据网络传来的数据写，如果每一次fwrite或是fprintf都要进行一个磁盘的I/O操作的话，都简直就是性能上巨大的损失，因此通常的做法是，每次写文件操作都写在特定大小的一块内存中（磁盘缓存），只有当我们关闭文件时，才写到磁盘上（这就是为什么如果文件不关闭，所写的东西会丢失的原因）。更有甚者是文件关闭时都不写磁盘，而一直等到关机或是内存不够时才写磁盘，Unix就是这样一个系统，如果非正常退出，那么数据就会丢失，文件就会损坏。\n呵呵，为了性能我们需要冒这样大的风险，还好我们的程序是不会忙得忘了还有一块数据需要写到磁盘上的，所以这种做法，还是很有必要的。\n …\n 阅读全文 Read More\n\n (44 人打了分，平均分： 4.20 )Loading...\n"
  }
]
